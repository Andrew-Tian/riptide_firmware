ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_adc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ADC_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	ADC_Init:
  25              	.LFB146:
  26              		.file 1 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c"
   1:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @file    stm32f4xx_hal_adc.c
   4:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @version V1.7.1
   6:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @date    14-April-2017
   7:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *           + Initialization and de-initialization functions
  10:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *           + IO operation functions
  11:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *           + State and errors functions
  12:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         
  13:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   @verbatim
  14:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ==============================================================================
  15:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                     ##### ADC Peripheral features #####
  16:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ==============================================================================
  17:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   [..] 
  18:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution.
  19:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Interrupt generation at the end of conversion, end of injected conversion,  
  20:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       and in case of analog watchdog or overrun events
  21:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Single and continuous conversion modes.
  22:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Scan mode for automatic conversion of channel 0 to channel x.
  23:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Data alignment with in-built data coherency.
  24:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Channel-wise programmable sampling time.
  25:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) External trigger option with configurable polarity for both regular and 
  26:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       injected conversion.
  27:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Dual/Triple mode (on devices with 2 ADCs or more).
  28:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Configurable DMA data storage in Dual/Triple ADC mode. 
  29:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Configurable delay between conversions in Dual/Triple interleaved mode.
  30:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) ADC conversion type (refer to the datasheets).
  31:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  32:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       slower speed.
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 2


  33:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) ADC input range: VREF(minus) = VIN = VREF(plus).
  34:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) DMA request generation during regular channel conversion.
  35:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
  36:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
  37:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                      ##### How to use this driver #####
  38:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ==============================================================================
  39:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   [..]
  40:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#)Initialize the ADC low level resources by implementing the HAL_ADC_MspInit():
  41:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (##) Enable the ADC interface clock using __HAL_RCC_ADC_CLK_ENABLE()
  42:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (##) ADC pins configuration
  43:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) Enable the clock for the ADC GPIOs using the following function:
  44:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                    __HAL_RCC_GPIOx_CLK_ENABLE()  
  45:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) Configure these ADC pins in analog mode using HAL_GPIO_Init() 
  46:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (##) In case of using interrupts (e.g. HAL_ADC_Start_IT())
  47:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) Configure the ADC interrupt priority using HAL_NVIC_SetPriority()
  48:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) Enable the ADC IRQ handler using HAL_NVIC_EnableIRQ()
  49:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) In ADC IRQ handler, call HAL_ADC_IRQHandler()
  50:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (##) In case of using DMA to control data transfer (e.g. HAL_ADC_Start_DMA())
  51:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) Enable the DMAx interface clock using __HAL_RCC_DMAx_CLK_ENABLE()
  52:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) Configure and enable two DMA streams stream for managing data
  53:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                  transfer from peripheral to memory (output stream)
  54:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) Associate the initialized DMA handle to the CRYP DMA handle
  55:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                  using  __HAL_LINKDMA()
  56:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) Configure the priority and enable the NVIC for the transfer complete
  57:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                  interrupt on the two DMA Streams. The output stream should have higher
  58:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                  priority than the input stream.
  59:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                        
  60:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     *** Configuration of ADC, groups regular/injected, channels parameters ***
  61:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ==============================================================================
  62:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   [..]
  63:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Configure the ADC parameters (resolution, data alignment, ...)
  64:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       and regular group parameters (conversion trigger, sequencer, ...)
  65:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       using function HAL_ADC_Init().
  66:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
  67:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Configure the channels for regular group parameters (channel number, 
  68:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       channel rank into sequencer, ..., into regular group)
  69:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       using function HAL_ADC_ConfigChannel().
  70:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
  71:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Optionally, configure the injected group parameters (conversion trigger, 
  72:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       sequencer, ..., of injected group)
  73:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       and the channels for injected group parameters (channel number, 
  74:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       channel rank into sequencer, ..., into injected group)
  75:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       using function HAL_ADCEx_InjectedConfigChannel().
  76:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
  77:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Optionally, configure the analog watchdog parameters (channels
  78:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       monitored, thresholds, ...) using function HAL_ADC_AnalogWDGConfig().
  79:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
  80:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Optionally, for devices with several ADC instances: configure the 
  81:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       multimode parameters using function HAL_ADCEx_MultiModeConfigChannel().
  82:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
  83:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                        *** Execution of ADC conversions ***
  84:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ==============================================================================
  85:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   [..]  
  86:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) ADC driver can be used among three modes: polling, interruption,
  87:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       transfer by DMA.    
  88:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
  89:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      *** Polling mode IO operation ***
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 3


  90:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      =================================
  91:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      [..]    
  92:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start() 
  93:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) Wait for end of conversion using HAL_ADC_PollForConversion(), at this stage
  94:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****            user can specify the value of timeout according to his end application      
  95:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) To read the ADC converted values, use the HAL_ADC_GetValue() function.
  96:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop()
  97:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        
  98:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      *** Interrupt mode IO operation ***    
  99:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      ===================================
 100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      [..]    
 101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start_IT() 
 102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) Use HAL_ADC_IRQHandler() called under ADC_IRQHandler() Interrupt subroutine
 103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) At ADC end of conversion HAL_ADC_ConvCpltCallback() function is executed and user can 
 104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ConvCpltCallback 
 105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) In case of ADC Error, HAL_ADC_ErrorCallback() function is executed and user can 
 106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ErrorCallback
 107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop_IT()     
 108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      *** DMA mode IO operation ***    
 110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      ==============================
 111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      [..]    
 112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start_DMA(), at this stage the user specify the l
 113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****            of data to be transferred at each end of conversion 
 114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) At The end of data transfer by HAL_ADC_ConvCpltCallback() function is executed and user 
 115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ConvCpltCallback 
 116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) In case of transfer Error, HAL_ADC_ErrorCallback() function is executed and user can 
 117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ErrorCallback
 118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop_DMA()
 119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                     
 120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      *** ADC HAL driver macros list ***
 121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      ============================================= 
 122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      [..]
 123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        Below the list of most used macros in ADC HAL driver.
 124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        
 125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) __HAL_ADC_ENABLE : Enable the ADC peripheral
 126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) __HAL_ADC_DISABLE : Disable the ADC peripheral
 127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) __HAL_ADC_ENABLE_IT: Enable the ADC end of conversion interrupt
 128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) __HAL_ADC_DISABLE_IT: Disable the ADC end of conversion interrupt
 129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) __HAL_ADC_GET_IT_SOURCE: Check if the specified ADC interrupt source is enabled or disabl
 130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) __HAL_ADC_CLEAR_FLAG: Clear the ADC's pending flags
 131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) __HAL_ADC_GET_FLAG: Get the selected ADC's flag status
 132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) ADC_GET_RESOLUTION: Return resolution bits in CR1 register 
 133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      [..] 
 135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (@) You can refer to the ADC HAL driver header file for more useful macros 
 136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       *** Deinitialization of ADC ***
 138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ==============================================================================
 139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   [..]
 140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Disable the ADC interface
 141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (++) ADC clock can be hard reset and disabled at RCC top level.
 142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (++) Hard reset of ADC peripherals
 143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****           using macro __HAL_RCC_ADC_FORCE_RESET(), __HAL_RCC_ADC_RELEASE_RESET().
 144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (++) ADC clock disable using the equivalent macro/functions as configuration step.
 145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                (+++) Example:
 146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 4


 147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                    other device clock parameters configuration:
 148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                (+++) HAL_RCC_GetOscConfig(&RCC_OscInitStructure);
 149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_OFF; (if not used for system clock)
 151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) ADC pins configuration
 154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (++) Disable the clock for the ADC GPIOs using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Optionally, in case of usage of ADC with interruptions:
 157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (++) Disable the NVIC for ADC using function HAL_NVIC_DisableIRQ(ADCx_IRQn)
 158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Optionally, in case of usage of DMA:
 160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         (++) Deinitialize the DMA using function HAL_DMA_DeInit().
 161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         (++) Disable the NVIC for DMA using function HAL_NVIC_DisableIRQ(DMAx_Channelx_IRQn)   
 162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     @endverbatim
 164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ******************************************************************************
 165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @attention
 166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *
 167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *
 169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
 178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *      without specific prior written permission.
 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *
 180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *
 191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ******************************************************************************
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */ 
 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** #include "stm32f4xx_hal.h"
 196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @addtogroup STM32F4xx_HAL_Driver
 198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @defgroup ADC ADC
 202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief ADC driver modules
 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 5


 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */ 
 205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @addtogroup ADC_Private_Functions
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
 214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** static void ADC_Init(ADC_HandleTypeDef* hadc);
 217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @}
 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
 226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions 
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  *  @brief    Initialization and Configuration functions 
 230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  *
 231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** @verbatim    
 232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  ===============================================================================
 233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  ===============================================================================
 235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) De-initialize the ADC. 
 238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****          
 239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** @endverbatim
 240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
 241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         in the ADC_InitStruct and initializes the ADC MSP.
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *           
 247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         ClockPrescaler, Resolution, Data Alignment and number of conversion), however,
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the rest of the configuration parameters are specific to the regular
 250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         channels group (scan mode activation, continuous mode activation,
 251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         External trigger source and edge, DMA continuous request after the  
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         last transfer and End of conversion selection).
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *             
 254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status
 257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 6


 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check ADC handle */
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(hadc == NULL)
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     return HAL_ERROR;
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(hadc->State == HAL_ADC_STATE_RESET)
 287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Initialize ADC error code */
 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Init the low level hardware */
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* correctly completed.                                                     */
 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state */
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC parameters */
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_Init(hadc);
 309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC error code to none */
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the ADC state */
 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 7


 318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else
 319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Release Lock */
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return tmp_hal_status;
 328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Deinitializes the ADCx peripheral registers to their default reset values. 
 332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check ADC handle */
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(hadc == NULL)
 342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     return HAL_ERROR;
 344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set ADC state */
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Disable ADC peripheral */
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* correctly completed.                                                     */
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* DeInit the low level hardware */
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC error code to none */
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state */
 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET;
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process unlocked */
 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return tmp_hal_status;
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 8


 375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
 382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   UNUSED(hadc);
 387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****             the HAL_ADC_MspInit could be implemented in the user file
 389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****    */ 
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   UNUSED(hadc);
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****             the HAL_ADC_MspDeInit could be implemented in the user file
 404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****    */ 
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @}
 409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
 412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  *  @brief    IO operation functions 
 413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  *
 414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** @verbatim   
 415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  ===============================================================================
 416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              ##### IO operation functions #####
 417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  ===============================================================================  
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Start conversion of regular channel.
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Stop conversion of regular channel.
 421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Start conversion of regular channel and enable interrupt.
 422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Stop conversion of regular channel and disable interrupt.
 423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Start conversion of regular channel and enable DMA transfer.
 424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Stop conversion of regular channel and disable DMA transfer.
 425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Handle ADC interrupt request. 
 426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                
 427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** @endverbatim
 428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
 429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 9


 432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Enables ADC and starts conversion of the regular channels.
 433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status
 436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __IO uint32_t counter = 0U;
 440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC_Common_TypeDef *tmpADC_Common;
 441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process locked */
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Enable the ADC peripheral */
 450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
 451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   Tstab time the ADC's stabilization */
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {  
 454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable the Peripheral */
 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Delay for ADC stabilization time */
 458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     while(counter != 0U)
 461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       counter--;
 463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state                                                          */
 470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
 471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
 475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
 477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* update ADC state.                                                      */
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
 484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
 487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 10


 489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     else
 490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Reset ADC all error code fields */
 492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     } 
 494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Process unlocked */
 496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Pointer to the common control register to which is belonging hadc    */
 501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
 502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* control register)                                                    */
 503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
 506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Check if Multimode enabled */
 510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
 513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     else
 520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
 522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
 532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Disables ADC and stop conversion of regular channels.
 536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * 
 537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @note   Caution: This function will stop also injected channels.  
 538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *
 539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *
 542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status.
 543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 11


 546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process locked */
 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Disable ADC peripheral */
 554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
 557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state */
 560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process unlocked */
 566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Poll for regular conversion complete
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         conversion) are cleared by this function.
 576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
 578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
 579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
 581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         be performed on the complete sequence.
 582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.  
 585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status
 586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   uint32_t tickstart = 0U;
 590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  
 591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for      */
 592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* each conversion:                                                       */
 593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
 594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* several ranks and polling for end of each conversion.                  */
 595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* For code simplicity sake, this particular case is generalized to       */
 596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* ADC configured in DMA mode and polling for end of each conversion.     */
 597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Update ADC state machine to error */
 601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 12


 603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Process unlocked */
 604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     return HAL_ERROR;
 607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Get tick */ 
 610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tickstart = HAL_GetTick();
 611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check End of conversion flag */
 613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
 616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         
 623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Process unlocked */
 624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         
 626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         return HAL_TIMEOUT;
 627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Clear regular group conversion flag */
 632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Update ADC state machine */
 635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
 638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
 639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Note: On STM32F4, there is no independent flag of end of sequence.       */
 640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /*       The test of scan sequence on going is done either with scan        */
 641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /*       sequence disabled or with end of conversion flag set to            */
 642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /*       of end of sequence.                                                */
 643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state */
 649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     { 
 653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return ADC state */
 658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
 659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 13


 660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Poll for conversion event
 663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  EventType: the ADC event type.
 666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *          This parameter can be one of the following values:
 667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watch Dog event.
 668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event.
 669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.   
 670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status
 671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
 673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   uint32_t tickstart = 0U;
 675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
 679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Get tick */
 681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tickstart = HAL_GetTick();
 682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check selected event flag */
 684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   while(!(__HAL_ADC_GET_FLAG(hadc,EventType)))
 685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Check for the Timeout */
 687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         
 694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Process unlocked */
 695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         
 697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         return HAL_TIMEOUT;
 698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
 703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(EventType == ADC_AWD_EVENT)
 704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state */
 706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
 709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Overrun event */
 712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else
 713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state */
 715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC error code to overrun */
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 14


 717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear ADC overrun flag */
 720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return ADC state */
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
 725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Enables the interrupt and starts ADC conversion of regular channels.
 730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status.
 733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
 735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __IO uint32_t counter = 0U;
 737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC_Common_TypeDef *tmpADC_Common;
 738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process locked */
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Enable the ADC peripheral */
 747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
 748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   Tstab time the ADC's stabilization */
 749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {  
 751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable the Peripheral */
 752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Delay for ADC stabilization time */
 755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
 756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     while(counter != 0U)
 758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       counter--;
 760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
 764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state                                                          */
 767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
 768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
 769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
 772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 15


 774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* update ADC state.                                                      */
 775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
 781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
 784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     else
 787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Reset ADC all error code fields */
 789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Process unlocked */
 793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Pointer to the common control register to which is belonging hadc    */
 798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
 799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* control register)                                                    */
 800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
 803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
 807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Check if Multimode enabled */
 810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
 813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     else
 820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
 822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 16


 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
 832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Disables the interrupt and stop ADC conversion of regular channels.
 836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * 
 837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @note   Caution: This function will stop also injected channels.  
 838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *
 839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status.
 842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process locked */
 849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Disable ADC peripheral */
 853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
 856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   	/* Disable ADC end of conversion interrupt for regular group */
 859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state */
 862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process unlocked */
 868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
 871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
 872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
 876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
 879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
 881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   uint32_t tmp1 = 0U, tmp2 = 0U;
 883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 17


 888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check End of conversion flag for regular channels */
 892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(tmp1 && tmp2)
 893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Set ADC state */
 898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular   */
 902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.      */
 903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Note: On STM32F4, there is no independent flag of end of sequence.   */
 904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /*       The test of scan sequence on going is done either with scan    */
 905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /*       sequence disabled or with end of conversion flag set to        */
 906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /*       of end of sequence.                                            */
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group regular */
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Note: Overrun interrupt was enabled with EOC interrupt in          */
 914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
 915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* by overrun IRQ process below.                                      */
 916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Set ADC state */
 919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Conversion complete callback */ 
 928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear regular group conversion flag */
 931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check End of conversion flag for injected channels */
 937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(tmp1 && tmp2)
 938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
 940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Set ADC state */
 943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 18


 945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group injected  */
 947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* by external trigger, scan sequence on going or by automatic injected */
 948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* conversion from group regular (same conditions as group regular      */
 949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* interruption disabling above).                                       */
 950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group injected */
 958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Set ADC state */
 961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       { 
 965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Conversion complete callback */ 
 970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     HAL_ADCEx_InjectedConvCpltCallback(hadc);
 971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear injected group conversion flag */
 973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check Analog watchdog flag */
 979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(tmp1 && tmp2)
 980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Set ADC state */
 984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Level out of window callback */ 
 987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
 988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
 990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check Overrun flag */
 997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(tmp1 && tmp2)
 998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Note: On STM32F4, ADC overrun can be set through other parameters    */
1000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /*       refer to description of parameter "EOCSelection" for more      */
1001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /*       details.                                                       */
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 19


1002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC error code to overrun */
1004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear ADC overrun flag */
1007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Error callback */ 
1010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     HAL_ADC_ErrorCallback(hadc);
1011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear the Overrun flag */
1013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
1016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Enables ADC DMA request after last transfer (Single-ADC mode) and enables ADC periphera
1019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  pData: The destination Buffer address.
1022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
1023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status
1024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
1027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __IO uint32_t counter = 0U;
1028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC_Common_TypeDef *tmpADC_Common;
1029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
1031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
1033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process locked */
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_LOCK(hadc);
1036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Enable the ADC peripheral */
1038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
1039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   Tstab time the ADC's stabilization */
1040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
1041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {  
1042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable the Peripheral */
1043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
1044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
1048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     while(counter != 0U)
1049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
1050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       counter--;
1051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
1052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
1056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state                                                          */
1058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 20


1059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
1062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* update ADC state.                                                      */
1066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
1068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
1070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
1074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
1077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     else
1078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
1079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Reset ADC all error code fields */
1080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
1082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Process unlocked */
1084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_UNLOCK(hadc);   
1087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Pointer to the common control register to which is belonging hadc    */
1089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
1090:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* control register)                                                    */
1091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     tmpADC_Common = ADC_COMMON_REGISTER(hadc);
1092:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the DMA transfer complete callback */
1094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1095:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1096:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the DMA half transfer complete callback */
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1098:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1099:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the DMA error callback */
1100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
1104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* start (in case of SW start):                                           */
1105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
1109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable ADC overrun interrupt */
1111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable ADC DMA mode */
1114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 |= ADC_CR2_DMA;
1115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 21


1116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Start the DMA channel */
1117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
1118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Check if Multimode enabled */
1120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
1121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
1122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
1123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
1124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
1125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
1128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
1129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     else
1130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
1131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
1132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
1133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
1134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
1135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
1137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
1138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
1142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
1143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Disables ADC DMA (Single-ADC mode) and disables ADC peripheral    
1146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status
1149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
1152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
1155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process locked */
1158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_LOCK(hadc);
1159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Disable ADC peripheral */
1162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
1163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
1166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Disable the selected ADC DMA mode */
1168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 &= ~ADC_CR2_DMA;
1169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 22


1173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state */
1178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process unlocked */
1184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
1187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return tmp_hal_status;
1188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
1189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Gets the converted value from data register of regular channel.
1192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval Converted value
1195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {       
1198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return the selected ADC converted value */ 
1199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return hadc->Instance->DR;
1200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
1201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Regular conversion complete callback in non blocking mode 
1204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
1207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
1210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   UNUSED(hadc);
1212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****             the HAL_ADC_ConvCpltCallback could be implemented in the user file
1214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****    */
1215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
1216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Regular conversion half DMA transfer callback in non blocking mode 
1219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
1222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
1225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   UNUSED(hadc);
1227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****             the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
1229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****    */
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 23


1230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
1231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode 
1234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
1237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
1240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   UNUSED(hadc);
1242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****             the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
1244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****    */
1245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
1246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Error ADC callback.
1249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer 
1250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         (HAL ADC handle paramater "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
1251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
1252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
1253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
1254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
1255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
1258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
1261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   UNUSED(hadc);
1263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****             the HAL_ADC_ErrorCallback could be implemented in the user file
1265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****    */
1266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @}
1270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  *  @brief   	Peripheral Control functions 
1274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  *
1275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** @verbatim   
1276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  ===============================================================================
1277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              ##### Peripheral Control functions #####
1278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  ===============================================================================  
1279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Configure regular channels. 
1281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Configure injected channels.
1282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Configure multimode.
1283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Configure the analog watch dog.
1284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
1285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** @endverbatim
1286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 24


1287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /**
1290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
1291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         rank in the sequencer and its sample time.
1292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  sConfig: ADC configuration structure. 
1295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status
1296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
1299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __IO uint32_t counter = 0U;
1300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC_Common_TypeDef *tmpADC_Common;
1301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
1303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
1305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process locked */
1308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_LOCK(hadc);
1309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if (sConfig->Channel > ADC_CHANNEL_9)
1312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear the old sample time */
1314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
1315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the new sample time */
1317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
1318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear the old sample time */
1322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
1323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the new sample time */
1325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
1326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* For Rank 1 to 6 */
1329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if (sConfig->Rank < 7U)
1330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
1333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
1336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* For Rank 7 to 12 */
1338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else if (sConfig->Rank < 13U)
1339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
1342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 25


1344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
1345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* For Rank 13 to 16 */
1347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else
1348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
1351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
1354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Pointer to the common control register to which is belonging hadc    */
1357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
1358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* control register)                                                    */
1359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     tmpADC_Common = ADC_COMMON_REGISTER(hadc);
1360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* if ADC1 Channel_18 is selected enable VBAT Channel */
1362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
1363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable the VBAT channel*/
1365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     tmpADC_Common->CCR |= ADC_CCR_VBATE;
1366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VRE
1369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channe
1370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable the TSVREFE channel*/
1372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
1373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
1375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
1376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Delay for temperature sensor stabilization time */
1377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Compute number of CPU cycles to wait for */
1378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
1379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       while(counter != 0U)
1380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
1381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         counter--;
1382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
1383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
1384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process unlocked */
1387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
1390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
1391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
1392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
1395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @note Analog watchdog thresholds can be modified while ADC conversion
1396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * is on going.
1397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * In this case, some constraints must be taken into account:
1398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * The programmed threshold values are effective from the next
1399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * ADC EOC (end of unitary conversion).
1400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * Considering that registers write delay may happen due to
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 26


1401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * bus activity, this might cause an uncertainty on the
1402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * effective timing of the new programmed threshold values.
1403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  AnalogWDGConfig : pointer to an ADC_AnalogWDGConfTypeDef structure 
1406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         that contains the configuration information of ADC analog watchdog.
1407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status	  
1408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
1411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
1412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   uint32_t tmp = 0U;
1413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** #endif /* USE_FULL_ASSERT  */  
1414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
1416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(AnalogWDGConfig->WatchdogMode));
1417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
1421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp = ADC_GET_RESOLUTION(hadc);
1422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
1423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
1424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** #endif /* USE_FULL_ASSERT  */
1425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process locked */
1427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_LOCK(hadc);
1428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
1430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
1432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
1433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else
1435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
1437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
1438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
1441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
1442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set the analog watchdog enable mode */
1444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
1445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set the high threshold */
1447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
1448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set the low threshold */
1450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
1451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Clear the Analog watchdog channel select bits */
1453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
1454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set the Analog watchdog channel */
1456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
1457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 27


1458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process unlocked */
1459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
1462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
1463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
1464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @}
1467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 ADC Peripheral State functions
1470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  *  @brief   ADC Peripheral State functions 
1471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  *
1472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** @verbatim   
1473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  ===============================================================================
1474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****             ##### Peripheral State and errors functions #####
1475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  ===============================================================================  
1476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     [..]
1477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     This subsection provides functions allowing to
1478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Check the ADC state
1479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Check the ADC Error
1480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****          
1481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** @endverbatim
1482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
1483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  return the ADC state
1487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL state
1490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
1493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return ADC state */
1494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return hadc->State;
1495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
1496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Return the ADC error code
1499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval ADC Error Code
1502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
1505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return hadc->ErrorCode;
1506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
1507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @}
1510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @addtogroup ADC_Private_Functions
1513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
1514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 28


1515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
1518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         in the ADC_InitStruct without initializing the ADC MSP.       
1519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
1521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
1522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** static void ADC_Init(ADC_HandleTypeDef* hadc)
1524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
  27              		.loc 1 1524 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC_Common_TypeDef *tmpADC_Common;
1526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set ADC parameters */
1528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Pointer to the common control register to which is belonging hadc    */
1529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
1530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* control register)                                                    */
1531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmpADC_Common = ADC_COMMON_REGISTER(hadc);
1532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set the ADC clock prescaler */
1534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
  33              		.loc 1 1534 0
  34 0000 4C4B     		ldr	r3, .L7
  35 0002 5A68     		ldr	r2, [r3, #4]
  36 0004 22F44032 		bic	r2, r2, #196608
  37 0008 5A60     		str	r2, [r3, #4]
1535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  38              		.loc 1 1535 0
  39 000a 5A68     		ldr	r2, [r3, #4]
  40 000c 4168     		ldr	r1, [r0, #4]
  41 000e 0A43     		orrs	r2, r2, r1
  42 0010 5A60     		str	r2, [r3, #4]
1536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set ADC scan mode */
1538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
  43              		.loc 1 1538 0
  44 0012 0268     		ldr	r2, [r0]
  45 0014 5368     		ldr	r3, [r2, #4]
  46 0016 23F48073 		bic	r3, r3, #256
  47 001a 5360     		str	r3, [r2, #4]
1539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
  48              		.loc 1 1539 0
  49 001c 0268     		ldr	r2, [r0]
  50 001e 5368     		ldr	r3, [r2, #4]
  51 0020 0169     		ldr	r1, [r0, #16]
  52 0022 43EA0123 		orr	r3, r3, r1, lsl #8
  53 0026 5360     		str	r3, [r2, #4]
1540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set ADC resolution */
1542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  54              		.loc 1 1542 0
  55 0028 0268     		ldr	r2, [r0]
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 29


  56 002a 5368     		ldr	r3, [r2, #4]
  57 002c 23F04073 		bic	r3, r3, #50331648
  58 0030 5360     		str	r3, [r2, #4]
1543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR1 |=  hadc->Init.Resolution;
  59              		.loc 1 1543 0
  60 0032 0268     		ldr	r2, [r0]
  61 0034 5368     		ldr	r3, [r2, #4]
  62 0036 8168     		ldr	r1, [r0, #8]
  63 0038 0B43     		orrs	r3, r3, r1
  64 003a 5360     		str	r3, [r2, #4]
1544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set ADC data alignment */
1546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  65              		.loc 1 1546 0
  66 003c 0268     		ldr	r2, [r0]
  67 003e 9368     		ldr	r3, [r2, #8]
  68 0040 23F40063 		bic	r3, r3, #2048
  69 0044 9360     		str	r3, [r2, #8]
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR2 |= hadc->Init.DataAlign;
  70              		.loc 1 1547 0
  71 0046 0268     		ldr	r2, [r0]
  72 0048 9368     		ldr	r3, [r2, #8]
  73 004a C168     		ldr	r1, [r0, #12]
  74 004c 0B43     		orrs	r3, r3, r1
  75 004e 9360     		str	r3, [r2, #8]
1548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Enable external trigger if trigger selection is different of software  */
1550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* start.                                                                 */
1551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Note: This configuration keeps the hardware feature of parameter       */
1552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
1553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /*       software start.                                                  */
1554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  76              		.loc 1 1554 0
  77 0050 826A     		ldr	r2, [r0, #40]
  78 0052 394B     		ldr	r3, .L7+4
  79 0054 9A42     		cmp	r2, r3
  80 0056 49D0     		beq	.L2
1555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Select external trigger to start conversion */
1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
  81              		.loc 1 1557 0
  82 0058 0268     		ldr	r2, [r0]
  83 005a 9368     		ldr	r3, [r2, #8]
  84 005c 23F07063 		bic	r3, r3, #251658240
  85 0060 9360     		str	r3, [r2, #8]
1558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
  86              		.loc 1 1558 0
  87 0062 0268     		ldr	r2, [r0]
  88 0064 9368     		ldr	r3, [r2, #8]
  89 0066 816A     		ldr	r1, [r0, #40]
  90 0068 0B43     		orrs	r3, r3, r1
  91 006a 9360     		str	r3, [r2, #8]
1559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Select external trigger polarity */
1561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  92              		.loc 1 1561 0
  93 006c 0268     		ldr	r2, [r0]
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 30


  94 006e 9368     		ldr	r3, [r2, #8]
  95 0070 23F04053 		bic	r3, r3, #805306368
  96 0074 9360     		str	r3, [r2, #8]
1562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
  97              		.loc 1 1562 0
  98 0076 0268     		ldr	r2, [r0]
  99 0078 9368     		ldr	r3, [r2, #8]
 100 007a C16A     		ldr	r1, [r0, #44]
 101 007c 0B43     		orrs	r3, r3, r1
 102 007e 9360     		str	r3, [r2, #8]
 103              	.L3:
1563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else
1565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Reset the external trigger */
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
1568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
1569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Enable or disable ADC continuous conversion mode */
1572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 104              		.loc 1 1572 0
 105 0080 0268     		ldr	r2, [r0]
 106 0082 9368     		ldr	r3, [r2, #8]
 107 0084 23F00203 		bic	r3, r3, #2
 108 0088 9360     		str	r3, [r2, #8]
1573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 109              		.loc 1 1573 0
 110 008a 0268     		ldr	r2, [r0]
 111 008c 9368     		ldr	r3, [r2, #8]
 112 008e 8169     		ldr	r1, [r0, #24]
 113 0090 43EA4103 		orr	r3, r3, r1, lsl #1
 114 0094 9360     		str	r3, [r2, #8]
1574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(hadc->Init.DiscontinuousConvMode != DISABLE)
 115              		.loc 1 1575 0
 116 0096 036A     		ldr	r3, [r0, #32]
 117 0098 002B     		cmp	r3, #0
 118 009a 32D1     		bne	.L6
1576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
1578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
1580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
1581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the number of channels to be converted in discontinuous mode */
1583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
1584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
1585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else
1587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
1589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 119              		.loc 1 1589 0
 120 009c 0268     		ldr	r2, [r0]
 121 009e 5368     		ldr	r3, [r2, #4]
 122 00a0 23F40063 		bic	r3, r3, #2048
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 31


 123 00a4 5360     		str	r3, [r2, #4]
 124              	.L5:
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set ADC number of conversion */
1593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 125              		.loc 1 1593 0
 126 00a6 0268     		ldr	r2, [r0]
 127 00a8 D36A     		ldr	r3, [r2, #44]
 128 00aa 23F47003 		bic	r3, r3, #15728640
 129 00ae D362     		str	r3, [r2, #44]
1594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 130              		.loc 1 1594 0
 131 00b0 0168     		ldr	r1, [r0]
 132 00b2 CB6A     		ldr	r3, [r1, #44]
 133 00b4 C269     		ldr	r2, [r0, #28]
 134 00b6 013A     		subs	r2, r2, #1
 135 00b8 43EA0253 		orr	r3, r3, r2, lsl #20
 136 00bc CB62     		str	r3, [r1, #44]
1595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Enable or disable ADC DMA continuous request */
1597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 137              		.loc 1 1597 0
 138 00be 0268     		ldr	r2, [r0]
 139 00c0 9368     		ldr	r3, [r2, #8]
 140 00c2 23F40073 		bic	r3, r3, #512
 141 00c6 9360     		str	r3, [r2, #8]
1598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 142              		.loc 1 1598 0
 143 00c8 0268     		ldr	r2, [r0]
 144 00ca 9368     		ldr	r3, [r2, #8]
 145 00cc 016B     		ldr	r1, [r0, #48]
 146 00ce 43EA4123 		orr	r3, r3, r1, lsl #9
 147 00d2 9360     		str	r3, [r2, #8]
1599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Enable or disable ADC end of conversion selection */
1601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 148              		.loc 1 1601 0
 149 00d4 0268     		ldr	r2, [r0]
 150 00d6 9368     		ldr	r3, [r2, #8]
 151 00d8 23F48063 		bic	r3, r3, #1024
 152 00dc 9360     		str	r3, [r2, #8]
1602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 153              		.loc 1 1602 0
 154 00de 0268     		ldr	r2, [r0]
 155 00e0 9368     		ldr	r3, [r2, #8]
 156 00e2 4169     		ldr	r1, [r0, #20]
 157 00e4 43EA8123 		orr	r3, r3, r1, lsl #10
 158 00e8 9360     		str	r3, [r2, #8]
 159 00ea 7047     		bx	lr
 160              	.L2:
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 161              		.loc 1 1567 0
 162 00ec 0268     		ldr	r2, [r0]
 163 00ee 9368     		ldr	r3, [r2, #8]
 164 00f0 23F07063 		bic	r3, r3, #251658240
 165 00f4 9360     		str	r3, [r2, #8]
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 32


1568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 166              		.loc 1 1568 0
 167 00f6 0268     		ldr	r2, [r0]
 168 00f8 9368     		ldr	r3, [r2, #8]
 169 00fa 23F04053 		bic	r3, r3, #805306368
 170 00fe 9360     		str	r3, [r2, #8]
 171 0100 BEE7     		b	.L3
 172              	.L6:
1580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 173              		.loc 1 1580 0
 174 0102 0268     		ldr	r2, [r0]
 175 0104 5368     		ldr	r3, [r2, #4]
 176 0106 43F40063 		orr	r3, r3, #2048
 177 010a 5360     		str	r3, [r2, #4]
1583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 178              		.loc 1 1583 0
 179 010c 0268     		ldr	r2, [r0]
 180 010e 5368     		ldr	r3, [r2, #4]
 181 0110 23F46043 		bic	r3, r3, #57344
 182 0114 5360     		str	r3, [r2, #4]
1584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 183              		.loc 1 1584 0
 184 0116 436A     		ldr	r3, [r0, #36]
 185 0118 013B     		subs	r3, r3, #1
 186              	.LVL1:
 187              	.LBB4:
 188              	.LBB5:
 189              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 33


  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 34


  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 35


 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 36


 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 37


 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 38


 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 39


 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 40


 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 41


 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 190              		.loc 2 531 0
 191 011a 4FF46042 		mov	r2, #57344
 192              		.syntax unified
 193              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 194 011e 92FAA2F2 		rbit r2, r2
 195              	@ 0 "" 2
 196              	.LVL2:
 197              		.thumb
 198              		.syntax unified
 199              	.LBE5:
 200              	.LBE4:
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 42


1584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 201              		.loc 1 1584 0
 202 0122 B2FA82F2 		clz	r2, r2
 203 0126 9340     		lsls	r3, r3, r2
 204 0128 0268     		ldr	r2, [r0]
 205 012a 5168     		ldr	r1, [r2, #4]
 206 012c 0B43     		orrs	r3, r3, r1
 207 012e 5360     		str	r3, [r2, #4]
 208 0130 B9E7     		b	.L5
 209              	.L8:
 210 0132 00BF     		.align	2
 211              	.L7:
 212 0134 00230140 		.word	1073816320
 213 0138 0100000F 		.word	251658241
 214              		.cfi_endproc
 215              	.LFE146:
 217              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 218              		.align	1
 219              		.weak	HAL_ADC_MspInit
 220              		.syntax unified
 221              		.thumb
 222              		.thumb_func
 223              		.fpu fpv4-sp-d16
 225              	HAL_ADC_MspInit:
 226              	.LFB126:
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 227              		.loc 1 384 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		@ link register save eliminated.
 232              	.LVL3:
 233 0000 7047     		bx	lr
 234              		.cfi_endproc
 235              	.LFE126:
 237              		.section	.text.HAL_ADC_Init,"ax",%progbits
 238              		.align	1
 239              		.global	HAL_ADC_Init
 240              		.syntax unified
 241              		.thumb
 242              		.thumb_func
 243              		.fpu fpv4-sp-d16
 245              	HAL_ADC_Init:
 246              	.LFB124:
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 247              		.loc 1 259 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              	.LVL4:
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 252              		.loc 1 263 0
 253 0000 30B3     		cbz	r0, .L14
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 254              		.loc 1 259 0
 255 0002 10B5     		push	{r4, lr}
 256              	.LCFI0:
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 43


 257              		.cfi_def_cfa_offset 8
 258              		.cfi_offset 4, -8
 259              		.cfi_offset 14, -4
 260 0004 0446     		mov	r4, r0
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 261              		.loc 1 286 0
 262 0006 036C     		ldr	r3, [r0, #64]
 263 0008 43B1     		cbz	r3, .L20
 264              	.LVL5:
 265              	.L12:
 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 266              		.loc 1 300 0
 267 000a 236C     		ldr	r3, [r4, #64]
 268 000c 13F0100F 		tst	r3, #16
 269 0010 0AD0     		beq	.L21
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 270              		.loc 1 320 0
 271 0012 0120     		movs	r0, #1
 272              	.L13:
 273              	.LVL6:
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 274              		.loc 1 324 0
 275 0014 0023     		movs	r3, #0
 276 0016 84F83C30 		strb	r3, [r4, #60]
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 277              		.loc 1 327 0
 278 001a 10BD     		pop	{r4, pc}
 279              	.LVL7:
 280              	.L20:
 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 281              		.loc 1 289 0
 282 001c 4364     		str	r3, [r0, #68]
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 283              		.loc 1 292 0
 284 001e 80F83C30 		strb	r3, [r0, #60]
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 285              		.loc 1 295 0
 286 0022 FFF7FEFF 		bl	HAL_ADC_MspInit
 287              	.LVL8:
 288 0026 F0E7     		b	.L12
 289              	.L21:
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 290              		.loc 1 303 0
 291 0028 236C     		ldr	r3, [r4, #64]
 292 002a 23F48853 		bic	r3, r3, #4352
 293 002e 23F00203 		bic	r3, r3, #2
 294 0032 43F00203 		orr	r3, r3, #2
 295 0036 2364     		str	r3, [r4, #64]
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 296              		.loc 1 308 0
 297 0038 2046     		mov	r0, r4
 298 003a FFF7FEFF 		bl	ADC_Init
 299              	.LVL9:
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 300              		.loc 1 311 0
 301 003e 0020     		movs	r0, #0
 302 0040 6064     		str	r0, [r4, #68]
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 44


 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 303              		.loc 1 314 0
 304 0042 236C     		ldr	r3, [r4, #64]
 305 0044 23F00303 		bic	r3, r3, #3
 306 0048 43F00103 		orr	r3, r3, #1
 307 004c 2364     		str	r3, [r4, #64]
 308 004e E1E7     		b	.L13
 309              	.LVL10:
 310              	.L14:
 311              	.LCFI1:
 312              		.cfi_def_cfa_offset 0
 313              		.cfi_restore 4
 314              		.cfi_restore 14
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 315              		.loc 1 265 0
 316 0050 0120     		movs	r0, #1
 317              	.LVL11:
 318 0052 7047     		bx	lr
 319              		.cfi_endproc
 320              	.LFE124:
 322              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 323              		.align	1
 324              		.weak	HAL_ADC_MspDeInit
 325              		.syntax unified
 326              		.thumb
 327              		.thumb_func
 328              		.fpu fpv4-sp-d16
 330              	HAL_ADC_MspDeInit:
 331              	.LFB127:
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 332              		.loc 1 399 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 337              	.LVL12:
 338 0000 7047     		bx	lr
 339              		.cfi_endproc
 340              	.LFE127:
 342              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 343              		.align	1
 344              		.global	HAL_ADC_DeInit
 345              		.syntax unified
 346              		.thumb
 347              		.thumb_func
 348              		.fpu fpv4-sp-d16
 350              	HAL_ADC_DeInit:
 351              	.LFB125:
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 352              		.loc 1 337 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356              	.LVL13:
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 357              		.loc 1 341 0
 358 0000 C8B1     		cbz	r0, .L26
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 45


 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 359              		.loc 1 337 0
 360 0002 10B5     		push	{r4, lr}
 361              	.LCFI2:
 362              		.cfi_def_cfa_offset 8
 363              		.cfi_offset 4, -8
 364              		.cfi_offset 14, -4
 365 0004 0446     		mov	r4, r0
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 366              		.loc 1 350 0
 367 0006 036C     		ldr	r3, [r0, #64]
 368 0008 43F00203 		orr	r3, r3, #2
 369 000c 0364     		str	r3, [r0, #64]
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 370              		.loc 1 354 0
 371 000e 0268     		ldr	r2, [r0]
 372 0010 9368     		ldr	r3, [r2, #8]
 373 0012 23F00103 		bic	r3, r3, #1
 374 0016 9360     		str	r3, [r2, #8]
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 375              		.loc 1 358 0
 376 0018 0368     		ldr	r3, [r0]
 377 001a 9B68     		ldr	r3, [r3, #8]
 378 001c 13F0010F 		tst	r3, #1
 379 0020 03D0     		beq	.L31
 380              	.LVL14:
 381              	.L25:
 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 382              		.loc 1 371 0
 383 0022 0020     		movs	r0, #0
 384 0024 84F83C00 		strb	r0, [r4, #60]
 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 385              		.loc 1 374 0
 386 0028 10BD     		pop	{r4, pc}
 387              	.LVL15:
 388              	.L31:
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 389              		.loc 1 361 0
 390 002a FFF7FEFF 		bl	HAL_ADC_MspDeInit
 391              	.LVL16:
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 392              		.loc 1 364 0
 393 002e 0023     		movs	r3, #0
 394 0030 6364     		str	r3, [r4, #68]
 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 395              		.loc 1 367 0
 396 0032 2364     		str	r3, [r4, #64]
 397 0034 F5E7     		b	.L25
 398              	.LVL17:
 399              	.L26:
 400              	.LCFI3:
 401              		.cfi_def_cfa_offset 0
 402              		.cfi_restore 4
 403              		.cfi_restore 14
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 404              		.loc 1 343 0
 405 0036 0120     		movs	r0, #1
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 46


 406              	.LVL18:
 407 0038 7047     		bx	lr
 408              		.cfi_endproc
 409              	.LFE125:
 411              		.section	.text.HAL_ADC_Start,"ax",%progbits
 412              		.align	1
 413              		.global	HAL_ADC_Start
 414              		.syntax unified
 415              		.thumb
 416              		.thumb_func
 417              		.fpu fpv4-sp-d16
 419              	HAL_ADC_Start:
 420              	.LFB128:
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __IO uint32_t counter = 0U;
 421              		.loc 1 438 0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 8
 424              		@ frame_needed = 0, uses_anonymous_args = 0
 425              		@ link register save eliminated.
 426              	.LVL19:
 427 0000 82B0     		sub	sp, sp, #8
 428              	.LCFI4:
 429              		.cfi_def_cfa_offset 8
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC_Common_TypeDef *tmpADC_Common;
 430              		.loc 1 439 0
 431 0002 0023     		movs	r3, #0
 432 0004 0193     		str	r3, [sp, #4]
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 433              		.loc 1 447 0
 434 0006 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 435 000a 012B     		cmp	r3, #1
 436 000c 63D0     		beq	.L41
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 437              		.loc 1 447 0 is_stmt 0 discriminator 2
 438 000e 0123     		movs	r3, #1
 439 0010 80F83C30 		strb	r3, [r0, #60]
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {  
 440              		.loc 1 452 0 is_stmt 1 discriminator 2
 441 0014 0368     		ldr	r3, [r0]
 442 0016 9A68     		ldr	r2, [r3, #8]
 443 0018 12F0010F 		tst	r2, #1
 444 001c 13D1     		bne	.L34
 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 445              		.loc 1 455 0
 446 001e 9A68     		ldr	r2, [r3, #8]
 447 0020 42F00102 		orr	r2, r2, #1
 448 0024 9A60     		str	r2, [r3, #8]
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     while(counter != 0U)
 449              		.loc 1 459 0
 450 0026 304B     		ldr	r3, .L48
 451 0028 1B68     		ldr	r3, [r3]
 452 002a 304A     		ldr	r2, .L48+4
 453 002c A2FB0323 		umull	r2, r3, r2, r3
 454 0030 9B0C     		lsrs	r3, r3, #18
 455 0032 03EB4303 		add	r3, r3, r3, lsl #1
 456 0036 0193     		str	r3, [sp, #4]
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 47


 457              		.loc 1 460 0
 458 0038 02E0     		b	.L35
 459              	.L36:
 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 460              		.loc 1 462 0
 461 003a 019B     		ldr	r3, [sp, #4]
 462 003c 013B     		subs	r3, r3, #1
 463 003e 0193     		str	r3, [sp, #4]
 464              	.L35:
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 465              		.loc 1 460 0
 466 0040 019B     		ldr	r3, [sp, #4]
 467 0042 002B     		cmp	r3, #0
 468 0044 F9D1     		bne	.L36
 469              	.L34:
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 470              		.loc 1 467 0
 471 0046 0268     		ldr	r2, [r0]
 472 0048 9368     		ldr	r3, [r2, #8]
 473 004a 13F0010F 		tst	r3, #1
 474 004e 45D0     		beq	.L42
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 475              		.loc 1 472 0
 476 0050 036C     		ldr	r3, [r0, #64]
 477 0052 23F4E063 		bic	r3, r3, #1792
 478 0056 23F00103 		bic	r3, r3, #1
 479 005a 43F48073 		orr	r3, r3, #256
 480 005e 0364     		str	r3, [r0, #64]
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 481              		.loc 1 478 0
 482 0060 5368     		ldr	r3, [r2, #4]
 483 0062 13F4806F 		tst	r3, #1024
 484 0066 05D0     		beq	.L37
 480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 485              		.loc 1 480 0
 486 0068 036C     		ldr	r3, [r0, #64]
 487 006a 23F44053 		bic	r3, r3, #12288
 488 006e 43F48053 		orr	r3, r3, #4096
 489 0072 0364     		str	r3, [r0, #64]
 490              	.L37:
 484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 491              		.loc 1 484 0
 492 0074 036C     		ldr	r3, [r0, #64]
 493 0076 13F4805F 		tst	r3, #4096
 494 007a 19D0     		beq	.L38
 487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 495              		.loc 1 487 0
 496 007c 436C     		ldr	r3, [r0, #68]
 497 007e 23F00603 		bic	r3, r3, #6
 498 0082 4364     		str	r3, [r0, #68]
 499              	.L39:
 498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 500              		.loc 1 498 0
 501 0084 0023     		movs	r3, #0
 502 0086 80F83C30 		strb	r3, [r0, #60]
 503              	.LVL20:
 507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 48


 504              		.loc 1 507 0
 505 008a 6FF02203 		mvn	r3, #34
 506 008e 1360     		str	r3, [r2]
 510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 507              		.loc 1 510 0
 508 0090 174B     		ldr	r3, .L48+8
 509 0092 5B68     		ldr	r3, [r3, #4]
 510 0094 13F01F0F 		tst	r3, #31
 511 0098 0DD1     		bne	.L40
 513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 512              		.loc 1 513 0
 513 009a 0368     		ldr	r3, [r0]
 514 009c 9A68     		ldr	r2, [r3, #8]
 515 009e 12F0405F 		tst	r2, #805306368
 516 00a2 1DD1     		bne	.L43
 516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 517              		.loc 1 516 0
 518 00a4 9A68     		ldr	r2, [r3, #8]
 519 00a6 42F08042 		orr	r2, r2, #1073741824
 520 00aa 9A60     		str	r2, [r3, #8]
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 521              		.loc 1 531 0
 522 00ac 0020     		movs	r0, #0
 523              	.LVL21:
 524 00ae 13E0     		b	.L33
 525              	.LVL22:
 526              	.L38:
 492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     } 
 527              		.loc 1 492 0
 528 00b0 0023     		movs	r3, #0
 529 00b2 4364     		str	r3, [r0, #68]
 530 00b4 E6E7     		b	.L39
 531              	.LVL23:
 532              	.L40:
 522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 533              		.loc 1 522 0
 534 00b6 0368     		ldr	r3, [r0]
 535 00b8 0E4A     		ldr	r2, .L48+12
 536 00ba 9342     		cmp	r3, r2
 537 00bc 01D0     		beq	.L47
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 538              		.loc 1 531 0
 539 00be 0020     		movs	r0, #0
 540              	.LVL24:
 541 00c0 0AE0     		b	.L33
 542              	.LVL25:
 543              	.L47:
 522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 544              		.loc 1 522 0 discriminator 1
 545 00c2 9A68     		ldr	r2, [r3, #8]
 546 00c4 12F0405F 		tst	r2, #805306368
 547 00c8 0CD1     		bne	.L45
 525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 548              		.loc 1 525 0
 549 00ca 9A68     		ldr	r2, [r3, #8]
 550 00cc 42F08042 		orr	r2, r2, #1073741824
 551 00d0 9A60     		str	r2, [r3, #8]
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 49


 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 552              		.loc 1 531 0
 553 00d2 0020     		movs	r0, #0
 554              	.LVL26:
 555 00d4 00E0     		b	.L33
 556              	.LVL27:
 557              	.L41:
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 558              		.loc 1 447 0
 559 00d6 0220     		movs	r0, #2
 560              	.LVL28:
 561              	.L33:
 532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 562              		.loc 1 532 0
 563 00d8 02B0     		add	sp, sp, #8
 564              	.LCFI5:
 565              		.cfi_remember_state
 566              		.cfi_def_cfa_offset 0
 567              		@ sp needed
 568 00da 7047     		bx	lr
 569              	.LVL29:
 570              	.L42:
 571              	.LCFI6:
 572              		.cfi_restore_state
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 573              		.loc 1 531 0
 574 00dc 0020     		movs	r0, #0
 575              	.LVL30:
 576 00de FBE7     		b	.L33
 577              	.LVL31:
 578              	.L43:
 579 00e0 0020     		movs	r0, #0
 580              	.LVL32:
 581 00e2 F9E7     		b	.L33
 582              	.LVL33:
 583              	.L45:
 584 00e4 0020     		movs	r0, #0
 585              	.LVL34:
 586 00e6 F7E7     		b	.L33
 587              	.L49:
 588              		.align	2
 589              	.L48:
 590 00e8 00000000 		.word	SystemCoreClock
 591 00ec 83DE1B43 		.word	1125899907
 592 00f0 00230140 		.word	1073816320
 593 00f4 00200140 		.word	1073815552
 594              		.cfi_endproc
 595              	.LFE128:
 597              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 598              		.align	1
 599              		.global	HAL_ADC_Stop
 600              		.syntax unified
 601              		.thumb
 602              		.thumb_func
 603              		.fpu fpv4-sp-d16
 605              	HAL_ADC_Stop:
 606              	.LFB129:
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 50


 545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 607              		.loc 1 545 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611              		@ link register save eliminated.
 612              	.LVL35:
 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 613              		.loc 1 550 0
 614 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 615 0004 012B     		cmp	r3, #1
 616 0006 19D0     		beq	.L53
 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 617              		.loc 1 550 0 is_stmt 0 discriminator 2
 618 0008 0123     		movs	r3, #1
 619 000a 80F83C30 		strb	r3, [r0, #60]
 554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 620              		.loc 1 554 0 is_stmt 1 discriminator 2
 621 000e 0268     		ldr	r2, [r0]
 622 0010 9368     		ldr	r3, [r2, #8]
 623 0012 23F00103 		bic	r3, r3, #1
 624 0016 9360     		str	r3, [r2, #8]
 557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 625              		.loc 1 557 0 discriminator 2
 626 0018 0368     		ldr	r3, [r0]
 627 001a 9B68     		ldr	r3, [r3, #8]
 628 001c 13F0010F 		tst	r3, #1
 629 0020 07D1     		bne	.L52
 560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 630              		.loc 1 560 0
 631 0022 036C     		ldr	r3, [r0, #64]
 632 0024 23F48853 		bic	r3, r3, #4352
 633 0028 23F00103 		bic	r3, r3, #1
 634 002c 43F00103 		orr	r3, r3, #1
 635 0030 0364     		str	r3, [r0, #64]
 636              	.L52:
 566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 637              		.loc 1 566 0
 638 0032 0023     		movs	r3, #0
 639 0034 80F83C30 		strb	r3, [r0, #60]
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 640              		.loc 1 569 0
 641 0038 1846     		mov	r0, r3
 642              	.LVL36:
 643 003a 7047     		bx	lr
 644              	.LVL37:
 645              	.L53:
 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 646              		.loc 1 550 0
 647 003c 0220     		movs	r0, #2
 648              	.LVL38:
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 649              		.loc 1 570 0
 650 003e 7047     		bx	lr
 651              		.cfi_endproc
 652              	.LFE129:
 654              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 51


 655              		.align	1
 656              		.global	HAL_ADC_PollForConversion
 657              		.syntax unified
 658              		.thumb
 659              		.thumb_func
 660              		.fpu fpv4-sp-d16
 662              	HAL_ADC_PollForConversion:
 663              	.LFB130:
 588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   uint32_t tickstart = 0U;
 664              		.loc 1 588 0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 0, uses_anonymous_args = 0
 668              	.LVL39:
 597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 669              		.loc 1 597 0
 670 0000 0368     		ldr	r3, [r0]
 671 0002 9A68     		ldr	r2, [r3, #8]
 672 0004 12F4806F 		tst	r2, #1024
 673 0008 03D0     		beq	.L55
 598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 674              		.loc 1 598 0 discriminator 1
 675 000a 9B68     		ldr	r3, [r3, #8]
 597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 676              		.loc 1 597 0 discriminator 1
 677 000c 13F4807F 		tst	r3, #256
 678 0010 1CD1     		bne	.L69
 679              	.L55:
 588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   uint32_t tickstart = 0U;
 680              		.loc 1 588 0
 681 0012 70B5     		push	{r4, r5, r6, lr}
 682              	.LCFI7:
 683              		.cfi_def_cfa_offset 16
 684              		.cfi_offset 4, -16
 685              		.cfi_offset 5, -12
 686              		.cfi_offset 6, -8
 687              		.cfi_offset 14, -4
 688 0014 0D46     		mov	r5, r1
 689 0016 0446     		mov	r4, r0
 610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 690              		.loc 1 610 0
 691 0018 FFF7FEFF 		bl	HAL_GetTick
 692              	.LVL40:
 693 001c 0646     		mov	r6, r0
 694              	.LVL41:
 695              	.L58:
 613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 696              		.loc 1 613 0
 697 001e 2368     		ldr	r3, [r4]
 698 0020 1A68     		ldr	r2, [r3]
 699 0022 12F0020F 		tst	r2, #2
 700 0026 1AD1     		bne	.L70
 616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 701              		.loc 1 616 0
 702 0028 B5F1FF3F 		cmp	r5, #-1
 703 002c F7D0     		beq	.L58
 618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 52


 704              		.loc 1 618 0
 705 002e 25B1     		cbz	r5, .L59
 618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 706              		.loc 1 618 0 is_stmt 0 discriminator 1
 707 0030 FFF7FEFF 		bl	HAL_GetTick
 708              	.LVL42:
 709 0034 801B     		subs	r0, r0, r6
 710 0036 8542     		cmp	r5, r0
 711 0038 F1D2     		bcs	.L58
 712              	.L59:
 621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         
 713              		.loc 1 621 0 is_stmt 1
 714 003a 236C     		ldr	r3, [r4, #64]
 715 003c 43F00403 		orr	r3, r3, #4
 716 0040 2364     		str	r3, [r4, #64]
 624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         
 717              		.loc 1 624 0
 718 0042 0023     		movs	r3, #0
 719 0044 84F83C30 		strb	r3, [r4, #60]
 626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 720              		.loc 1 626 0
 721 0048 0320     		movs	r0, #3
 722 004a 70BD     		pop	{r4, r5, r6, pc}
 723              	.LVL43:
 724              	.L69:
 725              	.LCFI8:
 726              		.cfi_def_cfa_offset 0
 727              		.cfi_restore 4
 728              		.cfi_restore 5
 729              		.cfi_restore 6
 730              		.cfi_restore 14
 601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 731              		.loc 1 601 0
 732 004c 036C     		ldr	r3, [r0, #64]
 733 004e 43F02003 		orr	r3, r3, #32
 734 0052 0364     		str	r3, [r0, #64]
 604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 735              		.loc 1 604 0
 736 0054 0023     		movs	r3, #0
 737 0056 80F83C30 		strb	r3, [r0, #60]
 606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 738              		.loc 1 606 0
 739 005a 0120     		movs	r0, #1
 740              	.LVL44:
 741 005c 7047     		bx	lr
 742              	.LVL45:
 743              	.L70:
 744              	.LCFI9:
 745              		.cfi_def_cfa_offset 16
 746              		.cfi_offset 4, -16
 747              		.cfi_offset 5, -12
 748              		.cfi_offset 6, -8
 749              		.cfi_offset 14, -4
 632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 750              		.loc 1 632 0
 751 005e 6FF01202 		mvn	r2, #18
 752 0062 1A60     		str	r2, [r3]
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 53


 635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 753              		.loc 1 635 0
 754 0064 236C     		ldr	r3, [r4, #64]
 755 0066 43F40073 		orr	r3, r3, #512
 756 006a 2364     		str	r3, [r4, #64]
 643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 757              		.loc 1 643 0
 758 006c 2368     		ldr	r3, [r4]
 759 006e 9A68     		ldr	r2, [r3, #8]
 760 0070 12F0405F 		tst	r2, #805306368
 761 0074 17D1     		bne	.L62
 644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 762              		.loc 1 644 0 discriminator 1
 763 0076 A269     		ldr	r2, [r4, #24]
 643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 764              		.loc 1 643 0 discriminator 1
 765 0078 BAB9     		cbnz	r2, .L63
 645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 766              		.loc 1 645 0
 767 007a DA6A     		ldr	r2, [r3, #44]
 644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 768              		.loc 1 644 0
 769 007c 12F4700F 		tst	r2, #15728640
 770 0080 03D0     		beq	.L61
 646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 771              		.loc 1 646 0
 772 0082 9B68     		ldr	r3, [r3, #8]
 645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 773              		.loc 1 645 0
 774 0084 13F4806F 		tst	r3, #1024
 775 0088 11D1     		bne	.L64
 776              	.L61:
 649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 777              		.loc 1 649 0
 778 008a 236C     		ldr	r3, [r4, #64]
 779 008c 23F48073 		bic	r3, r3, #256
 780 0090 2364     		str	r3, [r4, #64]
 651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     { 
 781              		.loc 1 651 0
 782 0092 236C     		ldr	r3, [r4, #64]
 783 0094 13F4805F 		tst	r3, #4096
 784 0098 0BD1     		bne	.L65
 653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 785              		.loc 1 653 0
 786 009a 236C     		ldr	r3, [r4, #64]
 787 009c 43F00103 		orr	r3, r3, #1
 788 00a0 2364     		str	r3, [r4, #64]
 658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 789              		.loc 1 658 0
 790 00a2 0020     		movs	r0, #0
 791 00a4 70BD     		pop	{r4, r5, r6, pc}
 792              	.LVL46:
 793              	.L62:
 794 00a6 0020     		movs	r0, #0
 795 00a8 70BD     		pop	{r4, r5, r6, pc}
 796              	.LVL47:
 797              	.L63:
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 54


 798 00aa 0020     		movs	r0, #0
 799 00ac 70BD     		pop	{r4, r5, r6, pc}
 800              	.LVL48:
 801              	.L64:
 802 00ae 0020     		movs	r0, #0
 803 00b0 70BD     		pop	{r4, r5, r6, pc}
 804              	.LVL49:
 805              	.L65:
 806 00b2 0020     		movs	r0, #0
 659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 807              		.loc 1 659 0
 808 00b4 70BD     		pop	{r4, r5, r6, pc}
 809              		.cfi_endproc
 810              	.LFE130:
 812              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 813              		.align	1
 814              		.global	HAL_ADC_PollForEvent
 815              		.syntax unified
 816              		.thumb
 817              		.thumb_func
 818              		.fpu fpv4-sp-d16
 820              	HAL_ADC_PollForEvent:
 821              	.LFB131:
 673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   uint32_t tickstart = 0U;
 822              		.loc 1 673 0
 823              		.cfi_startproc
 824              		@ args = 0, pretend = 0, frame = 0
 825              		@ frame_needed = 0, uses_anonymous_args = 0
 826              	.LVL50:
 827 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 828              	.LCFI10:
 829              		.cfi_def_cfa_offset 24
 830              		.cfi_offset 3, -24
 831              		.cfi_offset 4, -20
 832              		.cfi_offset 5, -16
 833              		.cfi_offset 6, -12
 834              		.cfi_offset 7, -8
 835              		.cfi_offset 14, -4
 836 0002 0446     		mov	r4, r0
 837 0004 0D46     		mov	r5, r1
 838 0006 1646     		mov	r6, r2
 839              	.LVL51:
 681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 840              		.loc 1 681 0
 841 0008 FFF7FEFF 		bl	HAL_GetTick
 842              	.LVL52:
 843 000c 0746     		mov	r7, r0
 844              	.LVL53:
 845              	.L73:
 684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 846              		.loc 1 684 0
 847 000e 2368     		ldr	r3, [r4]
 848 0010 1A68     		ldr	r2, [r3]
 849 0012 35EA0202 		bics	r2, r5, r2
 850 0016 11D0     		beq	.L79
 687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 851              		.loc 1 687 0
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 55


 852 0018 B6F1FF3F 		cmp	r6, #-1
 853 001c F7D0     		beq	.L73
 689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 854              		.loc 1 689 0
 855 001e 26B1     		cbz	r6, .L74
 689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 856              		.loc 1 689 0 is_stmt 0 discriminator 1
 857 0020 FFF7FEFF 		bl	HAL_GetTick
 858              	.LVL54:
 859 0024 C01B     		subs	r0, r0, r7
 860 0026 8642     		cmp	r6, r0
 861 0028 F1D2     		bcs	.L73
 862              	.L74:
 692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         
 863              		.loc 1 692 0 is_stmt 1
 864 002a 236C     		ldr	r3, [r4, #64]
 865 002c 43F00403 		orr	r3, r3, #4
 866 0030 2364     		str	r3, [r4, #64]
 695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         
 867              		.loc 1 695 0
 868 0032 0023     		movs	r3, #0
 869 0034 84F83C30 		strb	r3, [r4, #60]
 697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 870              		.loc 1 697 0
 871 0038 0320     		movs	r0, #3
 872 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 873              	.LVL55:
 874              	.L79:
 703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 875              		.loc 1 703 0
 876 003c 012D     		cmp	r5, #1
 877 003e 0CD0     		beq	.L80
 715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC error code to overrun */
 878              		.loc 1 715 0
 879 0040 226C     		ldr	r2, [r4, #64]
 880 0042 42F48062 		orr	r2, r2, #1024
 881 0046 2264     		str	r2, [r4, #64]
 717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 882              		.loc 1 717 0
 883 0048 626C     		ldr	r2, [r4, #68]
 884 004a 42F00202 		orr	r2, r2, #2
 885 004e 6264     		str	r2, [r4, #68]
 720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 886              		.loc 1 720 0
 887 0050 6FF02002 		mvn	r2, #32
 888 0054 1A60     		str	r2, [r3]
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 889              		.loc 1 724 0
 890 0056 0020     		movs	r0, #0
 725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 891              		.loc 1 725 0
 892 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 893              	.LVL56:
 894              	.L80:
 706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 895              		.loc 1 706 0
 896 005a 226C     		ldr	r2, [r4, #64]
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 56


 897 005c 42F48032 		orr	r2, r2, #65536
 898 0060 2264     		str	r2, [r4, #64]
 709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 899              		.loc 1 709 0
 900 0062 6FF00102 		mvn	r2, #1
 901 0066 1A60     		str	r2, [r3]
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 902              		.loc 1 724 0
 903 0068 0020     		movs	r0, #0
 904 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 905              		.cfi_endproc
 906              	.LFE131:
 908              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 909              		.align	1
 910              		.global	HAL_ADC_Start_IT
 911              		.syntax unified
 912              		.thumb
 913              		.thumb_func
 914              		.fpu fpv4-sp-d16
 916              	HAL_ADC_Start_IT:
 917              	.LFB132:
 735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __IO uint32_t counter = 0U;
 918              		.loc 1 735 0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 8
 921              		@ frame_needed = 0, uses_anonymous_args = 0
 922              		@ link register save eliminated.
 923              	.LVL57:
 924 0000 82B0     		sub	sp, sp, #8
 925              	.LCFI11:
 926              		.cfi_def_cfa_offset 8
 736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC_Common_TypeDef *tmpADC_Common;
 927              		.loc 1 736 0
 928 0002 0023     		movs	r3, #0
 929 0004 0193     		str	r3, [sp, #4]
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 930              		.loc 1 744 0
 931 0006 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 932 000a 012B     		cmp	r3, #1
 933 000c 6AD0     		beq	.L90
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 934              		.loc 1 744 0 is_stmt 0 discriminator 2
 935 000e 0123     		movs	r3, #1
 936 0010 80F83C30 		strb	r3, [r0, #60]
 749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {  
 937              		.loc 1 749 0 is_stmt 1 discriminator 2
 938 0014 0368     		ldr	r3, [r0]
 939 0016 9A68     		ldr	r2, [r3, #8]
 940 0018 12F0010F 		tst	r2, #1
 941 001c 13D1     		bne	.L83
 752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 942              		.loc 1 752 0
 943 001e 9A68     		ldr	r2, [r3, #8]
 944 0020 42F00102 		orr	r2, r2, #1
 945 0024 9A60     		str	r2, [r3, #8]
 756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     while(counter != 0U)
 946              		.loc 1 756 0
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 57


 947 0026 344B     		ldr	r3, .L97
 948 0028 1B68     		ldr	r3, [r3]
 949 002a 344A     		ldr	r2, .L97+4
 950 002c A2FB0323 		umull	r2, r3, r2, r3
 951 0030 9B0C     		lsrs	r3, r3, #18
 952 0032 03EB4303 		add	r3, r3, r3, lsl #1
 953 0036 0193     		str	r3, [sp, #4]
 757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 954              		.loc 1 757 0
 955 0038 02E0     		b	.L84
 956              	.L85:
 759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 957              		.loc 1 759 0
 958 003a 019B     		ldr	r3, [sp, #4]
 959 003c 013B     		subs	r3, r3, #1
 960 003e 0193     		str	r3, [sp, #4]
 961              	.L84:
 757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 962              		.loc 1 757 0
 963 0040 019B     		ldr	r3, [sp, #4]
 964 0042 002B     		cmp	r3, #0
 965 0044 F9D1     		bne	.L85
 966              	.L83:
 764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 967              		.loc 1 764 0
 968 0046 0268     		ldr	r2, [r0]
 969 0048 9368     		ldr	r3, [r2, #8]
 970 004a 13F0010F 		tst	r3, #1
 971 004e 4CD0     		beq	.L91
 769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 972              		.loc 1 769 0
 973 0050 036C     		ldr	r3, [r0, #64]
 974 0052 23F4E063 		bic	r3, r3, #1792
 975 0056 23F00103 		bic	r3, r3, #1
 976 005a 43F48073 		orr	r3, r3, #256
 977 005e 0364     		str	r3, [r0, #64]
 775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 978              		.loc 1 775 0
 979 0060 5368     		ldr	r3, [r2, #4]
 980 0062 13F4806F 		tst	r3, #1024
 981 0066 05D0     		beq	.L86
 777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 982              		.loc 1 777 0
 983 0068 036C     		ldr	r3, [r0, #64]
 984 006a 23F44053 		bic	r3, r3, #12288
 985 006e 43F48053 		orr	r3, r3, #4096
 986 0072 0364     		str	r3, [r0, #64]
 987              	.L86:
 781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 988              		.loc 1 781 0
 989 0074 036C     		ldr	r3, [r0, #64]
 990 0076 13F4805F 		tst	r3, #4096
 991 007a 20D0     		beq	.L87
 784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 992              		.loc 1 784 0
 993 007c 436C     		ldr	r3, [r0, #68]
 994 007e 23F00603 		bic	r3, r3, #6
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 58


 995 0082 4364     		str	r3, [r0, #68]
 996              	.L88:
 795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 997              		.loc 1 795 0
 998 0084 0023     		movs	r3, #0
 999 0086 80F83C30 		strb	r3, [r0, #60]
 1000              	.LVL58:
 804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 1001              		.loc 1 804 0
 1002 008a 6FF02203 		mvn	r3, #34
 1003 008e 1360     		str	r3, [r2]
 807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 1004              		.loc 1 807 0
 1005 0090 0268     		ldr	r2, [r0]
 1006 0092 5368     		ldr	r3, [r2, #4]
 1007 0094 43F08063 		orr	r3, r3, #67108864
 1008 0098 43F02003 		orr	r3, r3, #32
 1009 009c 5360     		str	r3, [r2, #4]
 810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 1010              		.loc 1 810 0
 1011 009e 184B     		ldr	r3, .L97+8
 1012 00a0 5B68     		ldr	r3, [r3, #4]
 1013 00a2 13F01F0F 		tst	r3, #31
 1014 00a6 0DD1     		bne	.L89
 813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 1015              		.loc 1 813 0
 1016 00a8 0368     		ldr	r3, [r0]
 1017 00aa 9A68     		ldr	r2, [r3, #8]
 1018 00ac 12F0405F 		tst	r2, #805306368
 1019 00b0 1DD1     		bne	.L92
 816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 1020              		.loc 1 816 0
 1021 00b2 9A68     		ldr	r2, [r3, #8]
 1022 00b4 42F08042 		orr	r2, r2, #1073741824
 1023 00b8 9A60     		str	r2, [r3, #8]
 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1024              		.loc 1 831 0
 1025 00ba 0020     		movs	r0, #0
 1026              	.LVL59:
 1027 00bc 13E0     		b	.L82
 1028              	.LVL60:
 1029              	.L87:
 789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 1030              		.loc 1 789 0
 1031 00be 0023     		movs	r3, #0
 1032 00c0 4364     		str	r3, [r0, #68]
 1033 00c2 DFE7     		b	.L88
 1034              	.LVL61:
 1035              	.L89:
 822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 1036              		.loc 1 822 0
 1037 00c4 0368     		ldr	r3, [r0]
 1038 00c6 0F4A     		ldr	r2, .L97+12
 1039 00c8 9342     		cmp	r3, r2
 1040 00ca 01D0     		beq	.L96
 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1041              		.loc 1 831 0
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 59


 1042 00cc 0020     		movs	r0, #0
 1043              	.LVL62:
 1044 00ce 0AE0     		b	.L82
 1045              	.LVL63:
 1046              	.L96:
 822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 1047              		.loc 1 822 0 discriminator 1
 1048 00d0 9A68     		ldr	r2, [r3, #8]
 1049 00d2 12F0405F 		tst	r2, #805306368
 1050 00d6 0CD1     		bne	.L94
 825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 1051              		.loc 1 825 0
 1052 00d8 9A68     		ldr	r2, [r3, #8]
 1053 00da 42F08042 		orr	r2, r2, #1073741824
 1054 00de 9A60     		str	r2, [r3, #8]
 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1055              		.loc 1 831 0
 1056 00e0 0020     		movs	r0, #0
 1057              	.LVL64:
 1058 00e2 00E0     		b	.L82
 1059              	.LVL65:
 1060              	.L90:
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 1061              		.loc 1 744 0
 1062 00e4 0220     		movs	r0, #2
 1063              	.LVL66:
 1064              	.L82:
 832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 1065              		.loc 1 832 0
 1066 00e6 02B0     		add	sp, sp, #8
 1067              	.LCFI12:
 1068              		.cfi_remember_state
 1069              		.cfi_def_cfa_offset 0
 1070              		@ sp needed
 1071 00e8 7047     		bx	lr
 1072              	.LVL67:
 1073              	.L91:
 1074              	.LCFI13:
 1075              		.cfi_restore_state
 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1076              		.loc 1 831 0
 1077 00ea 0020     		movs	r0, #0
 1078              	.LVL68:
 1079 00ec FBE7     		b	.L82
 1080              	.LVL69:
 1081              	.L92:
 1082 00ee 0020     		movs	r0, #0
 1083              	.LVL70:
 1084 00f0 F9E7     		b	.L82
 1085              	.LVL71:
 1086              	.L94:
 1087 00f2 0020     		movs	r0, #0
 1088              	.LVL72:
 1089 00f4 F7E7     		b	.L82
 1090              	.L98:
 1091 00f6 00BF     		.align	2
 1092              	.L97:
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 60


 1093 00f8 00000000 		.word	SystemCoreClock
 1094 00fc 83DE1B43 		.word	1125899907
 1095 0100 00230140 		.word	1073816320
 1096 0104 00200140 		.word	1073815552
 1097              		.cfi_endproc
 1098              	.LFE132:
 1100              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1101              		.align	1
 1102              		.global	HAL_ADC_Stop_IT
 1103              		.syntax unified
 1104              		.thumb
 1105              		.thumb_func
 1106              		.fpu fpv4-sp-d16
 1108              	HAL_ADC_Stop_IT:
 1109              	.LFB133:
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 1110              		.loc 1 844 0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 1114              		@ link register save eliminated.
 1115              	.LVL73:
 849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 1116              		.loc 1 849 0
 1117 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1118 0004 012B     		cmp	r3, #1
 1119 0006 1FD0     		beq	.L102
 849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 1120              		.loc 1 849 0 is_stmt 0 discriminator 2
 1121 0008 0123     		movs	r3, #1
 1122 000a 80F83C30 		strb	r3, [r0, #60]
 853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 1123              		.loc 1 853 0 is_stmt 1 discriminator 2
 1124 000e 0268     		ldr	r2, [r0]
 1125 0010 9368     		ldr	r3, [r2, #8]
 1126 0012 23F00103 		bic	r3, r3, #1
 1127 0016 9360     		str	r3, [r2, #8]
 856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 1128              		.loc 1 856 0 discriminator 2
 1129 0018 0368     		ldr	r3, [r0]
 1130 001a 9A68     		ldr	r2, [r3, #8]
 1131 001c 12F0010F 		tst	r2, #1
 1132 0020 0DD1     		bne	.L101
 859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 1133              		.loc 1 859 0
 1134 0022 5A68     		ldr	r2, [r3, #4]
 1135 0024 22F08062 		bic	r2, r2, #67108864
 1136 0028 22F02002 		bic	r2, r2, #32
 1137 002c 5A60     		str	r2, [r3, #4]
 862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1138              		.loc 1 862 0
 1139 002e 036C     		ldr	r3, [r0, #64]
 1140 0030 23F48853 		bic	r3, r3, #4352
 1141 0034 23F00103 		bic	r3, r3, #1
 1142 0038 43F00103 		orr	r3, r3, #1
 1143 003c 0364     		str	r3, [r0, #64]
 1144              	.L101:
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 61


 868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 1145              		.loc 1 868 0
 1146 003e 0023     		movs	r3, #0
 1147 0040 80F83C30 		strb	r3, [r0, #60]
 871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1148              		.loc 1 871 0
 1149 0044 1846     		mov	r0, r3
 1150              	.LVL74:
 1151 0046 7047     		bx	lr
 1152              	.LVL75:
 1153              	.L102:
 849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 1154              		.loc 1 849 0
 1155 0048 0220     		movs	r0, #2
 1156              	.LVL76:
 872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 1157              		.loc 1 872 0
 1158 004a 7047     		bx	lr
 1159              		.cfi_endproc
 1160              	.LFE133:
 1162              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1163              		.align	1
 1164              		.global	HAL_ADC_Start_DMA
 1165              		.syntax unified
 1166              		.thumb
 1167              		.thumb_func
 1168              		.fpu fpv4-sp-d16
 1170              	HAL_ADC_Start_DMA:
 1171              	.LFB135:
1026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __IO uint32_t counter = 0U;
 1172              		.loc 1 1026 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 8
 1175              		@ frame_needed = 0, uses_anonymous_args = 0
 1176              	.LVL77:
 1177 0000 30B5     		push	{r4, r5, lr}
 1178              	.LCFI14:
 1179              		.cfi_def_cfa_offset 12
 1180              		.cfi_offset 4, -12
 1181              		.cfi_offset 5, -8
 1182              		.cfi_offset 14, -4
 1183 0002 83B0     		sub	sp, sp, #12
 1184              	.LCFI15:
 1185              		.cfi_def_cfa_offset 24
1027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC_Common_TypeDef *tmpADC_Common;
 1186              		.loc 1 1027 0
 1187 0004 0023     		movs	r3, #0
 1188 0006 0193     		str	r3, [sp, #4]
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 1189              		.loc 1 1035 0
 1190 0008 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1191 000c 012B     		cmp	r3, #1
 1192 000e 00F08180 		beq	.L112
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 1193              		.loc 1 1035 0 is_stmt 0 discriminator 2
 1194 0012 0123     		movs	r3, #1
 1195 0014 80F83C30 		strb	r3, [r0, #60]
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 62


1040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {  
 1196              		.loc 1 1040 0 is_stmt 1 discriminator 2
 1197 0018 0368     		ldr	r3, [r0]
 1198 001a 9C68     		ldr	r4, [r3, #8]
 1199 001c 14F0010F 		tst	r4, #1
 1200 0020 13D1     		bne	.L105
1043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 1201              		.loc 1 1043 0
 1202 0022 9C68     		ldr	r4, [r3, #8]
 1203 0024 44F00104 		orr	r4, r4, #1
 1204 0028 9C60     		str	r4, [r3, #8]
1047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     while(counter != 0U)
 1205              		.loc 1 1047 0
 1206 002a 3F4B     		ldr	r3, .L119
 1207 002c 1C68     		ldr	r4, [r3]
 1208 002e 3F4B     		ldr	r3, .L119+4
 1209 0030 A3FB0434 		umull	r3, r4, r3, r4
 1210 0034 A40C     		lsrs	r4, r4, #18
 1211 0036 04EB4404 		add	r4, r4, r4, lsl #1
 1212 003a 0194     		str	r4, [sp, #4]
1048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 1213              		.loc 1 1048 0
 1214 003c 02E0     		b	.L106
 1215              	.L107:
1050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 1216              		.loc 1 1050 0
 1217 003e 019C     		ldr	r4, [sp, #4]
 1218 0040 013C     		subs	r4, r4, #1
 1219 0042 0194     		str	r4, [sp, #4]
 1220              	.L106:
1048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 1221              		.loc 1 1048 0
 1222 0044 019C     		ldr	r4, [sp, #4]
 1223 0046 002C     		cmp	r4, #0
 1224 0048 F9D1     		bne	.L107
 1225              	.L105:
1055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 1226              		.loc 1 1055 0
 1227 004a 0368     		ldr	r3, [r0]
 1228 004c 9C68     		ldr	r4, [r3, #8]
 1229 004e 14F0010F 		tst	r4, #1
 1230 0052 62D0     		beq	.L113
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 1231              		.loc 1 1060 0
 1232 0054 046C     		ldr	r4, [r0, #64]
 1233 0056 24F4E064 		bic	r4, r4, #1792
 1234 005a 24F00104 		bic	r4, r4, #1
 1235 005e 44F48074 		orr	r4, r4, #256
 1236 0062 0464     		str	r4, [r0, #64]
1066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 1237              		.loc 1 1066 0
 1238 0064 5B68     		ldr	r3, [r3, #4]
 1239 0066 13F4806F 		tst	r3, #1024
 1240 006a 05D0     		beq	.L108
1068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 1241              		.loc 1 1068 0
 1242 006c 036C     		ldr	r3, [r0, #64]
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 63


 1243 006e 23F44053 		bic	r3, r3, #12288
 1244 0072 43F48053 		orr	r3, r3, #4096
 1245 0076 0364     		str	r3, [r0, #64]
 1246              	.L108:
1072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 1247              		.loc 1 1072 0
 1248 0078 036C     		ldr	r3, [r0, #64]
 1249 007a 13F4805F 		tst	r3, #4096
 1250 007e 36D0     		beq	.L109
1075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 1251              		.loc 1 1075 0
 1252 0080 436C     		ldr	r3, [r0, #68]
 1253 0082 23F00603 		bic	r3, r3, #6
 1254 0086 4364     		str	r3, [r0, #68]
 1255              	.L110:
 1256 0088 1346     		mov	r3, r2
 1257 008a 0446     		mov	r4, r0
1086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 1258              		.loc 1 1086 0
 1259 008c 0022     		movs	r2, #0
 1260              	.LVL78:
 1261 008e 80F83C20 		strb	r2, [r0, #60]
 1262              	.LVL79:
1094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 1263              		.loc 1 1094 0
 1264 0092 826B     		ldr	r2, [r0, #56]
 1265 0094 2648     		ldr	r0, .L119+8
 1266              	.LVL80:
 1267 0096 D063     		str	r0, [r2, #60]
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 1268              		.loc 1 1097 0
 1269 0098 A26B     		ldr	r2, [r4, #56]
 1270 009a 2648     		ldr	r0, .L119+12
 1271 009c 1064     		str	r0, [r2, #64]
1100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 1272              		.loc 1 1100 0
 1273 009e A26B     		ldr	r2, [r4, #56]
 1274 00a0 2548     		ldr	r0, .L119+16
 1275 00a2 D064     		str	r0, [r2, #76]
1108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 1276              		.loc 1 1108 0
 1277 00a4 2268     		ldr	r2, [r4]
 1278 00a6 6FF02200 		mvn	r0, #34
 1279 00aa 1060     		str	r0, [r2]
1111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 1280              		.loc 1 1111 0
 1281 00ac 2568     		ldr	r5, [r4]
 1282 00ae 6868     		ldr	r0, [r5, #4]
 1283 00b0 40F08060 		orr	r0, r0, #67108864
 1284 00b4 6860     		str	r0, [r5, #4]
1114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 1285              		.loc 1 1114 0
 1286 00b6 2568     		ldr	r5, [r4]
 1287 00b8 A868     		ldr	r0, [r5, #8]
 1288 00ba 40F48070 		orr	r0, r0, #256
 1289 00be A860     		str	r0, [r5, #8]
1117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 64


 1290              		.loc 1 1117 0
 1291 00c0 2068     		ldr	r0, [r4]
 1292 00c2 0A46     		mov	r2, r1
 1293 00c4 00F14C01 		add	r1, r0, #76
 1294              	.LVL81:
 1295 00c8 A06B     		ldr	r0, [r4, #56]
 1296 00ca FFF7FEFF 		bl	HAL_DMA_Start_IT
 1297              	.LVL82:
1120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 1298              		.loc 1 1120 0
 1299 00ce 1B4B     		ldr	r3, .L119+20
 1300 00d0 5B68     		ldr	r3, [r3, #4]
 1301 00d2 13F01F0F 		tst	r3, #31
 1302 00d6 0DD1     		bne	.L111
1123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 1303              		.loc 1 1123 0
 1304 00d8 2368     		ldr	r3, [r4]
 1305 00da 9A68     		ldr	r2, [r3, #8]
 1306 00dc 12F0405F 		tst	r2, #805306368
 1307 00e0 1DD1     		bne	.L114
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 1308              		.loc 1 1126 0
 1309 00e2 9A68     		ldr	r2, [r3, #8]
 1310 00e4 42F08042 		orr	r2, r2, #1073741824
 1311 00e8 9A60     		str	r2, [r3, #8]
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1312              		.loc 1 1141 0
 1313 00ea 0020     		movs	r0, #0
 1314 00ec 13E0     		b	.L104
 1315              	.LVL83:
 1316              	.L109:
1080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 1317              		.loc 1 1080 0
 1318 00ee 0023     		movs	r3, #0
 1319 00f0 4364     		str	r3, [r0, #68]
 1320 00f2 C9E7     		b	.L110
 1321              	.LVL84:
 1322              	.L111:
1132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 1323              		.loc 1 1132 0
 1324 00f4 2368     		ldr	r3, [r4]
 1325 00f6 124A     		ldr	r2, .L119+24
 1326 00f8 9342     		cmp	r3, r2
 1327 00fa 01D0     		beq	.L118
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1328              		.loc 1 1141 0
 1329 00fc 0020     		movs	r0, #0
 1330 00fe 0AE0     		b	.L104
 1331              	.L118:
1132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 1332              		.loc 1 1132 0 discriminator 1
 1333 0100 9A68     		ldr	r2, [r3, #8]
 1334 0102 12F0405F 		tst	r2, #805306368
 1335 0106 0CD1     		bne	.L116
1135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 1336              		.loc 1 1135 0
 1337 0108 9A68     		ldr	r2, [r3, #8]
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 65


 1338 010a 42F08042 		orr	r2, r2, #1073741824
 1339 010e 9A60     		str	r2, [r3, #8]
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1340              		.loc 1 1141 0
 1341 0110 0020     		movs	r0, #0
 1342 0112 00E0     		b	.L104
 1343              	.LVL85:
 1344              	.L112:
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 1345              		.loc 1 1035 0
 1346 0114 0220     		movs	r0, #2
 1347              	.LVL86:
 1348              	.L104:
1142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 1349              		.loc 1 1142 0
 1350 0116 03B0     		add	sp, sp, #12
 1351              	.LCFI16:
 1352              		.cfi_remember_state
 1353              		.cfi_def_cfa_offset 12
 1354              		@ sp needed
 1355 0118 30BD     		pop	{r4, r5, pc}
 1356              	.LVL87:
 1357              	.L113:
 1358              	.LCFI17:
 1359              		.cfi_restore_state
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1360              		.loc 1 1141 0
 1361 011a 0020     		movs	r0, #0
 1362              	.LVL88:
 1363 011c FBE7     		b	.L104
 1364              	.LVL89:
 1365              	.L114:
 1366 011e 0020     		movs	r0, #0
 1367 0120 F9E7     		b	.L104
 1368              	.L116:
 1369 0122 0020     		movs	r0, #0
 1370 0124 F7E7     		b	.L104
 1371              	.L120:
 1372 0126 00BF     		.align	2
 1373              	.L119:
 1374 0128 00000000 		.word	SystemCoreClock
 1375 012c 83DE1B43 		.word	1125899907
 1376 0130 00000000 		.word	ADC_DMAConvCplt
 1377 0134 00000000 		.word	ADC_DMAHalfConvCplt
 1378 0138 00000000 		.word	ADC_DMAError
 1379 013c 00230140 		.word	1073816320
 1380 0140 00200140 		.word	1073815552
 1381              		.cfi_endproc
 1382              	.LFE135:
 1384              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1385              		.align	1
 1386              		.global	HAL_ADC_Stop_DMA
 1387              		.syntax unified
 1388              		.thumb
 1389              		.thumb_func
 1390              		.fpu fpv4-sp-d16
 1392              	HAL_ADC_Stop_DMA:
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 66


 1393              	.LFB136:
1151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1394              		.loc 1 1151 0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 0
 1397              		@ frame_needed = 0, uses_anonymous_args = 0
 1398              	.LVL90:
1158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 1399              		.loc 1 1158 0
 1400 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1401 0004 012B     		cmp	r3, #1
 1402 0006 28D0     		beq	.L124
1151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1403              		.loc 1 1151 0 discriminator 2
 1404 0008 10B5     		push	{r4, lr}
 1405              	.LCFI18:
 1406              		.cfi_def_cfa_offset 8
 1407              		.cfi_offset 4, -8
 1408              		.cfi_offset 14, -4
 1409 000a 0446     		mov	r4, r0
1158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 1410              		.loc 1 1158 0 discriminator 2
 1411 000c 0123     		movs	r3, #1
 1412 000e 80F83C30 		strb	r3, [r0, #60]
1162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 1413              		.loc 1 1162 0 discriminator 2
 1414 0012 0268     		ldr	r2, [r0]
 1415 0014 9368     		ldr	r3, [r2, #8]
 1416 0016 23F00103 		bic	r3, r3, #1
 1417 001a 9360     		str	r3, [r2, #8]
1165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 1418              		.loc 1 1165 0 discriminator 2
 1419 001c 0368     		ldr	r3, [r0]
 1420 001e 9A68     		ldr	r2, [r3, #8]
 1421 0020 12F0010F 		tst	r2, #1
 1422 0024 04D0     		beq	.L130
1152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 1423              		.loc 1 1152 0
 1424 0026 0020     		movs	r0, #0
 1425              	.LVL91:
 1426              	.L123:
1184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 1427              		.loc 1 1184 0
 1428 0028 0023     		movs	r3, #0
 1429 002a 84F83C30 		strb	r3, [r4, #60]
1187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1430              		.loc 1 1187 0
 1431 002e 10BD     		pop	{r4, pc}
 1432              	.LVL92:
 1433              	.L130:
1168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 1434              		.loc 1 1168 0
 1435 0030 9A68     		ldr	r2, [r3, #8]
 1436 0032 22F48072 		bic	r2, r2, #256
 1437 0036 9A60     		str	r2, [r3, #8]
1172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 1438              		.loc 1 1172 0
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 67


 1439 0038 806B     		ldr	r0, [r0, #56]
 1440              	.LVL93:
 1441 003a FFF7FEFF 		bl	HAL_DMA_Abort
 1442              	.LVL94:
1175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 1443              		.loc 1 1175 0
 1444 003e 2268     		ldr	r2, [r4]
 1445 0040 5368     		ldr	r3, [r2, #4]
 1446 0042 23F08063 		bic	r3, r3, #67108864
 1447 0046 5360     		str	r3, [r2, #4]
1178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1448              		.loc 1 1178 0
 1449 0048 236C     		ldr	r3, [r4, #64]
 1450 004a 23F48853 		bic	r3, r3, #4352
 1451 004e 23F00103 		bic	r3, r3, #1
 1452 0052 43F00103 		orr	r3, r3, #1
 1453 0056 2364     		str	r3, [r4, #64]
 1454 0058 E6E7     		b	.L123
 1455              	.LVL95:
 1456              	.L124:
 1457              	.LCFI19:
 1458              		.cfi_def_cfa_offset 0
 1459              		.cfi_restore 4
 1460              		.cfi_restore 14
1158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 1461              		.loc 1 1158 0
 1462 005a 0220     		movs	r0, #2
 1463              	.LVL96:
 1464 005c 7047     		bx	lr
 1465              		.cfi_endproc
 1466              	.LFE136:
 1468              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1469              		.align	1
 1470              		.global	HAL_ADC_GetValue
 1471              		.syntax unified
 1472              		.thumb
 1473              		.thumb_func
 1474              		.fpu fpv4-sp-d16
 1476              	HAL_ADC_GetValue:
 1477              	.LFB137:
1197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return the selected ADC converted value */ 
 1478              		.loc 1 1197 0
 1479              		.cfi_startproc
 1480              		@ args = 0, pretend = 0, frame = 0
 1481              		@ frame_needed = 0, uses_anonymous_args = 0
 1482              		@ link register save eliminated.
 1483              	.LVL97:
1199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1484              		.loc 1 1199 0
 1485 0000 0368     		ldr	r3, [r0]
 1486 0002 D86C     		ldr	r0, [r3, #76]
 1487              	.LVL98:
1200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 1488              		.loc 1 1200 0
 1489 0004 7047     		bx	lr
 1490              		.cfi_endproc
 1491              	.LFE137:
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 68


 1493              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1494              		.align	1
 1495              		.weak	HAL_ADC_ConvCpltCallback
 1496              		.syntax unified
 1497              		.thumb
 1498              		.thumb_func
 1499              		.fpu fpv4-sp-d16
 1501              	HAL_ADC_ConvCpltCallback:
 1502              	.LFB138:
1209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1503              		.loc 1 1209 0
 1504              		.cfi_startproc
 1505              		@ args = 0, pretend = 0, frame = 0
 1506              		@ frame_needed = 0, uses_anonymous_args = 0
 1507              		@ link register save eliminated.
 1508              	.LVL99:
 1509 0000 7047     		bx	lr
 1510              		.cfi_endproc
 1511              	.LFE138:
 1513              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 1514              		.align	1
 1515              		.syntax unified
 1516              		.thumb
 1517              		.thumb_func
 1518              		.fpu fpv4-sp-d16
 1520              	ADC_DMAConvCplt:
 1521              	.LFB147:
1603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
1604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
1607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
1608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
1609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
1610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
1612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 1522              		.loc 1 1612 0
 1523              		.cfi_startproc
 1524              		@ args = 0, pretend = 0, frame = 0
 1525              		@ frame_needed = 0, uses_anonymous_args = 0
 1526              	.LVL100:
 1527              		.loc 1 1612 0
 1528 0000 08B5     		push	{r3, lr}
 1529              	.LCFI20:
 1530              		.cfi_def_cfa_offset 8
 1531              		.cfi_offset 3, -8
 1532              		.cfi_offset 14, -4
1613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
1614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1533              		.loc 1 1614 0
 1534 0002 836B     		ldr	r3, [r0, #56]
 1535              	.LVL101:
1615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
1617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 1536              		.loc 1 1617 0
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 69


 1537 0004 1A6C     		ldr	r2, [r3, #64]
 1538 0006 12F0500F 		tst	r2, #80
 1539 000a 26D1     		bne	.L134
1618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Update ADC state machine */
1620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 1540              		.loc 1 1620 0
 1541 000c 1A6C     		ldr	r2, [r3, #64]
 1542 000e 42F40072 		orr	r2, r2, #512
 1543 0012 1A64     		str	r2, [r3, #64]
1621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular   */
1623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.      */
1624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Note: On STM32F4, there is no independent flag of end of sequence.   */
1625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /*       The test of scan sequence on going is done either with scan    */
1626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /*       sequence disabled or with end of conversion flag set to        */
1627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /*       of end of sequence.                                            */
1628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 1544              		.loc 1 1628 0
 1545 0014 1A68     		ldr	r2, [r3]
 1546 0016 9168     		ldr	r1, [r2, #8]
 1547 0018 11F0405F 		tst	r1, #805306368
 1548 001c 19D1     		bne	.L135
1629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1549              		.loc 1 1629 0 discriminator 1
 1550 001e 9969     		ldr	r1, [r3, #24]
1628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1551              		.loc 1 1628 0 discriminator 1
 1552 0020 B9B9     		cbnz	r1, .L135
1630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1553              		.loc 1 1630 0
 1554 0022 D16A     		ldr	r1, [r2, #44]
1629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1555              		.loc 1 1629 0
 1556 0024 11F4700F 		tst	r1, #15728640
 1557 0028 03D0     		beq	.L136
1631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1558              		.loc 1 1631 0
 1559 002a 9168     		ldr	r1, [r2, #8]
1630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1560              		.loc 1 1630 0
 1561 002c 11F4806F 		tst	r1, #1024
 1562 0030 0FD1     		bne	.L135
 1563              	.L136:
1632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
1633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group regular */
1634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Note: Overrun interrupt was enabled with EOC interrupt in          */
1635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
1636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* by overrun IRQ process below.                                      */
1637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 1564              		.loc 1 1637 0
 1565 0032 5168     		ldr	r1, [r2, #4]
 1566 0034 21F02001 		bic	r1, r1, #32
 1567 0038 5160     		str	r1, [r2, #4]
1638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
1639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Set ADC state */
1640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 70


 1568              		.loc 1 1640 0
 1569 003a 1A6C     		ldr	r2, [r3, #64]
 1570 003c 22F48072 		bic	r2, r2, #256
 1571 0040 1A64     		str	r2, [r3, #64]
1641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
1642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1572              		.loc 1 1642 0
 1573 0042 1A6C     		ldr	r2, [r3, #64]
 1574 0044 12F4805F 		tst	r2, #4096
 1575 0048 03D1     		bne	.L135
1643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
1644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 1576              		.loc 1 1644 0
 1577 004a 1A6C     		ldr	r2, [r3, #64]
 1578 004c 42F00102 		orr	r2, r2, #1
 1579 0050 1A64     		str	r2, [r3, #64]
 1580              	.L135:
1645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
1646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
1647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Conversion complete callback */
1649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 1581              		.loc 1 1649 0
 1582 0052 1846     		mov	r0, r3
 1583              	.LVL102:
 1584 0054 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1585              	.LVL103:
 1586 0058 08BD     		pop	{r3, pc}
 1587              	.LVL104:
 1588              	.L134:
1650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else
1652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Call DMA error callback */
1654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
 1589              		.loc 1 1654 0
 1590 005a 9B6B     		ldr	r3, [r3, #56]
 1591              	.LVL105:
 1592 005c DB6C     		ldr	r3, [r3, #76]
 1593 005e 9847     		blx	r3
 1594              	.LVL106:
 1595 0060 08BD     		pop	{r3, pc}
 1596              		.cfi_endproc
 1597              	.LFE147:
 1599              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 1600              		.align	1
 1601              		.weak	HAL_ADC_ConvHalfCpltCallback
 1602              		.syntax unified
 1603              		.thumb
 1604              		.thumb_func
 1605              		.fpu fpv4-sp-d16
 1607              	HAL_ADC_ConvHalfCpltCallback:
 1608              	.LFB139:
1224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1609              		.loc 1 1224 0
 1610              		.cfi_startproc
 1611              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 71


 1612              		@ frame_needed = 0, uses_anonymous_args = 0
 1613              		@ link register save eliminated.
 1614              	.LVL107:
 1615 0000 7047     		bx	lr
 1616              		.cfi_endproc
 1617              	.LFE139:
 1619              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 1620              		.align	1
 1621              		.syntax unified
 1622              		.thumb
 1623              		.thumb_func
 1624              		.fpu fpv4-sp-d16
 1626              	ADC_DMAHalfConvCplt:
 1627              	.LFB148:
1655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
1657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
1660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
1661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
1662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
1663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
1665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 1628              		.loc 1 1665 0
 1629              		.cfi_startproc
 1630              		@ args = 0, pretend = 0, frame = 0
 1631              		@ frame_needed = 0, uses_anonymous_args = 0
 1632              	.LVL108:
 1633              		.loc 1 1665 0
 1634 0000 08B5     		push	{r3, lr}
 1635              	.LCFI21:
 1636              		.cfi_def_cfa_offset 8
 1637              		.cfi_offset 3, -8
 1638              		.cfi_offset 14, -4
 1639              	.LVL109:
1666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Conversion complete callback */
1668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 1640              		.loc 1 1668 0
 1641 0002 806B     		ldr	r0, [r0, #56]
 1642              	.LVL110:
 1643 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 1644              	.LVL111:
 1645 0008 08BD     		pop	{r3, pc}
 1646              		.cfi_endproc
 1647              	.LFE148:
 1649              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 1650              		.align	1
 1651              		.weak	HAL_ADC_LevelOutOfWindowCallback
 1652              		.syntax unified
 1653              		.thumb
 1654              		.thumb_func
 1655              		.fpu fpv4-sp-d16
 1657              	HAL_ADC_LevelOutOfWindowCallback:
 1658              	.LFB140:
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 72


1239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1659              		.loc 1 1239 0
 1660              		.cfi_startproc
 1661              		@ args = 0, pretend = 0, frame = 0
 1662              		@ frame_needed = 0, uses_anonymous_args = 0
 1663              		@ link register save eliminated.
 1664              	.LVL112:
 1665 0000 7047     		bx	lr
 1666              		.cfi_endproc
 1667              	.LFE140:
 1669              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 1670              		.align	1
 1671              		.weak	HAL_ADC_ErrorCallback
 1672              		.syntax unified
 1673              		.thumb
 1674              		.thumb_func
 1675              		.fpu fpv4-sp-d16
 1677              	HAL_ADC_ErrorCallback:
 1678              	.LFB141:
1260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1679              		.loc 1 1260 0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 0
 1682              		@ frame_needed = 0, uses_anonymous_args = 0
 1683              		@ link register save eliminated.
 1684              	.LVL113:
 1685 0000 7047     		bx	lr
 1686              		.cfi_endproc
 1687              	.LFE141:
 1689              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 1690              		.align	1
 1691              		.global	HAL_ADC_IRQHandler
 1692              		.syntax unified
 1693              		.thumb
 1694              		.thumb_func
 1695              		.fpu fpv4-sp-d16
 1697              	HAL_ADC_IRQHandler:
 1698              	.LFB134:
 881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   uint32_t tmp1 = 0U, tmp2 = 0U;
 1699              		.loc 1 881 0
 1700              		.cfi_startproc
 1701              		@ args = 0, pretend = 0, frame = 0
 1702              		@ frame_needed = 0, uses_anonymous_args = 0
 1703              	.LVL114:
 881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   uint32_t tmp1 = 0U, tmp2 = 0U;
 1704              		.loc 1 881 0
 1705 0000 38B5     		push	{r3, r4, r5, lr}
 1706              	.LCFI22:
 1707              		.cfi_def_cfa_offset 16
 1708              		.cfi_offset 3, -16
 1709              		.cfi_offset 4, -12
 1710              		.cfi_offset 5, -8
 1711              		.cfi_offset 14, -4
 1712 0002 0446     		mov	r4, r0
 1713              	.LVL115:
 889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 1714              		.loc 1 889 0
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 73


 1715 0004 0268     		ldr	r2, [r0]
 1716 0006 1168     		ldr	r1, [r2]
 1717              	.LVL116:
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check End of conversion flag for regular channels */
 1718              		.loc 1 890 0
 1719 0008 5368     		ldr	r3, [r2, #4]
 1720              	.LVL117:
 892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 1721              		.loc 1 892 0
 1722 000a 11F0020F 		tst	r1, #2
 1723 000e 2FD0     		beq	.L145
 1724 0010 03F02003 		and	r3, r3, #32
 1725              	.LVL118:
 892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 1726              		.loc 1 892 0 is_stmt 0 discriminator 1
 1727 0014 63B3     		cbz	r3, .L145
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 1728              		.loc 1 895 0 is_stmt 1
 1729 0016 036C     		ldr	r3, [r0, #64]
 1730              	.LVL119:
 1731 0018 13F0100F 		tst	r3, #16
 1732 001c 03D1     		bne	.L146
 898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 1733              		.loc 1 898 0
 1734 001e 036C     		ldr	r3, [r0, #64]
 1735 0020 43F40073 		orr	r3, r3, #512
 1736 0024 0364     		str	r3, [r0, #64]
 1737              	.L146:
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1738              		.loc 1 907 0
 1739 0026 9368     		ldr	r3, [r2, #8]
 1740 0028 13F0405F 		tst	r3, #805306368
 1741 002c 19D1     		bne	.L147
 908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1742              		.loc 1 908 0 discriminator 1
 1743 002e A369     		ldr	r3, [r4, #24]
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1744              		.loc 1 907 0 discriminator 1
 1745 0030 BBB9     		cbnz	r3, .L147
 909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1746              		.loc 1 909 0
 1747 0032 D36A     		ldr	r3, [r2, #44]
 908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1748              		.loc 1 908 0
 1749 0034 13F4700F 		tst	r3, #15728640
 1750 0038 03D0     		beq	.L148
 910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 1751              		.loc 1 910 0
 1752 003a 9368     		ldr	r3, [r2, #8]
 909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1753              		.loc 1 909 0
 1754 003c 13F4806F 		tst	r3, #1024
 1755 0040 0FD1     		bne	.L147
 1756              	.L148:
 916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 1757              		.loc 1 916 0
 1758 0042 5368     		ldr	r3, [r2, #4]
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 74


 1759 0044 23F02003 		bic	r3, r3, #32
 1760 0048 5360     		str	r3, [r2, #4]
 919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 1761              		.loc 1 919 0
 1762 004a 236C     		ldr	r3, [r4, #64]
 1763 004c 23F48073 		bic	r3, r3, #256
 1764 0050 2364     		str	r3, [r4, #64]
 921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 1765              		.loc 1 921 0
 1766 0052 236C     		ldr	r3, [r4, #64]
 1767 0054 13F4805F 		tst	r3, #4096
 1768 0058 03D1     		bne	.L147
 923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 1769              		.loc 1 923 0
 1770 005a 236C     		ldr	r3, [r4, #64]
 1771 005c 43F00103 		orr	r3, r3, #1
 1772 0060 2364     		str	r3, [r4, #64]
 1773              	.L147:
 928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 1774              		.loc 1 928 0
 1775 0062 2046     		mov	r0, r4
 1776              	.LVL120:
 1777 0064 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1778              	.LVL121:
 931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 1779              		.loc 1 931 0
 1780 0068 2368     		ldr	r3, [r4]
 1781 006a 6FF01202 		mvn	r2, #18
 1782 006e 1A60     		str	r2, [r3]
 1783              	.L145:
 934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 1784              		.loc 1 934 0
 1785 0070 2368     		ldr	r3, [r4]
 1786 0072 1968     		ldr	r1, [r3]
 1787              	.LVL122:
 935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check End of conversion flag for injected channels */
 1788              		.loc 1 935 0
 1789 0074 5A68     		ldr	r2, [r3, #4]
 1790 0076 02F08002 		and	r2, r2, #128
 1791              	.LVL123:
 937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 1792              		.loc 1 937 0
 1793 007a 11F0040F 		tst	r1, #4
 1794 007e 36D0     		beq	.L149
 937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 1795              		.loc 1 937 0 is_stmt 0 discriminator 1
 1796 0080 002A     		cmp	r2, #0
 1797 0082 34D0     		beq	.L149
 940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 1798              		.loc 1 940 0 is_stmt 1
 1799 0084 226C     		ldr	r2, [r4, #64]
 1800              	.LVL124:
 1801 0086 12F0100F 		tst	r2, #16
 1802 008a 03D1     		bne	.L150
 943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 1803              		.loc 1 943 0
 1804 008c 226C     		ldr	r2, [r4, #64]
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 75


 1805 008e 42F40052 		orr	r2, r2, #8192
 1806 0092 2264     		str	r2, [r4, #64]
 1807              	.L150:
 950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 1808              		.loc 1 950 0
 1809 0094 9A68     		ldr	r2, [r3, #8]
 1810 0096 12F4401F 		tst	r2, #3145728
 1811 009a 21D1     		bne	.L151
 951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 1812              		.loc 1 951 0 discriminator 1
 1813 009c 9A6B     		ldr	r2, [r3, #56]
 950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 1814              		.loc 1 950 0 discriminator 1
 1815 009e 12F4401F 		tst	r2, #3145728
 1816 00a2 03D0     		beq	.L152
 952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 1817              		.loc 1 952 0
 1818 00a4 9A68     		ldr	r2, [r3, #8]
 951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 1819              		.loc 1 951 0
 1820 00a6 12F4806F 		tst	r2, #1024
 1821 00aa 19D1     		bne	.L151
 1822              	.L152:
 953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 1823              		.loc 1 953 0
 1824 00ac 5A68     		ldr	r2, [r3, #4]
 952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 1825              		.loc 1 952 0
 1826 00ae 12F4806F 		tst	r2, #1024
 1827 00b2 15D1     		bne	.L151
 954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 1828              		.loc 1 954 0
 1829 00b4 9A68     		ldr	r2, [r3, #8]
 953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 1830              		.loc 1 953 0
 1831 00b6 12F0405F 		tst	r2, #805306368
 1832 00ba 11D1     		bne	.L151
 955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 1833              		.loc 1 955 0
 1834 00bc A269     		ldr	r2, [r4, #24]
 954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 1835              		.loc 1 954 0
 1836 00be 7AB9     		cbnz	r2, .L151
 958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 1837              		.loc 1 958 0
 1838 00c0 5A68     		ldr	r2, [r3, #4]
 1839 00c2 22F08002 		bic	r2, r2, #128
 1840 00c6 5A60     		str	r2, [r3, #4]
 961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 1841              		.loc 1 961 0
 1842 00c8 236C     		ldr	r3, [r4, #64]
 1843 00ca 23F48053 		bic	r3, r3, #4096
 1844 00ce 2364     		str	r3, [r4, #64]
 963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       { 
 1845              		.loc 1 963 0
 1846 00d0 236C     		ldr	r3, [r4, #64]
 1847 00d2 13F4807F 		tst	r3, #256
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 76


 1848 00d6 03D1     		bne	.L151
 965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 1849              		.loc 1 965 0
 1850 00d8 236C     		ldr	r3, [r4, #64]
 1851 00da 43F00103 		orr	r3, r3, #1
 1852 00de 2364     		str	r3, [r4, #64]
 1853              	.L151:
 970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 1854              		.loc 1 970 0
 1855 00e0 2046     		mov	r0, r4
 1856 00e2 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
 1857              	.LVL125:
 973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 1858              		.loc 1 973 0
 1859 00e6 2368     		ldr	r3, [r4]
 1860 00e8 6FF00C02 		mvn	r2, #12
 1861 00ec 1A60     		str	r2, [r3]
 1862              	.L149:
 976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 1863              		.loc 1 976 0
 1864 00ee 2268     		ldr	r2, [r4]
 1865 00f0 1168     		ldr	r1, [r2]
 1866              	.LVL126:
 977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check Analog watchdog flag */
 1867              		.loc 1 977 0
 1868 00f2 5368     		ldr	r3, [r2, #4]
 1869 00f4 03F04003 		and	r3, r3, #64
 1870              	.LVL127:
 979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 1871              		.loc 1 979 0
 1872 00f8 11F0010F 		tst	r1, #1
 1873 00fc 04D0     		beq	.L153
 979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 1874              		.loc 1 979 0 is_stmt 0 discriminator 1
 1875 00fe 1BB1     		cbz	r3, .L153
 981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 1876              		.loc 1 981 0 is_stmt 1
 1877 0100 1368     		ldr	r3, [r2]
 1878              	.LVL128:
 1879 0102 13F0010F 		tst	r3, #1
 1880 0106 09D1     		bne	.L156
 1881              	.LVL129:
 1882              	.L153:
 994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 1883              		.loc 1 994 0
 1884 0108 2268     		ldr	r2, [r4]
 1885 010a 1168     		ldr	r1, [r2]
 1886              	.LVL130:
 995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check Overrun flag */
 1887              		.loc 1 995 0
 1888 010c 5368     		ldr	r3, [r2, #4]
 1889 010e 03F08063 		and	r3, r3, #67108864
 1890              	.LVL131:
 997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 1891              		.loc 1 997 0
 1892 0112 11F0200F 		tst	r1, #32
 1893 0116 00D0     		beq	.L144
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 77


 997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 1894              		.loc 1 997 0 is_stmt 0 discriminator 1
 1895 0118 63B9     		cbnz	r3, .L157
 1896              	.LVL132:
 1897              	.L144:
 1898 011a 38BD     		pop	{r3, r4, r5, pc}
 1899              	.LVL133:
 1900              	.L156:
 984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 1901              		.loc 1 984 0 is_stmt 1
 1902 011c 236C     		ldr	r3, [r4, #64]
 1903 011e 43F48033 		orr	r3, r3, #65536
 1904 0122 2364     		str	r3, [r4, #64]
 987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 1905              		.loc 1 987 0
 1906 0124 2046     		mov	r0, r4
 1907 0126 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 1908              	.LVL134:
 990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 1909              		.loc 1 990 0
 1910 012a 2368     		ldr	r3, [r4]
 1911 012c 6FF00102 		mvn	r2, #1
 1912 0130 1A60     		str	r2, [r3]
 1913 0132 E9E7     		b	.L153
 1914              	.LVL135:
 1915              	.L157:
1004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 1916              		.loc 1 1004 0
 1917 0134 636C     		ldr	r3, [r4, #68]
 1918              	.LVL136:
 1919 0136 43F00203 		orr	r3, r3, #2
 1920 013a 6364     		str	r3, [r4, #68]
1007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 1921              		.loc 1 1007 0
 1922 013c 6FF02005 		mvn	r5, #32
 1923 0140 1560     		str	r5, [r2]
1010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 1924              		.loc 1 1010 0
 1925 0142 2046     		mov	r0, r4
 1926 0144 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1927              	.LVL137:
1013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 1928              		.loc 1 1013 0
 1929 0148 2368     		ldr	r3, [r4]
 1930 014a 1D60     		str	r5, [r3]
1015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 1931              		.loc 1 1015 0
 1932 014c E5E7     		b	.L144
 1933              		.cfi_endproc
 1934              	.LFE134:
 1936              		.section	.text.ADC_DMAError,"ax",%progbits
 1937              		.align	1
 1938              		.syntax unified
 1939              		.thumb
 1940              		.thumb_func
 1941              		.fpu fpv4-sp-d16
 1943              	ADC_DMAError:
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 78


 1944              	.LFB149:
1669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
1670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  DMA error callback 
1673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
1674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
1675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
1676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
1678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 1945              		.loc 1 1678 0
 1946              		.cfi_startproc
 1947              		@ args = 0, pretend = 0, frame = 0
 1948              		@ frame_needed = 0, uses_anonymous_args = 0
 1949              	.LVL138:
 1950 0000 08B5     		push	{r3, lr}
 1951              	.LCFI23:
 1952              		.cfi_def_cfa_offset 8
 1953              		.cfi_offset 3, -8
 1954              		.cfi_offset 14, -4
1679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1955              		.loc 1 1679 0
 1956 0002 806B     		ldr	r0, [r0, #56]
 1957              	.LVL139:
1680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->State= HAL_ADC_STATE_ERROR_DMA;
 1958              		.loc 1 1680 0
 1959 0004 4023     		movs	r3, #64
 1960 0006 0364     		str	r3, [r0, #64]
1681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set ADC error code to DMA error */
1682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 1961              		.loc 1 1682 0
 1962 0008 436C     		ldr	r3, [r0, #68]
 1963 000a 43F00403 		orr	r3, r3, #4
 1964 000e 4364     		str	r3, [r0, #68]
1683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
 1965              		.loc 1 1683 0
 1966 0010 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1967              	.LVL140:
 1968 0014 08BD     		pop	{r3, pc}
 1969              		.cfi_endproc
 1970              	.LFE149:
 1972              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 1973              		.align	1
 1974              		.global	HAL_ADC_ConfigChannel
 1975              		.syntax unified
 1976              		.thumb
 1977              		.thumb_func
 1978              		.fpu fpv4-sp-d16
 1980              	HAL_ADC_ConfigChannel:
 1981              	.LFB142:
1298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __IO uint32_t counter = 0U;
 1982              		.loc 1 1298 0
 1983              		.cfi_startproc
 1984              		@ args = 0, pretend = 0, frame = 8
 1985              		@ frame_needed = 0, uses_anonymous_args = 0
 1986              		@ link register save eliminated.
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 79


 1987              	.LVL141:
 1988 0000 30B4     		push	{r4, r5}
 1989              	.LCFI24:
 1990              		.cfi_def_cfa_offset 8
 1991              		.cfi_offset 4, -8
 1992              		.cfi_offset 5, -4
 1993 0002 82B0     		sub	sp, sp, #8
 1994              	.LCFI25:
 1995              		.cfi_def_cfa_offset 16
1299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC_Common_TypeDef *tmpADC_Common;
 1996              		.loc 1 1299 0
 1997 0004 0023     		movs	r3, #0
 1998 0006 0193     		str	r3, [sp, #4]
1308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 1999              		.loc 1 1308 0
 2000 0008 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 2001 000c 012B     		cmp	r3, #1
 2002 000e 00F0B780 		beq	.L171
1308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 2003              		.loc 1 1308 0 is_stmt 0 discriminator 2
 2004 0012 0123     		movs	r3, #1
 2005 0014 80F83C30 		strb	r3, [r0, #60]
1311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 2006              		.loc 1 1311 0 is_stmt 1 discriminator 2
 2007 0018 0B68     		ldr	r3, [r1]
 2008 001a 092B     		cmp	r3, #9
 2009 001c 3ED9     		bls	.L162
1314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 2010              		.loc 1 1314 0
 2011 001e 0568     		ldr	r5, [r0]
 2012 0020 EA68     		ldr	r2, [r5, #12]
 2013 0022 9BB2     		uxth	r3, r3
 2014 0024 03EB4303 		add	r3, r3, r3, lsl #1
 2015 0028 1E3B     		subs	r3, r3, #30
 2016 002a 0724     		movs	r4, #7
 2017 002c 04FA03F3 		lsl	r3, r4, r3
 2018 0030 22EA0303 		bic	r3, r2, r3
 2019 0034 EB60     		str	r3, [r5, #12]
1317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 2020              		.loc 1 1317 0
 2021 0036 0568     		ldr	r5, [r0]
 2022 0038 EA68     		ldr	r2, [r5, #12]
 2023 003a 8C68     		ldr	r4, [r1, #8]
 2024 003c 0B88     		ldrh	r3, [r1]
 2025 003e 03EB4303 		add	r3, r3, r3, lsl #1
 2026 0042 1E3B     		subs	r3, r3, #30
 2027 0044 04FA03F3 		lsl	r3, r4, r3
 2028 0048 1343     		orrs	r3, r3, r2
 2029 004a EB60     		str	r3, [r5, #12]
 2030              	.L163:
1329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 2031              		.loc 1 1329 0
 2032 004c 4B68     		ldr	r3, [r1, #4]
 2033 004e 062B     		cmp	r3, #6
 2034 0050 3AD8     		bhi	.L164
1332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 2035              		.loc 1 1332 0
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 80


 2036 0052 0568     		ldr	r5, [r0]
 2037 0054 6A6B     		ldr	r2, [r5, #52]
 2038 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2039 005a 053B     		subs	r3, r3, #5
 2040 005c 1F24     		movs	r4, #31
 2041 005e 04FA03F3 		lsl	r3, r4, r3
 2042 0062 22EA0303 		bic	r3, r2, r3
 2043 0066 6B63     		str	r3, [r5, #52]
1335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 2044              		.loc 1 1335 0
 2045 0068 0568     		ldr	r5, [r0]
 2046 006a 6A6B     		ldr	r2, [r5, #52]
 2047 006c 4B68     		ldr	r3, [r1, #4]
 2048 006e 03EB8303 		add	r3, r3, r3, lsl #2
 2049 0072 053B     		subs	r3, r3, #5
 2050 0074 0C88     		ldrh	r4, [r1]
 2051 0076 04FA03F3 		lsl	r3, r4, r3
 2052 007a 1343     		orrs	r3, r3, r2
 2053 007c 6B63     		str	r3, [r5, #52]
 2054              	.L165:
 2055              	.LVL142:
1362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 2056              		.loc 1 1362 0
 2057 007e 0268     		ldr	r2, [r0]
 2058 0080 404B     		ldr	r3, .L175
 2059 0082 9A42     		cmp	r2, r3
 2060 0084 50D0     		beq	.L173
 2061              	.L167:
1369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 2062              		.loc 1 1369 0
 2063 0086 0268     		ldr	r2, [r0]
 2064 0088 3E4B     		ldr	r3, .L175
 2065 008a 9A42     		cmp	r2, r3
 2066 008c 55D0     		beq	.L174
 2067              	.L168:
1387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 2068              		.loc 1 1387 0
 2069 008e 0023     		movs	r3, #0
 2070 0090 80F83C30 		strb	r3, [r0, #60]
1390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 2071              		.loc 1 1390 0
 2072 0094 1846     		mov	r0, r3
 2073              	.LVL143:
 2074              	.L161:
1391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 2075              		.loc 1 1391 0
 2076 0096 02B0     		add	sp, sp, #8
 2077              	.LCFI26:
 2078              		.cfi_remember_state
 2079              		.cfi_def_cfa_offset 8
 2080              		@ sp needed
 2081 0098 30BC     		pop	{r4, r5}
 2082              	.LCFI27:
 2083              		.cfi_restore 5
 2084              		.cfi_restore 4
 2085              		.cfi_def_cfa_offset 0
 2086 009a 7047     		bx	lr
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 81


 2087              	.LVL144:
 2088              	.L162:
 2089              	.LCFI28:
 2090              		.cfi_restore_state
1322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 2091              		.loc 1 1322 0
 2092 009c 0568     		ldr	r5, [r0]
 2093 009e 2A69     		ldr	r2, [r5, #16]
 2094 00a0 9BB2     		uxth	r3, r3
 2095 00a2 03EB4303 		add	r3, r3, r3, lsl #1
 2096 00a6 0724     		movs	r4, #7
 2097 00a8 04FA03F3 		lsl	r3, r4, r3
 2098 00ac 22EA0303 		bic	r3, r2, r3
 2099 00b0 2B61     		str	r3, [r5, #16]
1325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 2100              		.loc 1 1325 0
 2101 00b2 0568     		ldr	r5, [r0]
 2102 00b4 2A69     		ldr	r2, [r5, #16]
 2103 00b6 8C68     		ldr	r4, [r1, #8]
 2104 00b8 0B88     		ldrh	r3, [r1]
 2105 00ba 03EB4303 		add	r3, r3, r3, lsl #1
 2106 00be 04FA03F3 		lsl	r3, r4, r3
 2107 00c2 1343     		orrs	r3, r3, r2
 2108 00c4 2B61     		str	r3, [r5, #16]
 2109 00c6 C1E7     		b	.L163
 2110              	.L164:
1338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 2111              		.loc 1 1338 0
 2112 00c8 0C2B     		cmp	r3, #12
 2113 00ca 16D8     		bhi	.L166
1341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 2114              		.loc 1 1341 0
 2115 00cc 0568     		ldr	r5, [r0]
 2116 00ce 2A6B     		ldr	r2, [r5, #48]
 2117 00d0 03EB8303 		add	r3, r3, r3, lsl #2
 2118 00d4 233B     		subs	r3, r3, #35
 2119 00d6 1F24     		movs	r4, #31
 2120 00d8 04FA03F3 		lsl	r3, r4, r3
 2121 00dc 22EA0303 		bic	r3, r2, r3
 2122 00e0 2B63     		str	r3, [r5, #48]
1344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 2123              		.loc 1 1344 0
 2124 00e2 0568     		ldr	r5, [r0]
 2125 00e4 2A6B     		ldr	r2, [r5, #48]
 2126 00e6 4B68     		ldr	r3, [r1, #4]
 2127 00e8 03EB8303 		add	r3, r3, r3, lsl #2
 2128 00ec 233B     		subs	r3, r3, #35
 2129 00ee 0C88     		ldrh	r4, [r1]
 2130 00f0 04FA03F3 		lsl	r3, r4, r3
 2131 00f4 1343     		orrs	r3, r3, r2
 2132 00f6 2B63     		str	r3, [r5, #48]
 2133 00f8 C1E7     		b	.L165
 2134              	.L166:
1350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 2135              		.loc 1 1350 0
 2136 00fa 0568     		ldr	r5, [r0]
 2137 00fc EA6A     		ldr	r2, [r5, #44]
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 82


 2138 00fe 03EB8303 		add	r3, r3, r3, lsl #2
 2139 0102 413B     		subs	r3, r3, #65
 2140 0104 1F24     		movs	r4, #31
 2141 0106 04FA03F3 		lsl	r3, r4, r3
 2142 010a 22EA0303 		bic	r3, r2, r3
 2143 010e EB62     		str	r3, [r5, #44]
1353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 2144              		.loc 1 1353 0
 2145 0110 0568     		ldr	r5, [r0]
 2146 0112 EA6A     		ldr	r2, [r5, #44]
 2147 0114 4B68     		ldr	r3, [r1, #4]
 2148 0116 03EB8303 		add	r3, r3, r3, lsl #2
 2149 011a 413B     		subs	r3, r3, #65
 2150 011c 0C88     		ldrh	r4, [r1]
 2151 011e 04FA03F3 		lsl	r3, r4, r3
 2152 0122 1343     		orrs	r3, r3, r2
 2153 0124 EB62     		str	r3, [r5, #44]
 2154 0126 AAE7     		b	.L165
 2155              	.LVL145:
 2156              	.L173:
1362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 2157              		.loc 1 1362 0 discriminator 1
 2158 0128 0B68     		ldr	r3, [r1]
 2159 012a 122B     		cmp	r3, #18
 2160 012c ABD1     		bne	.L167
1365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 2161              		.loc 1 1365 0
 2162 012e 164A     		ldr	r2, .L175+4
 2163 0130 5368     		ldr	r3, [r2, #4]
 2164 0132 43F48003 		orr	r3, r3, #4194304
 2165 0136 5360     		str	r3, [r2, #4]
 2166 0138 A5E7     		b	.L167
 2167              	.L174:
1369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 2168              		.loc 1 1369 0 discriminator 1
 2169 013a 0B68     		ldr	r3, [r1]
 2170 013c 103B     		subs	r3, r3, #16
 2171 013e 012B     		cmp	r3, #1
 2172 0140 A5D8     		bhi	.L168
1372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 2173              		.loc 1 1372 0
 2174 0142 114A     		ldr	r2, .L175+4
 2175 0144 5368     		ldr	r3, [r2, #4]
 2176 0146 43F40003 		orr	r3, r3, #8388608
 2177 014a 5360     		str	r3, [r2, #4]
1374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 2178              		.loc 1 1374 0
 2179 014c 0B68     		ldr	r3, [r1]
 2180 014e 102B     		cmp	r3, #16
 2181 0150 9DD1     		bne	.L168
1378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       while(counter != 0U)
 2182              		.loc 1 1378 0
 2183 0152 0E4B     		ldr	r3, .L175+8
 2184 0154 1B68     		ldr	r3, [r3]
 2185 0156 02F14672 		add	r2, r2, #51904512
 2186 015a 02F52E32 		add	r2, r2, #178176
 2187 015e 02F28332 		addw	r2, r2, #899
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 83


 2188 0162 A2FB0323 		umull	r2, r3, r2, r3
 2189 0166 9B0C     		lsrs	r3, r3, #18
 2190 0168 03EB8303 		add	r3, r3, r3, lsl #2
 2191 016c 5A00     		lsls	r2, r3, #1
 2192 016e 0192     		str	r2, [sp, #4]
1379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 2193              		.loc 1 1379 0
 2194 0170 02E0     		b	.L169
 2195              	.L170:
1381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 2196              		.loc 1 1381 0
 2197 0172 019B     		ldr	r3, [sp, #4]
 2198 0174 013B     		subs	r3, r3, #1
 2199 0176 0193     		str	r3, [sp, #4]
 2200              	.L169:
1379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 2201              		.loc 1 1379 0
 2202 0178 019B     		ldr	r3, [sp, #4]
 2203 017a 002B     		cmp	r3, #0
 2204 017c F9D1     		bne	.L170
 2205 017e 86E7     		b	.L168
 2206              	.LVL146:
 2207              	.L171:
1308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 2208              		.loc 1 1308 0
 2209 0180 0220     		movs	r0, #2
 2210              	.LVL147:
 2211 0182 88E7     		b	.L161
 2212              	.L176:
 2213              		.align	2
 2214              	.L175:
 2215 0184 00200140 		.word	1073815552
 2216 0188 00230140 		.word	1073816320
 2217 018c 00000000 		.word	SystemCoreClock
 2218              		.cfi_endproc
 2219              	.LFE142:
 2221              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2222              		.align	1
 2223              		.global	HAL_ADC_AnalogWDGConfig
 2224              		.syntax unified
 2225              		.thumb
 2226              		.thumb_func
 2227              		.fpu fpv4-sp-d16
 2229              	HAL_ADC_AnalogWDGConfig:
 2230              	.LFB143:
1410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
 2231              		.loc 1 1410 0
 2232              		.cfi_startproc
 2233              		@ args = 0, pretend = 0, frame = 0
 2234              		@ frame_needed = 0, uses_anonymous_args = 0
 2235              		@ link register save eliminated.
 2236              	.LVL148:
1427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 2237              		.loc 1 1427 0
 2238 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 2239 0004 012B     		cmp	r3, #1
 2240 0006 34D0     		beq	.L181
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 84


1410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
 2241              		.loc 1 1410 0 discriminator 2
 2242 0008 10B4     		push	{r4}
 2243              	.LCFI29:
 2244              		.cfi_def_cfa_offset 4
 2245              		.cfi_offset 4, -4
1427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 2246              		.loc 1 1427 0 discriminator 2
 2247 000a 0123     		movs	r3, #1
 2248 000c 80F83C30 		strb	r3, [r0, #60]
1429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 2249              		.loc 1 1429 0 discriminator 2
 2250 0010 0B69     		ldr	r3, [r1, #16]
 2251 0012 012B     		cmp	r3, #1
 2252 0014 27D0     		beq	.L186
1437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 2253              		.loc 1 1437 0
 2254 0016 0268     		ldr	r2, [r0]
 2255 0018 5368     		ldr	r3, [r2, #4]
 2256 001a 23F04003 		bic	r3, r3, #64
 2257 001e 5360     		str	r3, [r2, #4]
 2258              	.L180:
1441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 2259              		.loc 1 1441 0
 2260 0020 0268     		ldr	r2, [r0]
 2261 0022 5368     		ldr	r3, [r2, #4]
 2262 0024 23F44003 		bic	r3, r3, #12582912
 2263 0028 23F40073 		bic	r3, r3, #512
 2264 002c 5360     		str	r3, [r2, #4]
1444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 2265              		.loc 1 1444 0
 2266 002e 0268     		ldr	r2, [r0]
 2267 0030 5368     		ldr	r3, [r2, #4]
 2268 0032 0C68     		ldr	r4, [r1]
 2269 0034 2343     		orrs	r3, r3, r4
 2270 0036 5360     		str	r3, [r2, #4]
1447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 2271              		.loc 1 1447 0
 2272 0038 0368     		ldr	r3, [r0]
 2273 003a 4A68     		ldr	r2, [r1, #4]
 2274 003c 5A62     		str	r2, [r3, #36]
1450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 2275              		.loc 1 1450 0
 2276 003e 0368     		ldr	r3, [r0]
 2277 0040 8A68     		ldr	r2, [r1, #8]
 2278 0042 9A62     		str	r2, [r3, #40]
1453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 2279              		.loc 1 1453 0
 2280 0044 0268     		ldr	r2, [r0]
 2281 0046 5368     		ldr	r3, [r2, #4]
 2282 0048 23F01F03 		bic	r3, r3, #31
 2283 004c 5360     		str	r3, [r2, #4]
1456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 2284              		.loc 1 1456 0
 2285 004e 0268     		ldr	r2, [r0]
 2286 0050 5468     		ldr	r4, [r2, #4]
 2287 0052 8B89     		ldrh	r3, [r1, #12]
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 85


 2288 0054 2343     		orrs	r3, r3, r4
 2289 0056 5360     		str	r3, [r2, #4]
1459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 2290              		.loc 1 1459 0
 2291 0058 0023     		movs	r3, #0
 2292 005a 80F83C30 		strb	r3, [r0, #60]
1462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 2293              		.loc 1 1462 0
 2294 005e 1846     		mov	r0, r3
 2295              	.LVL149:
1463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 2296              		.loc 1 1463 0
 2297 0060 5DF8044B 		ldr	r4, [sp], #4
 2298              	.LCFI30:
 2299              		.cfi_remember_state
 2300              		.cfi_restore 4
 2301              		.cfi_def_cfa_offset 0
 2302 0064 7047     		bx	lr
 2303              	.LVL150:
 2304              	.L186:
 2305              	.LCFI31:
 2306              		.cfi_restore_state
1432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 2307              		.loc 1 1432 0
 2308 0066 0268     		ldr	r2, [r0]
 2309 0068 5368     		ldr	r3, [r2, #4]
 2310 006a 43F04003 		orr	r3, r3, #64
 2311 006e 5360     		str	r3, [r2, #4]
 2312 0070 D6E7     		b	.L180
 2313              	.L181:
 2314              	.LCFI32:
 2315              		.cfi_def_cfa_offset 0
 2316              		.cfi_restore 4
1427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 2317              		.loc 1 1427 0
 2318 0072 0220     		movs	r0, #2
 2319              	.LVL151:
 2320 0074 7047     		bx	lr
 2321              		.cfi_endproc
 2322              	.LFE143:
 2324              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 2325              		.align	1
 2326              		.global	HAL_ADC_GetState
 2327              		.syntax unified
 2328              		.thumb
 2329              		.thumb_func
 2330              		.fpu fpv4-sp-d16
 2332              	HAL_ADC_GetState:
 2333              	.LFB144:
1492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return ADC state */
 2334              		.loc 1 1492 0
 2335              		.cfi_startproc
 2336              		@ args = 0, pretend = 0, frame = 0
 2337              		@ frame_needed = 0, uses_anonymous_args = 0
 2338              		@ link register save eliminated.
 2339              	.LVL152:
1494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 86


 2340              		.loc 1 1494 0
 2341 0000 006C     		ldr	r0, [r0, #64]
 2342              	.LVL153:
1495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 2343              		.loc 1 1495 0
 2344 0002 7047     		bx	lr
 2345              		.cfi_endproc
 2346              	.LFE144:
 2348              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 2349              		.align	1
 2350              		.global	HAL_ADC_GetError
 2351              		.syntax unified
 2352              		.thumb
 2353              		.thumb_func
 2354              		.fpu fpv4-sp-d16
 2356              	HAL_ADC_GetError:
 2357              	.LFB145:
1504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return hadc->ErrorCode;
 2358              		.loc 1 1504 0
 2359              		.cfi_startproc
 2360              		@ args = 0, pretend = 0, frame = 0
 2361              		@ frame_needed = 0, uses_anonymous_args = 0
 2362              		@ link register save eliminated.
 2363              	.LVL154:
1505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 2364              		.loc 1 1505 0
 2365 0000 406C     		ldr	r0, [r0, #68]
 2366              	.LVL155:
1506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 2367              		.loc 1 1506 0
 2368 0002 7047     		bx	lr
 2369              		.cfi_endproc
 2370              	.LFE145:
 2372              		.text
 2373              	.Letext0:
 2374              		.file 3 "/Users/augustmason/Documents/GitHub/riptide_firmware/STM32/gcc-arm-none-eabi-6-2017-q2-up
 2375              		.file 4 "/Users/augustmason/Documents/GitHub/riptide_firmware/STM32/gcc-arm-none-eabi-6-2017-q2-up
 2376              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 2377              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 2378              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f405xx.h"
 2379              		.file 8 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2380              		.file 9 "/Users/augustmason/Documents/GitHub/riptide_firmware/STM32/gcc-arm-none-eabi-6-2017-q2-up
 2381              		.file 10 "/Users/augustmason/Documents/GitHub/riptide_firmware/STM32/gcc-arm-none-eabi-6-2017-q2-u
 2382              		.file 11 "/Users/augustmason/Documents/GitHub/riptide_firmware/STM32/gcc-arm-none-eabi-6-2017-q2-u
 2383              		.file 12 "/Users/augustmason/Documents/GitHub/riptide_firmware/STM32/gcc-arm-none-eabi-6-2017-q2-u
 2384              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2385              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2386              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2387              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc_ex.h"
 2388              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 87


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_adc.c
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:18     .text.ADC_Init:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:24     .text.ADC_Init:0000000000000000 ADC_Init
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:212    .text.ADC_Init:0000000000000134 $d
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:218    .text.HAL_ADC_MspInit:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:225    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:238    .text.HAL_ADC_Init:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:245    .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:323    .text.HAL_ADC_MspDeInit:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:330    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:343    .text.HAL_ADC_DeInit:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:350    .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:412    .text.HAL_ADC_Start:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:419    .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:590    .text.HAL_ADC_Start:00000000000000e8 $d
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:598    .text.HAL_ADC_Stop:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:605    .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:655    .text.HAL_ADC_PollForConversion:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:662    .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:813    .text.HAL_ADC_PollForEvent:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:820    .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:909    .text.HAL_ADC_Start_IT:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:916    .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1093   .text.HAL_ADC_Start_IT:00000000000000f8 $d
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1101   .text.HAL_ADC_Stop_IT:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1108   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1163   .text.HAL_ADC_Start_DMA:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1170   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1374   .text.HAL_ADC_Start_DMA:0000000000000128 $d
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1520   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1626   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1943   .text.ADC_DMAError:0000000000000000 ADC_DMAError
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1385   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1392   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1469   .text.HAL_ADC_GetValue:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1476   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1494   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1501   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1514   .text.ADC_DMAConvCplt:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1600   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1607   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1620   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1650   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1657   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1670   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1677   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1690   .text.HAL_ADC_IRQHandler:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1697   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1937   .text.ADC_DMAError:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1973   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:1980   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:2215   .text.HAL_ADC_ConfigChannel:0000000000000184 $d
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:2222   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:2229   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:2325   .text.HAL_ADC_GetState:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:2332   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
ARM GAS  /var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s 			page 88


/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:2349   .text.HAL_ADC_GetError:0000000000000000 $t
/var/folders/7p/1_dhylqx7nl5s8914_0f_4w00000gn/T//ccLtLlf2.s:2356   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
SystemCoreClock
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_ADCEx_InjectedConvCpltCallback
