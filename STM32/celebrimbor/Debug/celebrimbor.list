
celebrimbor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007518  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  080076a8  080076a8  000176a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007a04  08007a04  00017a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007a0c  08007a0c  00017a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007a10  08007a10  00017a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000330  20000000  08007a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020330  2**0
                  CONTENTS
  8 .bss          000057a4  20000330  20000330  00020330  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20005ad4  20005ad4  00020330  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002db72  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000588a  00000000  00000000  0004ded2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000e765  00000000  00000000  0005375c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001340  00000000  00000000  00061ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001860  00000000  00000000  00063208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000bad4  00000000  00000000  00064a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000700c  00000000  00000000  0007053c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00077548  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000041bc  00000000  00000000  000775c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000330 	.word	0x20000330
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007690 	.word	0x08007690

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000334 	.word	0x20000334
 80001cc:	08007690 	.word	0x08007690

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f092 0f00 	teq	r2, #0
 80004ca:	bf14      	ite	ne
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e720      	b.n	8000324 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aedc 	beq.w	80002d2 <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6c1      	b.n	80002d2 <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_ldivmod>:
 8000b74:	b97b      	cbnz	r3, 8000b96 <__aeabi_ldivmod+0x22>
 8000b76:	b972      	cbnz	r2, 8000b96 <__aeabi_ldivmod+0x22>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bfbe      	ittt	lt
 8000b7c:	2000      	movlt	r0, #0
 8000b7e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b82:	e006      	blt.n	8000b92 <__aeabi_ldivmod+0x1e>
 8000b84:	bf08      	it	eq
 8000b86:	2800      	cmpeq	r0, #0
 8000b88:	bf1c      	itt	ne
 8000b8a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b8e:	f04f 30ff 	movne.w	r0, #4294967295
 8000b92:	f000 b9c5 	b.w	8000f20 <__aeabi_idiv0>
 8000b96:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9e:	2900      	cmp	r1, #0
 8000ba0:	db09      	blt.n	8000bb6 <__aeabi_ldivmod+0x42>
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db1a      	blt.n	8000bdc <__aeabi_ldivmod+0x68>
 8000ba6:	f000 f84d 	bl	8000c44 <__udivmoddi4>
 8000baa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb2:	b004      	add	sp, #16
 8000bb4:	4770      	bx	lr
 8000bb6:	4240      	negs	r0, r0
 8000bb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db1b      	blt.n	8000bf8 <__aeabi_ldivmod+0x84>
 8000bc0:	f000 f840 	bl	8000c44 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4240      	negs	r0, r0
 8000bd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd4:	4252      	negs	r2, r2
 8000bd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bda:	4770      	bx	lr
 8000bdc:	4252      	negs	r2, r2
 8000bde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be2:	f000 f82f 	bl	8000c44 <__udivmoddi4>
 8000be6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bee:	b004      	add	sp, #16
 8000bf0:	4240      	negs	r0, r0
 8000bf2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf6:	4770      	bx	lr
 8000bf8:	4252      	negs	r2, r2
 8000bfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bfe:	f000 f821 	bl	8000c44 <__udivmoddi4>
 8000c02:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0a:	b004      	add	sp, #16
 8000c0c:	4252      	negs	r2, r2
 8000c0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c12:	4770      	bx	lr

08000c14 <__aeabi_uldivmod>:
 8000c14:	b953      	cbnz	r3, 8000c2c <__aeabi_uldivmod+0x18>
 8000c16:	b94a      	cbnz	r2, 8000c2c <__aeabi_uldivmod+0x18>
 8000c18:	2900      	cmp	r1, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	2800      	cmpeq	r0, #0
 8000c1e:	bf1c      	itt	ne
 8000c20:	f04f 31ff 	movne.w	r1, #4294967295
 8000c24:	f04f 30ff 	movne.w	r0, #4294967295
 8000c28:	f000 b97a 	b.w	8000f20 <__aeabi_idiv0>
 8000c2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c34:	f000 f806 	bl	8000c44 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4770      	bx	lr

08000c44 <__udivmoddi4>:
 8000c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c48:	468c      	mov	ip, r1
 8000c4a:	460d      	mov	r5, r1
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	9e08      	ldr	r6, [sp, #32]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d151      	bne.n	8000cf8 <__udivmoddi4+0xb4>
 8000c54:	428a      	cmp	r2, r1
 8000c56:	4617      	mov	r7, r2
 8000c58:	d96d      	bls.n	8000d36 <__udivmoddi4+0xf2>
 8000c5a:	fab2 fe82 	clz	lr, r2
 8000c5e:	f1be 0f00 	cmp.w	lr, #0
 8000c62:	d00b      	beq.n	8000c7c <__udivmoddi4+0x38>
 8000c64:	f1ce 0c20 	rsb	ip, lr, #32
 8000c68:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c6c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c70:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c74:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c78:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c7c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c80:	0c25      	lsrs	r5, r4, #16
 8000c82:	fbbc f8fa 	udiv	r8, ip, sl
 8000c86:	fa1f f987 	uxth.w	r9, r7
 8000c8a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c8e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c92:	fb08 f309 	mul.w	r3, r8, r9
 8000c96:	42ab      	cmp	r3, r5
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x6c>
 8000c9a:	19ed      	adds	r5, r5, r7
 8000c9c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ca0:	f080 8123 	bcs.w	8000eea <__udivmoddi4+0x2a6>
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	f240 8120 	bls.w	8000eea <__udivmoddi4+0x2a6>
 8000caa:	f1a8 0802 	sub.w	r8, r8, #2
 8000cae:	443d      	add	r5, r7
 8000cb0:	1aed      	subs	r5, r5, r3
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000cb8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000cbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cc0:	fb00 f909 	mul.w	r9, r0, r9
 8000cc4:	45a1      	cmp	r9, r4
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x98>
 8000cc8:	19e4      	adds	r4, r4, r7
 8000cca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cce:	f080 810a 	bcs.w	8000ee6 <__udivmoddi4+0x2a2>
 8000cd2:	45a1      	cmp	r9, r4
 8000cd4:	f240 8107 	bls.w	8000ee6 <__udivmoddi4+0x2a2>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	443c      	add	r4, r7
 8000cdc:	eba4 0409 	sub.w	r4, r4, r9
 8000ce0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d061      	beq.n	8000dae <__udivmoddi4+0x16a>
 8000cea:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cee:	2300      	movs	r3, #0
 8000cf0:	6034      	str	r4, [r6, #0]
 8000cf2:	6073      	str	r3, [r6, #4]
 8000cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xc8>
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	d054      	beq.n	8000daa <__udivmoddi4+0x166>
 8000d00:	2100      	movs	r1, #0
 8000d02:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d06:	4608      	mov	r0, r1
 8000d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0c:	fab3 f183 	clz	r1, r3
 8000d10:	2900      	cmp	r1, #0
 8000d12:	f040 808e 	bne.w	8000e32 <__udivmoddi4+0x1ee>
 8000d16:	42ab      	cmp	r3, r5
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xdc>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 80fa 	bhi.w	8000f14 <__udivmoddi4+0x2d0>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb65 0503 	sbc.w	r5, r5, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	46ac      	mov	ip, r5
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d03f      	beq.n	8000dae <__udivmoddi4+0x16a>
 8000d2e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	b912      	cbnz	r2, 8000d3e <__udivmoddi4+0xfa>
 8000d38:	2701      	movs	r7, #1
 8000d3a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d3e:	fab7 fe87 	clz	lr, r7
 8000d42:	f1be 0f00 	cmp.w	lr, #0
 8000d46:	d134      	bne.n	8000db2 <__udivmoddi4+0x16e>
 8000d48:	1beb      	subs	r3, r5, r7
 8000d4a:	0c3a      	lsrs	r2, r7, #16
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	2101      	movs	r1, #1
 8000d52:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d56:	0c25      	lsrs	r5, r4, #16
 8000d58:	fb02 3318 	mls	r3, r2, r8, r3
 8000d5c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d60:	fb0c f308 	mul.w	r3, ip, r8
 8000d64:	42ab      	cmp	r3, r5
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0x134>
 8000d68:	19ed      	adds	r5, r5, r7
 8000d6a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x132>
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	f200 80d1 	bhi.w	8000f18 <__udivmoddi4+0x2d4>
 8000d76:	4680      	mov	r8, r0
 8000d78:	1aed      	subs	r5, r5, r3
 8000d7a:	b2a3      	uxth	r3, r4
 8000d7c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d80:	fb02 5510 	mls	r5, r2, r0, r5
 8000d84:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d88:	fb0c fc00 	mul.w	ip, ip, r0
 8000d8c:	45a4      	cmp	ip, r4
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x15c>
 8000d90:	19e4      	adds	r4, r4, r7
 8000d92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x15a>
 8000d98:	45a4      	cmp	ip, r4
 8000d9a:	f200 80b8 	bhi.w	8000f0e <__udivmoddi4+0x2ca>
 8000d9e:	4618      	mov	r0, r3
 8000da0:	eba4 040c 	sub.w	r4, r4, ip
 8000da4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da8:	e79d      	b.n	8000ce6 <__udivmoddi4+0xa2>
 8000daa:	4631      	mov	r1, r6
 8000dac:	4630      	mov	r0, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	f1ce 0420 	rsb	r4, lr, #32
 8000db6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000dba:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dbe:	fa20 f804 	lsr.w	r8, r0, r4
 8000dc2:	0c3a      	lsrs	r2, r7, #16
 8000dc4:	fa25 f404 	lsr.w	r4, r5, r4
 8000dc8:	ea48 0803 	orr.w	r8, r8, r3
 8000dcc:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dd0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000dd4:	fb02 4411 	mls	r4, r2, r1, r4
 8000dd8:	fa1f fc87 	uxth.w	ip, r7
 8000ddc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000de0:	fb01 f30c 	mul.w	r3, r1, ip
 8000de4:	42ab      	cmp	r3, r5
 8000de6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x1bc>
 8000dec:	19ed      	adds	r5, r5, r7
 8000dee:	f101 30ff 	add.w	r0, r1, #4294967295
 8000df2:	f080 808a 	bcs.w	8000f0a <__udivmoddi4+0x2c6>
 8000df6:	42ab      	cmp	r3, r5
 8000df8:	f240 8087 	bls.w	8000f0a <__udivmoddi4+0x2c6>
 8000dfc:	3902      	subs	r1, #2
 8000dfe:	443d      	add	r5, r7
 8000e00:	1aeb      	subs	r3, r5, r3
 8000e02:	fa1f f588 	uxth.w	r5, r8
 8000e06:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e0a:	fb02 3310 	mls	r3, r2, r0, r3
 8000e0e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e12:	fb00 f30c 	mul.w	r3, r0, ip
 8000e16:	42ab      	cmp	r3, r5
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x1e6>
 8000e1a:	19ed      	adds	r5, r5, r7
 8000e1c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e20:	d26f      	bcs.n	8000f02 <__udivmoddi4+0x2be>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	d96d      	bls.n	8000f02 <__udivmoddi4+0x2be>
 8000e26:	3802      	subs	r0, #2
 8000e28:	443d      	add	r5, r7
 8000e2a:	1aeb      	subs	r3, r5, r3
 8000e2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e30:	e78f      	b.n	8000d52 <__udivmoddi4+0x10e>
 8000e32:	f1c1 0720 	rsb	r7, r1, #32
 8000e36:	fa22 f807 	lsr.w	r8, r2, r7
 8000e3a:	408b      	lsls	r3, r1
 8000e3c:	fa05 f401 	lsl.w	r4, r5, r1
 8000e40:	ea48 0303 	orr.w	r3, r8, r3
 8000e44:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e48:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e4c:	40fd      	lsrs	r5, r7
 8000e4e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e52:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e56:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e5a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e5e:	fa1f f883 	uxth.w	r8, r3
 8000e62:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e66:	fb09 f408 	mul.w	r4, r9, r8
 8000e6a:	42ac      	cmp	r4, r5
 8000e6c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e70:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x244>
 8000e76:	18ed      	adds	r5, r5, r3
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d243      	bcs.n	8000f06 <__udivmoddi4+0x2c2>
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	d941      	bls.n	8000f06 <__udivmoddi4+0x2c2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	441d      	add	r5, r3
 8000e88:	1b2d      	subs	r5, r5, r4
 8000e8a:	fa1f fe8e 	uxth.w	lr, lr
 8000e8e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e92:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e96:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45a0      	cmp	r8, r4
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x26e>
 8000ea2:	18e4      	adds	r4, r4, r3
 8000ea4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ea8:	d229      	bcs.n	8000efe <__udivmoddi4+0x2ba>
 8000eaa:	45a0      	cmp	r8, r4
 8000eac:	d927      	bls.n	8000efe <__udivmoddi4+0x2ba>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	441c      	add	r4, r3
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba4 0408 	sub.w	r4, r4, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	464d      	mov	r5, r9
 8000ec4:	d315      	bcc.n	8000ef2 <__udivmoddi4+0x2ae>
 8000ec6:	d012      	beq.n	8000eee <__udivmoddi4+0x2aa>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x29c>
 8000eca:	ebba 030e 	subs.w	r3, sl, lr
 8000ece:	eb64 0405 	sbc.w	r4, r4, r5
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40cb      	lsrs	r3, r1
 8000ed8:	431f      	orrs	r7, r3
 8000eda:	40cc      	lsrs	r4, r1
 8000edc:	6037      	str	r7, [r6, #0]
 8000ede:	6074      	str	r4, [r6, #4]
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	e6f8      	b.n	8000cdc <__udivmoddi4+0x98>
 8000eea:	4690      	mov	r8, r2
 8000eec:	e6e0      	b.n	8000cb0 <__udivmoddi4+0x6c>
 8000eee:	45c2      	cmp	sl, r8
 8000ef0:	d2ea      	bcs.n	8000ec8 <__udivmoddi4+0x284>
 8000ef2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef6:	eb69 0503 	sbc.w	r5, r9, r3
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7e4      	b.n	8000ec8 <__udivmoddi4+0x284>
 8000efe:	4628      	mov	r0, r5
 8000f00:	e7d7      	b.n	8000eb2 <__udivmoddi4+0x26e>
 8000f02:	4640      	mov	r0, r8
 8000f04:	e791      	b.n	8000e2a <__udivmoddi4+0x1e6>
 8000f06:	4681      	mov	r9, r0
 8000f08:	e7be      	b.n	8000e88 <__udivmoddi4+0x244>
 8000f0a:	4601      	mov	r1, r0
 8000f0c:	e778      	b.n	8000e00 <__udivmoddi4+0x1bc>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	e745      	b.n	8000da0 <__udivmoddi4+0x15c>
 8000f14:	4608      	mov	r0, r1
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xe6>
 8000f18:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1c:	443d      	add	r5, r7
 8000f1e:	e72b      	b.n	8000d78 <__udivmoddi4+0x134>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_Init+0x30>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f2e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f36:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f3e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 f82f 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f004 fc6e 	bl	8005828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f004 fb2a 	bl	80055a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000f50:	2000      	movs	r0, #0
 8000f52:	bd08      	pop	{r3, pc}
 8000f54:	40023c00 	.word	0x40023c00

08000f58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f58:	4a03      	ldr	r2, [pc, #12]	; (8000f68 <HAL_IncTick+0x10>)
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <HAL_IncTick+0x14>)
 8000f5c:	6811      	ldr	r1, [r2, #0]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	440b      	add	r3, r1
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	200040a4 	.word	0x200040a4
 8000f6c:	20000000 	.word	0x20000000

08000f70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f70:	4b01      	ldr	r3, [pc, #4]	; (8000f78 <HAL_GetTick+0x8>)
 8000f72:	6818      	ldr	r0, [r3, #0]
}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	200040a4 	.word	0x200040a4

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b538      	push	{r3, r4, r5, lr}
 8000f7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff fff6 	bl	8000f70 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f84:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f86:	bf1c      	itt	ne
 8000f88:	4b05      	ldrne	r3, [pc, #20]	; (8000fa0 <HAL_Delay+0x24>)
 8000f8a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	bf18      	it	ne
 8000f90:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f92:	f7ff ffed 	bl	8000f70 <HAL_GetTick>
 8000f96:	1b40      	subs	r0, r0, r5
 8000f98:	4284      	cmp	r4, r0
 8000f9a:	d8fa      	bhi.n	8000f92 <HAL_Delay+0x16>
  {
  }
}
 8000f9c:	bd38      	pop	{r3, r4, r5, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000000 	.word	0x20000000

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000fa6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fac:	041b      	lsls	r3, r3, #16
 8000fae:	0c1b      	lsrs	r3, r3, #16
 8000fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fb4:	0200      	lsls	r0, r0, #8
 8000fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000fbe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000fc0:	60d3      	str	r3, [r2, #12]
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fca:	b530      	push	{r4, r5, lr}
 8000fcc:	68dc      	ldr	r4, [r3, #12]
 8000fce:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	bf28      	it	cs
 8000fdc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 0501 	mov.w	r5, #1
 8000fe4:	fa05 f303 	lsl.w	r3, r5, r3
 8000fe8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fec:	bf8c      	ite	hi
 8000fee:	3c03      	subhi	r4, #3
 8000ff0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff2:	4019      	ands	r1, r3
 8000ff4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff6:	fa05 f404 	lsl.w	r4, r5, r4
 8000ffa:	3c01      	subs	r4, #1
 8000ffc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ffe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	ea42 0201 	orr.w	r2, r2, r1
 8001004:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	bfaf      	iteee	ge
 800100a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	f000 000f 	andlt.w	r0, r0, #15
 8001012:	4b06      	ldrlt	r3, [pc, #24]	; (800102c <HAL_NVIC_SetPriority+0x64>)
 8001014:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	bfa5      	ittet	ge
 8001018:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800101c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001024:	bd30      	pop	{r4, r5, pc}
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00
 800102c:	e000ed14 	.word	0xe000ed14

08001030 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001030:	0942      	lsrs	r2, r0, #5
 8001032:	2301      	movs	r3, #1
 8001034:	f000 001f 	and.w	r0, r0, #31
 8001038:	fa03 f000 	lsl.w	r0, r3, r0
 800103c:	4b01      	ldr	r3, [pc, #4]	; (8001044 <HAL_NVIC_EnableIRQ+0x14>)
 800103e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100

08001048 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	3801      	subs	r0, #1
 800104a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800104e:	d20a      	bcs.n	8001066 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001054:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	21f0      	movs	r1, #240	; 0xf0
 8001058:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e010 	.word	0xe000e010
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001076:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001078:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800107a:	bf0c      	ite	eq
 800107c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001080:	f022 0204 	bicne.w	r2, r2, #4
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	4770      	bx	lr
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001090:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001092:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001094:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001244 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001098:	4a68      	ldr	r2, [pc, #416]	; (800123c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001248 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80010a2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a6:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80010a8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ac:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80010b0:	45b6      	cmp	lr, r6
 80010b2:	f040 80ae 	bne.w	8001212 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b6:	684c      	ldr	r4, [r1, #4]
 80010b8:	f024 0710 	bic.w	r7, r4, #16
 80010bc:	2f02      	cmp	r7, #2
 80010be:	d116      	bne.n	80010ee <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80010c0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80010c4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80010cc:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80010d4:	f04f 0c0f 	mov.w	ip, #15
 80010d8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80010dc:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e0:	690d      	ldr	r5, [r1, #16]
 80010e2:	fa05 f50b 	lsl.w	r5, r5, fp
 80010e6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80010ea:	f8ca 5020 	str.w	r5, [sl, #32]
 80010ee:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80010f4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f8:	fa05 f50a 	lsl.w	r5, r5, sl
 80010fc:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010fe:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001102:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001106:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800110a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001110:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001112:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001116:	d811      	bhi.n	800113c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001118:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800111a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800111e:	68cf      	ldr	r7, [r1, #12]
 8001120:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001124:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001128:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800112a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800112c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001130:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001134:	409f      	lsls	r7, r3
 8001136:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800113a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800113c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001140:	688f      	ldr	r7, [r1, #8]
 8001142:	fa07 f70a 	lsl.w	r7, r7, sl
 8001146:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001148:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800114a:	00e5      	lsls	r5, r4, #3
 800114c:	d561      	bpl.n	8001212 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	f04f 0b00 	mov.w	fp, #0
 8001152:	f8cd b00c 	str.w	fp, [sp, #12]
 8001156:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115a:	4d39      	ldr	r5, [pc, #228]	; (8001240 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001160:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001164:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001168:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800116c:	9703      	str	r7, [sp, #12]
 800116e:	9f03      	ldr	r7, [sp, #12]
 8001170:	f023 0703 	bic.w	r7, r3, #3
 8001174:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001178:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800117c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001180:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001184:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001188:	f04f 0e0f 	mov.w	lr, #15
 800118c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001190:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001192:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001196:	d043      	beq.n	8001220 <HAL_GPIO_Init+0x194>
 8001198:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800119c:	42a8      	cmp	r0, r5
 800119e:	d041      	beq.n	8001224 <HAL_GPIO_Init+0x198>
 80011a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011a4:	42a8      	cmp	r0, r5
 80011a6:	d03f      	beq.n	8001228 <HAL_GPIO_Init+0x19c>
 80011a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011ac:	42a8      	cmp	r0, r5
 80011ae:	d03d      	beq.n	800122c <HAL_GPIO_Init+0x1a0>
 80011b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011b4:	42a8      	cmp	r0, r5
 80011b6:	d03b      	beq.n	8001230 <HAL_GPIO_Init+0x1a4>
 80011b8:	4548      	cmp	r0, r9
 80011ba:	d03b      	beq.n	8001234 <HAL_GPIO_Init+0x1a8>
 80011bc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80011c0:	42a8      	cmp	r0, r5
 80011c2:	d039      	beq.n	8001238 <HAL_GPIO_Init+0x1ac>
 80011c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011c8:	42a8      	cmp	r0, r5
 80011ca:	bf14      	ite	ne
 80011cc:	2508      	movne	r5, #8
 80011ce:	2507      	moveq	r5, #7
 80011d0:	fa05 f50c 	lsl.w	r5, r5, ip
 80011d4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d8:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80011da:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011de:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80011e2:	bf0c      	ite	eq
 80011e4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011e6:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80011e8:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80011ea:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ec:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80011f0:	bf0c      	ite	eq
 80011f2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011f4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80011f6:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f8:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011fa:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80011fe:	bf0c      	ite	eq
 8001200:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001202:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001204:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001206:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001208:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800120a:	bf54      	ite	pl
 800120c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800120e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001210:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001212:	3301      	adds	r3, #1
 8001214:	2b10      	cmp	r3, #16
 8001216:	f47f af44 	bne.w	80010a2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800121a:	b005      	add	sp, #20
 800121c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001220:	465d      	mov	r5, fp
 8001222:	e7d5      	b.n	80011d0 <HAL_GPIO_Init+0x144>
 8001224:	2501      	movs	r5, #1
 8001226:	e7d3      	b.n	80011d0 <HAL_GPIO_Init+0x144>
 8001228:	2502      	movs	r5, #2
 800122a:	e7d1      	b.n	80011d0 <HAL_GPIO_Init+0x144>
 800122c:	2503      	movs	r5, #3
 800122e:	e7cf      	b.n	80011d0 <HAL_GPIO_Init+0x144>
 8001230:	2504      	movs	r5, #4
 8001232:	e7cd      	b.n	80011d0 <HAL_GPIO_Init+0x144>
 8001234:	2505      	movs	r5, #5
 8001236:	e7cb      	b.n	80011d0 <HAL_GPIO_Init+0x144>
 8001238:	2506      	movs	r5, #6
 800123a:	e7c9      	b.n	80011d0 <HAL_GPIO_Init+0x144>
 800123c:	40013c00 	.word	0x40013c00
 8001240:	40020000 	.word	0x40020000
 8001244:	40023800 	.word	0x40023800
 8001248:	40021400 	.word	0x40021400

0800124c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800124c:	6903      	ldr	r3, [r0, #16]
 800124e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001250:	bf14      	ite	ne
 8001252:	2001      	movne	r0, #1
 8001254:	2000      	moveq	r0, #0
 8001256:	4770      	bx	lr

08001258 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001258:	b10a      	cbz	r2, 800125e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125a:	6181      	str	r1, [r0, #24]
 800125c:	4770      	bx	lr
 800125e:	0409      	lsls	r1, r1, #16
 8001260:	e7fb      	b.n	800125a <HAL_GPIO_WritePin+0x2>

08001262 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001262:	6943      	ldr	r3, [r0, #20]
 8001264:	4059      	eors	r1, r3
 8001266:	6141      	str	r1, [r0, #20]
 8001268:	4770      	bx	lr

0800126a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800126a:	6802      	ldr	r2, [r0, #0]
 800126c:	6953      	ldr	r3, [r2, #20]
 800126e:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001272:	d00d      	beq.n	8001290 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001274:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001278:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800127a:	2304      	movs	r3, #4
 800127c:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800127e:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001280:	2300      	movs	r3, #0
 8001282:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001284:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001288:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800128c:	2001      	movs	r0, #1
 800128e:	4770      	bx	lr
  }
  return HAL_OK;
 8001290:	4618      	mov	r0, r3
}
 8001292:	4770      	bx	lr

08001294 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001298:	4604      	mov	r4, r0
 800129a:	4617      	mov	r7, r2
 800129c:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800129e:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80012a2:	b28e      	uxth	r6, r1
 80012a4:	6825      	ldr	r5, [r4, #0]
 80012a6:	f1b8 0f01 	cmp.w	r8, #1
 80012aa:	bf0c      	ite	eq
 80012ac:	696b      	ldreq	r3, [r5, #20]
 80012ae:	69ab      	ldrne	r3, [r5, #24]
 80012b0:	ea36 0303 	bics.w	r3, r6, r3
 80012b4:	bf14      	ite	ne
 80012b6:	2001      	movne	r0, #1
 80012b8:	2000      	moveq	r0, #0
 80012ba:	b908      	cbnz	r0, 80012c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80012bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012c0:	696b      	ldr	r3, [r5, #20]
 80012c2:	055a      	lsls	r2, r3, #21
 80012c4:	d512      	bpl.n	80012ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80012c6:	682b      	ldr	r3, [r5, #0]
 80012c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012cc:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012ce:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80012d2:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80012d4:	2304      	movs	r3, #4
 80012d6:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80012d8:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80012da:	2300      	movs	r3, #0
 80012dc:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80012de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80012e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80012e6:	2001      	movs	r0, #1
 80012e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012ec:	1c7b      	adds	r3, r7, #1
 80012ee:	d0d9      	beq.n	80012a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80012f0:	b94f      	cbnz	r7, 8001306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 80012f2:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80012f4:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80012f6:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80012f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80012fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001300:	2003      	movs	r0, #3
 8001302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001306:	f7ff fe33 	bl	8000f70 <HAL_GetTick>
 800130a:	eba0 0009 	sub.w	r0, r0, r9
 800130e:	4287      	cmp	r7, r0
 8001310:	d2c8      	bcs.n	80012a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001312:	e7ee      	b.n	80012f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001314 <I2C_WaitOnFlagUntilTimeout>:
{
 8001314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001318:	9e08      	ldr	r6, [sp, #32]
 800131a:	4604      	mov	r4, r0
 800131c:	4690      	mov	r8, r2
 800131e:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001320:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001324:	b28d      	uxth	r5, r1
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	f1b9 0f01 	cmp.w	r9, #1
 800132c:	bf0c      	ite	eq
 800132e:	695b      	ldreq	r3, [r3, #20]
 8001330:	699b      	ldrne	r3, [r3, #24]
 8001332:	ea35 0303 	bics.w	r3, r5, r3
 8001336:	bf0c      	ite	eq
 8001338:	2301      	moveq	r3, #1
 800133a:	2300      	movne	r3, #0
 800133c:	4543      	cmp	r3, r8
 800133e:	d002      	beq.n	8001346 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001340:	2000      	movs	r0, #0
}
 8001342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001346:	1c7b      	adds	r3, r7, #1
 8001348:	d0ed      	beq.n	8001326 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800134a:	b95f      	cbnz	r7, 8001364 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 800134c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800134e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001350:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001352:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001356:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800135a:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800135c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001364:	f7ff fe04 	bl	8000f70 <HAL_GetTick>
 8001368:	1b80      	subs	r0, r0, r6
 800136a:	4287      	cmp	r7, r0
 800136c:	d2db      	bcs.n	8001326 <I2C_WaitOnFlagUntilTimeout+0x12>
 800136e:	e7ed      	b.n	800134c <I2C_WaitOnFlagUntilTimeout+0x38>

08001370 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	4604      	mov	r4, r0
 8001374:	460d      	mov	r5, r1
 8001376:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	061b      	lsls	r3, r3, #24
 800137e:	d501      	bpl.n	8001384 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001380:	2000      	movs	r0, #0
 8001382:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001384:	4620      	mov	r0, r4
 8001386:	f7ff ff70 	bl	800126a <I2C_IsAcknowledgeFailed>
 800138a:	b9a8      	cbnz	r0, 80013b8 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	d0f3      	beq.n	8001378 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001390:	b965      	cbnz	r5, 80013ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001394:	f043 0320 	orr.w	r3, r3, #32
 8001398:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800139a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800139c:	2300      	movs	r3, #0
 800139e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80013a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80013a4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80013a8:	2003      	movs	r0, #3
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013ac:	f7ff fde0 	bl	8000f70 <HAL_GetTick>
 80013b0:	1b80      	subs	r0, r0, r6
 80013b2:	4285      	cmp	r5, r0
 80013b4:	d2e0      	bcs.n	8001378 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80013b6:	e7ec      	b.n	8001392 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80013b8:	2001      	movs	r0, #1
}
 80013ba:	bd70      	pop	{r4, r5, r6, pc}

080013bc <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	4604      	mov	r4, r0
 80013c0:	460d      	mov	r5, r1
 80013c2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80013c4:	6820      	ldr	r0, [r4, #0]
 80013c6:	6943      	ldr	r3, [r0, #20]
 80013c8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80013cc:	d001      	beq.n	80013d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80013ce:	2000      	movs	r0, #0
}
 80013d0:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80013d2:	6942      	ldr	r2, [r0, #20]
 80013d4:	06d2      	lsls	r2, r2, #27
 80013d6:	d50b      	bpl.n	80013f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013d8:	f06f 0210 	mvn.w	r2, #16
 80013dc:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 80013de:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e0:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 80013e6:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80013e8:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 80013ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80013ee:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013f0:	b95d      	cbnz	r5, 800140a <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013f4:	f043 0320 	orr.w	r3, r3, #32
 80013f8:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80013fa:	2320      	movs	r3, #32
 80013fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001400:	2300      	movs	r3, #0
 8001402:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001406:	2003      	movs	r0, #3
 8001408:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800140a:	f7ff fdb1 	bl	8000f70 <HAL_GetTick>
 800140e:	1b80      	subs	r0, r0, r6
 8001410:	4285      	cmp	r5, r0
 8001412:	d2d7      	bcs.n	80013c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001414:	e7ed      	b.n	80013f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001416 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001416:	b570      	push	{r4, r5, r6, lr}
 8001418:	4604      	mov	r4, r0
 800141a:	460d      	mov	r5, r1
 800141c:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800141e:	6823      	ldr	r3, [r4, #0]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	075b      	lsls	r3, r3, #29
 8001424:	d501      	bpl.n	800142a <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001426:	2000      	movs	r0, #0
 8001428:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800142a:	4620      	mov	r0, r4
 800142c:	f7ff ff1d 	bl	800126a <I2C_IsAcknowledgeFailed>
 8001430:	b9a8      	cbnz	r0, 800145e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001432:	1c6a      	adds	r2, r5, #1
 8001434:	d0f3      	beq.n	800141e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001436:	b965      	cbnz	r5, 8001452 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001438:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800143a:	f043 0320 	orr.w	r3, r3, #32
 800143e:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001440:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001442:	2300      	movs	r3, #0
 8001444:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001446:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800144a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800144e:	2003      	movs	r0, #3
 8001450:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001452:	f7ff fd8d 	bl	8000f70 <HAL_GetTick>
 8001456:	1b80      	subs	r0, r0, r6
 8001458:	4285      	cmp	r5, r0
 800145a:	d2e0      	bcs.n	800141e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 800145c:	e7ec      	b.n	8001438 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800145e:	2001      	movs	r0, #1
}
 8001460:	bd70      	pop	{r4, r5, r6, pc}
	...

08001464 <HAL_I2C_Init>:
{
 8001464:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8001466:	4604      	mov	r4, r0
 8001468:	2800      	cmp	r0, #0
 800146a:	d062      	beq.n	8001532 <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800146c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001470:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001474:	b91b      	cbnz	r3, 800147e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001476:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800147a:	f004 f8c3 	bl	8005604 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 800147e:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001480:	4e2d      	ldr	r6, [pc, #180]	; (8001538 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001482:	4d2e      	ldr	r5, [pc, #184]	; (800153c <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001484:	2324      	movs	r3, #36	; 0x24
 8001486:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800148a:	6813      	ldr	r3, [r2, #0]
 800148c:	f023 0301 	bic.w	r3, r3, #1
 8001490:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001492:	f001 f93d 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001496:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001498:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800149a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800149e:	42b3      	cmp	r3, r6
 80014a0:	bf84      	itt	hi
 80014a2:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80014a6:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80014a8:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014aa:	bf91      	iteee	ls
 80014ac:	1c69      	addls	r1, r5, #1
 80014ae:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80014b2:	fbb1 f1f5 	udivhi	r1, r1, r5
 80014b6:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80014b8:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014ba:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80014bc:	d821      	bhi.n	8001502 <HAL_I2C_Init+0x9e>
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80014c4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	bf98      	it	ls
 80014cc:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014ce:	6a21      	ldr	r1, [r4, #32]
 80014d0:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80014d2:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014d4:	430b      	orrs	r3, r1
 80014d6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80014d8:	68e1      	ldr	r1, [r4, #12]
 80014da:	6923      	ldr	r3, [r4, #16]
 80014dc:	430b      	orrs	r3, r1
 80014de:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80014e0:	69a1      	ldr	r1, [r4, #24]
 80014e2:	6963      	ldr	r3, [r4, #20]
 80014e4:	430b      	orrs	r3, r1
 80014e6:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80014e8:	6813      	ldr	r3, [r2, #0]
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f0:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80014f2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014fa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014fc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001500:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001502:	68a1      	ldr	r1, [r4, #8]
 8001504:	b949      	cbnz	r1, 800151a <HAL_I2C_Init+0xb6>
 8001506:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800150a:	fbb0 f0f3 	udiv	r0, r0, r3
 800150e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001512:	b163      	cbz	r3, 800152e <HAL_I2C_Init+0xca>
 8001514:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001518:	e7d9      	b.n	80014ce <HAL_I2C_Init+0x6a>
 800151a:	2119      	movs	r1, #25
 800151c:	434b      	muls	r3, r1
 800151e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001522:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001526:	b113      	cbz	r3, 800152e <HAL_I2C_Init+0xca>
 8001528:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800152c:	e7cf      	b.n	80014ce <HAL_I2C_Init+0x6a>
 800152e:	2001      	movs	r0, #1
 8001530:	e7cd      	b.n	80014ce <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001532:	2001      	movs	r0, #1
}
 8001534:	bd70      	pop	{r4, r5, r6, pc}
 8001536:	bf00      	nop
 8001538:	000186a0 	.word	0x000186a0
 800153c:	000f4240 	.word	0x000f4240

08001540 <HAL_I2C_Master_Transmit>:
{
 8001540:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001544:	4604      	mov	r4, r0
 8001546:	461f      	mov	r7, r3
 8001548:	460d      	mov	r5, r1
 800154a:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 800154c:	f7ff fd10 	bl	8000f70 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001550:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001554:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001556:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001558:	d004      	beq.n	8001564 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800155a:	2502      	movs	r5, #2
}
 800155c:	4628      	mov	r0, r5
 800155e:	b004      	add	sp, #16
 8001560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001564:	9000      	str	r0, [sp, #0]
 8001566:	2319      	movs	r3, #25
 8001568:	2201      	movs	r2, #1
 800156a:	495d      	ldr	r1, [pc, #372]	; (80016e0 <HAL_I2C_Master_Transmit+0x1a0>)
 800156c:	4620      	mov	r0, r4
 800156e:	f7ff fed1 	bl	8001314 <I2C_WaitOnFlagUntilTimeout>
 8001572:	2800      	cmp	r0, #0
 8001574:	d1f1      	bne.n	800155a <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001576:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800157a:	2b01      	cmp	r3, #1
 800157c:	d0ed      	beq.n	800155a <HAL_I2C_Master_Transmit+0x1a>
 800157e:	2301      	movs	r3, #1
 8001580:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001584:	6823      	ldr	r3, [r4, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800158a:	bf5e      	ittt	pl
 800158c:	681a      	ldrpl	r2, [r3, #0]
 800158e:	f042 0201 	orrpl.w	r2, r2, #1
 8001592:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800159a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800159c:	2221      	movs	r2, #33	; 0x21
 800159e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015a2:	2210      	movs	r2, #16
 80015a4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a8:	2200      	movs	r2, #0
 80015aa:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015ac:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80015b0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015b2:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80015b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80015b6:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80015ba:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015be:	2a04      	cmp	r2, #4
 80015c0:	d004      	beq.n	80015cc <HAL_I2C_Master_Transmit+0x8c>
 80015c2:	2a01      	cmp	r2, #1
 80015c4:	d002      	beq.n	80015cc <HAL_I2C_Master_Transmit+0x8c>
 80015c6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80015ca:	d104      	bne.n	80015d6 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e002      	b.n	80015dc <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80015d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80015d8:	2a12      	cmp	r2, #18
 80015da:	d0f7      	beq.n	80015cc <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015dc:	9600      	str	r6, [sp, #0]
 80015de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015e0:	2200      	movs	r2, #0
 80015e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015e6:	4620      	mov	r0, r4
 80015e8:	f7ff fe94 	bl	8001314 <I2C_WaitOnFlagUntilTimeout>
 80015ec:	bb28      	cbnz	r0, 800163a <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015ee:	6923      	ldr	r3, [r4, #16]
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015f6:	d112      	bne.n	800161e <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015f8:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80015fc:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015fe:	4633      	mov	r3, r6
 8001600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001602:	4938      	ldr	r1, [pc, #224]	; (80016e4 <HAL_I2C_Master_Transmit+0x1a4>)
 8001604:	4620      	mov	r0, r4
 8001606:	f7ff fe45 	bl	8001294 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800160a:	4605      	mov	r5, r0
 800160c:	b9a0      	cbnz	r0, 8001638 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	9003      	str	r0, [sp, #12]
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	9203      	str	r2, [sp, #12]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	9303      	str	r3, [sp, #12]
 800161a:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 800161c:	e050      	b.n	80016c0 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800161e:	11eb      	asrs	r3, r5, #7
 8001620:	f003 0306 	and.w	r3, r3, #6
 8001624:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001628:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800162a:	492f      	ldr	r1, [pc, #188]	; (80016e8 <HAL_I2C_Master_Transmit+0x1a8>)
 800162c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800162e:	4633      	mov	r3, r6
 8001630:	4620      	mov	r0, r4
 8001632:	f7ff fe2f 	bl	8001294 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001636:	b148      	cbz	r0, 800164c <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001638:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800163a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800163c:	2b04      	cmp	r3, #4
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	d107      	bne.n	8001654 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8001644:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001648:	2501      	movs	r5, #1
 800164a:	e787      	b.n	800155c <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800164c:	6823      	ldr	r3, [r4, #0]
 800164e:	b2ed      	uxtb	r5, r5
 8001650:	611d      	str	r5, [r3, #16]
 8001652:	e7d4      	b.n	80015fe <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8001654:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001658:	2503      	movs	r5, #3
 800165a:	e77f      	b.n	800155c <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800165c:	4632      	mov	r2, r6
 800165e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001660:	4620      	mov	r0, r4
 8001662:	f7ff fe85 	bl	8001370 <I2C_WaitOnTXEFlagUntilTimeout>
 8001666:	b140      	cbz	r0, 800167a <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001668:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800166a:	2b04      	cmp	r3, #4
 800166c:	d1f4      	bne.n	8001658 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800166e:	6822      	ldr	r2, [r4, #0]
 8001670:	6813      	ldr	r3, [r2, #0]
 8001672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	e7e6      	b.n	8001648 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800167a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800167c:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 800167e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001680:	1c4b      	adds	r3, r1, #1
 8001682:	6263      	str	r3, [r4, #36]	; 0x24
 8001684:	780b      	ldrb	r3, [r1, #0]
 8001686:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8001688:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800168a:	3b01      	subs	r3, #1
 800168c:	b29b      	uxth	r3, r3
 800168e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001690:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001692:	1e53      	subs	r3, r2, #1
 8001694:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001696:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001698:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800169a:	d50a      	bpl.n	80016b2 <HAL_I2C_Master_Transmit+0x172>
 800169c:	b14b      	cbz	r3, 80016b2 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800169e:	1c8b      	adds	r3, r1, #2
 80016a0:	6263      	str	r3, [r4, #36]	; 0x24
 80016a2:	784b      	ldrb	r3, [r1, #1]
 80016a4:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80016a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80016ac:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80016ae:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80016b0:	8522      	strh	r2, [r4, #40]	; 0x28
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016b2:	4632      	mov	r2, r6
 80016b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80016b6:	4620      	mov	r0, r4
 80016b8:	f7ff fead 	bl	8001416 <I2C_WaitOnBTFFlagUntilTimeout>
 80016bc:	2800      	cmp	r0, #0
 80016be:	d1d3      	bne.n	8001668 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80016c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1ca      	bne.n	800165c <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016c6:	6821      	ldr	r1, [r4, #0]
 80016c8:	680a      	ldr	r2, [r1, #0]
 80016ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ce:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80016d0:	2220      	movs	r2, #32
 80016d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80016d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80016de:	e73d      	b.n	800155c <HAL_I2C_Master_Transmit+0x1c>
 80016e0:	00100002 	.word	0x00100002
 80016e4:	00010002 	.word	0x00010002
 80016e8:	00010008 	.word	0x00010008

080016ec <HAL_I2C_Master_Receive>:
{
 80016ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016f0:	4604      	mov	r4, r0
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	4698      	mov	r8, r3
 80016f6:	460d      	mov	r5, r1
 80016f8:	4691      	mov	r9, r2
 80016fa:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 80016fc:	f7ff fc38 	bl	8000f70 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001700:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001704:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001706:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001708:	d004      	beq.n	8001714 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 800170a:	2502      	movs	r5, #2
}
 800170c:	4628      	mov	r0, r5
 800170e:	b009      	add	sp, #36	; 0x24
 8001710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001714:	9000      	str	r0, [sp, #0]
 8001716:	2319      	movs	r3, #25
 8001718:	2201      	movs	r2, #1
 800171a:	499c      	ldr	r1, [pc, #624]	; (800198c <HAL_I2C_Master_Receive+0x2a0>)
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff fdf9 	bl	8001314 <I2C_WaitOnFlagUntilTimeout>
 8001722:	2800      	cmp	r0, #0
 8001724:	d1f1      	bne.n	800170a <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001726:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800172a:	2b01      	cmp	r3, #1
 800172c:	d0ed      	beq.n	800170a <HAL_I2C_Master_Receive+0x1e>
 800172e:	2301      	movs	r3, #1
 8001730:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800173a:	bf5e      	ittt	pl
 800173c:	681a      	ldrpl	r2, [r3, #0]
 800173e:	f042 0201 	orrpl.w	r2, r2, #1
 8001742:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174a:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800174c:	2222      	movs	r2, #34	; 0x22
 800174e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001752:	2210      	movs	r2, #16
 8001754:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001758:	2200      	movs	r2, #0
 800175a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800175c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001760:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001764:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001766:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001768:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800176a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800176c:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 800176e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001772:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001776:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001778:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800177a:	d004      	beq.n	8001786 <HAL_I2C_Master_Receive+0x9a>
 800177c:	2a01      	cmp	r2, #1
 800177e:	d002      	beq.n	8001786 <HAL_I2C_Master_Receive+0x9a>
 8001780:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001784:	d104      	bne.n	8001790 <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e002      	b.n	8001796 <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001790:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001792:	2a11      	cmp	r2, #17
 8001794:	d0f7      	beq.n	8001786 <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001796:	9600      	str	r6, [sp, #0]
 8001798:	463b      	mov	r3, r7
 800179a:	2200      	movs	r2, #0
 800179c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7ff fdb7 	bl	8001314 <I2C_WaitOnFlagUntilTimeout>
 80017a6:	2800      	cmp	r0, #0
 80017a8:	d14a      	bne.n	8001840 <HAL_I2C_Master_Receive+0x154>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017aa:	6923      	ldr	r3, [r4, #16]
 80017ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	d136      	bne.n	8001822 <HAL_I2C_Master_Receive+0x136>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80017b4:	f045 0501 	orr.w	r5, r5, #1
 80017b8:	b2ed      	uxtb	r5, r5
 80017ba:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017bc:	4633      	mov	r3, r6
 80017be:	463a      	mov	r2, r7
 80017c0:	4973      	ldr	r1, [pc, #460]	; (8001990 <HAL_I2C_Master_Receive+0x2a4>)
 80017c2:	4620      	mov	r0, r4
 80017c4:	f7ff fd66 	bl	8001294 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017c8:	4605      	mov	r5, r0
 80017ca:	2800      	cmp	r0, #0
 80017cc:	d137      	bne.n	800183e <HAL_I2C_Master_Receive+0x152>
    if(hi2c->XferSize == 0U)
 80017ce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	d066      	beq.n	80018a4 <HAL_I2C_Master_Receive+0x1b8>
    else if(hi2c->XferSize == 1U)
 80017d6:	2a01      	cmp	r2, #1
 80017d8:	d177      	bne.n	80018ca <HAL_I2C_Master_Receive+0x1de>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017e2:	9504      	str	r5, [sp, #16]
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	9204      	str	r2, [sp, #16]
 80017e8:	699a      	ldr	r2, [r3, #24]
 80017ea:	9204      	str	r2, [sp, #16]
 80017ec:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f4:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017f6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8001998 <HAL_I2C_Master_Receive+0x2ac>
    while(hi2c->XferSize > 0U)
 80017fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d05b      	beq.n	80018b8 <HAL_I2C_Master_Receive+0x1cc>
      if(hi2c->XferSize <= 3U)
 8001800:	2b03      	cmp	r3, #3
 8001802:	f200 80cb 	bhi.w	800199c <HAL_I2C_Master_Receive+0x2b0>
        if(hi2c->XferSize == 1U)
 8001806:	2b01      	cmp	r3, #1
 8001808:	d17a      	bne.n	8001900 <HAL_I2C_Master_Receive+0x214>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800180a:	4632      	mov	r2, r6
 800180c:	4639      	mov	r1, r7
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff fdd4 	bl	80013bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001814:	2800      	cmp	r0, #0
 8001816:	f000 8090 	beq.w	800193a <HAL_I2C_Master_Receive+0x24e>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800181a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800181c:	2b20      	cmp	r3, #32
 800181e:	d116      	bne.n	800184e <HAL_I2C_Master_Receive+0x162>
 8001820:	e03e      	b.n	80018a0 <HAL_I2C_Master_Receive+0x1b4>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001822:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001826:	f008 0806 	and.w	r8, r8, #6
 800182a:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800182e:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001830:	4958      	ldr	r1, [pc, #352]	; (8001994 <HAL_I2C_Master_Receive+0x2a8>)
 8001832:	4633      	mov	r3, r6
 8001834:	463a      	mov	r2, r7
 8001836:	4620      	mov	r0, r4
 8001838:	f7ff fd2c 	bl	8001294 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800183c:	b148      	cbz	r0, 8001852 <HAL_I2C_Master_Receive+0x166>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800183e:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001840:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001842:	2b04      	cmp	r3, #4
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	d128      	bne.n	800189c <HAL_I2C_Master_Receive+0x1b0>
        __HAL_UNLOCK(hi2c);
 800184a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 800184e:	2501      	movs	r5, #1
 8001850:	e75c      	b.n	800170c <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001852:	6823      	ldr	r3, [r4, #0]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001854:	494e      	ldr	r1, [pc, #312]	; (8001990 <HAL_I2C_Master_Receive+0x2a4>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001856:	b2ed      	uxtb	r5, r5
 8001858:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800185a:	463a      	mov	r2, r7
 800185c:	4633      	mov	r3, r6
 800185e:	4620      	mov	r0, r4
 8001860:	f7ff fd18 	bl	8001294 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001864:	4602      	mov	r2, r0
 8001866:	2800      	cmp	r0, #0
 8001868:	d1e9      	bne.n	800183e <HAL_I2C_Master_Receive+0x152>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	9007      	str	r0, [sp, #28]
 800186e:	6959      	ldr	r1, [r3, #20]
 8001870:	9107      	str	r1, [sp, #28]
 8001872:	6999      	ldr	r1, [r3, #24]
 8001874:	9107      	str	r1, [sp, #28]
 8001876:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001878:	6819      	ldr	r1, [r3, #0]
 800187a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800187e:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001880:	4620      	mov	r0, r4
 8001882:	9600      	str	r6, [sp, #0]
 8001884:	463b      	mov	r3, r7
 8001886:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800188a:	f7ff fd43 	bl	8001314 <I2C_WaitOnFlagUntilTimeout>
 800188e:	2800      	cmp	r0, #0
 8001890:	d1d6      	bne.n	8001840 <HAL_I2C_Master_Receive+0x154>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001892:	6822      	ldr	r2, [r4, #0]
 8001894:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001898:	6113      	str	r3, [r2, #16]
 800189a:	e78f      	b.n	80017bc <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 800189c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 80018a0:	2503      	movs	r5, #3
 80018a2:	e733      	b.n	800170c <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018a4:	9503      	str	r5, [sp, #12]
 80018a6:	695a      	ldr	r2, [r3, #20]
 80018a8:	9203      	str	r2, [sp, #12]
 80018aa:	699a      	ldr	r2, [r3, #24]
 80018ac:	9203      	str	r2, [sp, #12]
 80018ae:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b6:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80018b8:	2320      	movs	r3, #32
 80018ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018be:	2300      	movs	r3, #0
 80018c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80018c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80018c8:	e720      	b.n	800170c <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 80018ca:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80018cc:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 80018ce:	d10d      	bne.n	80018ec <HAL_I2C_Master_Receive+0x200>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80018d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018d4:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018dc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018de:	9505      	str	r5, [sp, #20]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	9205      	str	r2, [sp, #20]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	9305      	str	r3, [sp, #20]
 80018e8:	9b05      	ldr	r3, [sp, #20]
 80018ea:	e784      	b.n	80017f6 <HAL_I2C_Master_Receive+0x10a>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80018ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018f0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f2:	9506      	str	r5, [sp, #24]
 80018f4:	695a      	ldr	r2, [r3, #20]
 80018f6:	9206      	str	r2, [sp, #24]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	9306      	str	r3, [sp, #24]
 80018fc:	9b06      	ldr	r3, [sp, #24]
 80018fe:	e77a      	b.n	80017f6 <HAL_I2C_Master_Receive+0x10a>
        else if(hi2c->XferSize == 2U)
 8001900:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001902:	9600      	str	r6, [sp, #0]
 8001904:	463b      	mov	r3, r7
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	4641      	mov	r1, r8
 800190c:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 800190e:	d122      	bne.n	8001956 <HAL_I2C_Master_Receive+0x26a>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001910:	f7ff fd00 	bl	8001314 <I2C_WaitOnFlagUntilTimeout>
 8001914:	2800      	cmp	r0, #0
 8001916:	d1c3      	bne.n	80018a0 <HAL_I2C_Master_Receive+0x1b4>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001918:	6823      	ldr	r3, [r4, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001920:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001922:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	1c51      	adds	r1, r2, #1
 8001928:	6261      	str	r1, [r4, #36]	; 0x24
 800192a:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 800192c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800192e:	3b01      	subs	r3, #1
 8001930:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001932:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001934:	3b01      	subs	r3, #1
 8001936:	b29b      	uxth	r3, r3
 8001938:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800193a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	6262      	str	r2, [r4, #36]	; 0x24
 8001940:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001942:	6912      	ldr	r2, [r2, #16]
 8001944:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001946:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001948:	3b01      	subs	r3, #1
 800194a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800194c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800194e:	3b01      	subs	r3, #1
 8001950:	b29b      	uxth	r3, r3
 8001952:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001954:	e751      	b.n	80017fa <HAL_I2C_Master_Receive+0x10e>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001956:	f7ff fcdd 	bl	8001314 <I2C_WaitOnFlagUntilTimeout>
 800195a:	4602      	mov	r2, r0
 800195c:	2800      	cmp	r0, #0
 800195e:	d19f      	bne.n	80018a0 <HAL_I2C_Master_Receive+0x1b4>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	6819      	ldr	r1, [r3, #0]
 8001964:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001968:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800196a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	1c48      	adds	r0, r1, #1
 8001970:	6260      	str	r0, [r4, #36]	; 0x24
 8001972:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8001974:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001976:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001978:	3b01      	subs	r3, #1
 800197a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800197c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800197e:	3b01      	subs	r3, #1
 8001980:	b29b      	uxth	r3, r3
 8001982:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001984:	4641      	mov	r1, r8
 8001986:	463b      	mov	r3, r7
 8001988:	4620      	mov	r0, r4
 800198a:	e7c1      	b.n	8001910 <HAL_I2C_Master_Receive+0x224>
 800198c:	00100002 	.word	0x00100002
 8001990:	00010002 	.word	0x00010002
 8001994:	00010008 	.word	0x00010008
 8001998:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800199c:	4632      	mov	r2, r6
 800199e:	4639      	mov	r1, r7
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff fd0b 	bl	80013bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80019a6:	2800      	cmp	r0, #0
 80019a8:	f47f af37 	bne.w	800181a <HAL_I2C_Master_Receive+0x12e>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	6262      	str	r2, [r4, #36]	; 0x24
 80019b2:	6822      	ldr	r2, [r4, #0]
 80019b4:	6912      	ldr	r2, [r2, #16]
 80019b6:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80019b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019ba:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 80019bc:	3b01      	subs	r3, #1
 80019be:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80019c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019c8:	6953      	ldr	r3, [r2, #20]
 80019ca:	075b      	lsls	r3, r3, #29
 80019cc:	f57f af15 	bpl.w	80017fa <HAL_I2C_Master_Receive+0x10e>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019d2:	1c59      	adds	r1, r3, #1
 80019d4:	6261      	str	r1, [r4, #36]	; 0x24
 80019d6:	e7b4      	b.n	8001942 <HAL_I2C_Master_Receive+0x256>

080019d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80019d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80019da:	4606      	mov	r6, r0
{ 
 80019dc:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 80019de:	2800      	cmp	r0, #0
 80019e0:	d064      	beq.n	8001aac <HAL_PCD_Init+0xd4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019e2:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 80019e4:	4634      	mov	r4, r6
  hpcd->State = HAL_PCD_STATE_BUSY;
 80019e6:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 80019ea:	f003 fff1 	bl	80059d0 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 80019ee:	f854 0b10 	ldr.w	r0, [r4], #16
 80019f2:	f001 f9b5 	bl	8002d60 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 80019f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f8:	466d      	mov	r5, sp
 80019fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a04:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a08:	1d37      	adds	r7, r6, #4
 8001a0a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001a0e:	6830      	ldr	r0, [r6, #0]
 8001a10:	f001 f966 	bl	8002ce0 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8001a14:	2100      	movs	r1, #0
 8001a16:	6830      	ldr	r0, [r6, #0]
 8001a18:	f001 f9a8 	bl	8002d6c <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8001a20:	4632      	mov	r2, r6
 8001a22:	f106 0410 	add.w	r4, r6, #16
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8001a26:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a28:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8001a2a:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001a2e:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 8001a30:	3101      	adds	r1, #1
 8001a32:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 8001a34:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a38:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 8001a3c:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 8001a3e:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 8001a40:	64d0      	str	r0, [r2, #76]	; 0x4c
 8001a42:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 8001a46:	d1f0      	bne.n	8001a2a <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0U;
 8001a4e:	4611      	mov	r1, r2
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001a50:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 8001a54:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001a58:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001a5a:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 8001a5e:	3201      	adds	r2, #1
 8001a60:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 8001a62:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a66:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 8001a6a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a6e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 8001a72:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001a76:	6041      	str	r1, [r0, #4]
 8001a78:	f103 031c 	add.w	r3, r3, #28
 for (i = 0U; i < 15U; i++)
 8001a7c:	d1e8      	bne.n	8001a50 <HAL_PCD_Init+0x78>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8001a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a80:	466d      	mov	r5, sp
 8001a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a90:	4670      	mov	r0, lr
 8001a92:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001a96:	f001 f981 	bl	8002d9c <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8001aa0:	6830      	ldr	r0, [r6, #0]
 8001aa2:	f001 fc9e 	bl	80033e2 <USB_DevDisconnect>
 return HAL_OK;
 8001aa6:	2000      	movs	r0, #0
}
 8001aa8:	b00b      	add	sp, #44	; 0x2c
 8001aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001aac:	2001      	movs	r0, #1
 8001aae:	e7fb      	b.n	8001aa8 <HAL_PCD_Init+0xd0>

08001ab0 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8001ab0:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001ab4:	2b01      	cmp	r3, #1
{ 
 8001ab6:	b510      	push	{r4, lr}
 8001ab8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001aba:	d00c      	beq.n	8001ad6 <HAL_PCD_Start+0x26>
 8001abc:	2301      	movs	r3, #1
 8001abe:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8001ac2:	6800      	ldr	r0, [r0, #0]
 8001ac4:	f001 fc81 	bl	80033ca <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001ac8:	6820      	ldr	r0, [r4, #0]
 8001aca:	f001 f943 	bl	8002d54 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001ad4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8001ad6:	2002      	movs	r0, #2
}
 8001ad8:	bd10      	pop	{r4, pc}
	...

08001adc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ae0:	f8d0 9000 	ldr.w	r9, [r0]
{
 8001ae4:	b087      	sub	sp, #28
 8001ae6:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ae8:	4648      	mov	r0, r9
 8001aea:	f001 fcb4 	bl	8003456 <USB_GetMode>
 8001aee:	9002      	str	r0, [sp, #8]
 8001af0:	2800      	cmp	r0, #0
 8001af2:	f040 812e 	bne.w	8001d52 <HAL_PCD_IRQHandler+0x276>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8001af6:	6820      	ldr	r0, [r4, #0]
 8001af8:	f001 fc7f 	bl	80033fa <USB_ReadInterrupts>
 8001afc:	2800      	cmp	r0, #0
 8001afe:	f000 8128 	beq.w	8001d52 <HAL_PCD_IRQHandler+0x276>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b02:	6820      	ldr	r0, [r4, #0]
 8001b04:	f001 fc79 	bl	80033fa <USB_ReadInterrupts>
 8001b08:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b0a:	bf48      	it	mi
 8001b0c:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b0e:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b10:	bf42      	ittt	mi
 8001b12:	6953      	ldrmi	r3, [r2, #20]
 8001b14:	f003 0302 	andmi.w	r3, r3, #2
 8001b18:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b1a:	f001 fc6e 	bl	80033fa <USB_ReadInterrupts>
 8001b1e:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8001b22:	d00a      	beq.n	8001b3a <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b24:	6820      	ldr	r0, [r4, #0]
 8001b26:	f001 fc6c 	bl	8003402 <USB_ReadDevAllOutEpInterrupt>
 8001b2a:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 8001b2e:	4607      	mov	r7, r0
 8001b30:	46a2      	mov	sl, r4
      epnum = 0U;
 8001b32:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8001b34:	2f00      	cmp	r7, #0
 8001b36:	f040 810f 	bne.w	8001d58 <HAL_PCD_IRQHandler+0x27c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b3a:	6820      	ldr	r0, [r4, #0]
 8001b3c:	f001 fc5d 	bl	80033fa <USB_ReadInterrupts>
 8001b40:	0341      	lsls	r1, r0, #13
 8001b42:	d50b      	bpl.n	8001b5c <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001b44:	6820      	ldr	r0, [r4, #0]
 8001b46:	f001 fc64 	bl	8003412 <USB_ReadDevAllInEpInterrupt>
 8001b4a:	4626      	mov	r6, r4
 8001b4c:	9003      	str	r0, [sp, #12]
 8001b4e:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 8001b52:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8001b54:	9b03      	ldr	r3, [sp, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f040 813f 	bne.w	8001dda <HAL_PCD_IRQHandler+0x2fe>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b5c:	6820      	ldr	r0, [r4, #0]
 8001b5e:	f001 fc4c 	bl	80033fa <USB_ReadInterrupts>
 8001b62:	2800      	cmp	r0, #0
 8001b64:	da0d      	bge.n	8001b82 <HAL_PCD_IRQHandler+0xa6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b66:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8001b72:	4620      	mov	r0, r4
 8001b74:	f003 ffa0 	bl	8005ab8 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b78:	6822      	ldr	r2, [r4, #0]
 8001b7a:	6953      	ldr	r3, [r2, #20]
 8001b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b80:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b82:	6820      	ldr	r0, [r4, #0]
 8001b84:	f001 fc39 	bl	80033fa <USB_ReadInterrupts>
 8001b88:	0506      	lsls	r6, r0, #20
 8001b8a:	d50b      	bpl.n	8001ba4 <HAL_PCD_IRQHandler+0xc8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b8c:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8001b90:	07d8      	lsls	r0, r3, #31
 8001b92:	d502      	bpl.n	8001b9a <HAL_PCD_IRQHandler+0xbe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8001b94:	4620      	mov	r0, r4
 8001b96:	f003 ff77 	bl	8005a88 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b9a:	6822      	ldr	r2, [r4, #0]
 8001b9c:	6953      	ldr	r3, [r2, #20]
 8001b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba2:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ba4:	6820      	ldr	r0, [r4, #0]
 8001ba6:	f001 fc28 	bl	80033fa <USB_ReadInterrupts>
 8001baa:	04c1      	lsls	r1, r0, #19
 8001bac:	d537      	bpl.n	8001c1e <HAL_PCD_IRQHandler+0x142>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001bae:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 8001bb2:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8001bb4:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8001bbc:	2110      	movs	r1, #16
 8001bbe:	f001 f989 	bl	8002ed4 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc2:	6861      	ldr	r1, [r4, #4]
 8001bc4:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8001bc8:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bca:	9802      	ldr	r0, [sp, #8]
 8001bcc:	4288      	cmp	r0, r1
 8001bce:	f040 8192 	bne.w	8001ef6 <HAL_PCD_IRQHandler+0x41a>
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bd8:	69f3      	ldr	r3, [r6, #28]
 8001bda:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001bde:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8001be0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 818f 	beq.w	8001f06 <HAL_PCD_IRQHandler+0x42a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8001be8:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8001bec:	f043 030b 	orr.w	r3, r3, #11
 8001bf0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8001bf4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001bf6:	f043 030b 	orr.w	r3, r3, #11
 8001bfa:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bfc:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001c00:	7c21      	ldrb	r1, [r4, #16]
 8001c02:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c04:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c08:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001c0c:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001c10:	f001 fc40 	bl	8003494 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c14:	6822      	ldr	r2, [r4, #0]
 8001c16:	6953      	ldr	r3, [r2, #20]
 8001c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c1c:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c1e:	6820      	ldr	r0, [r4, #0]
 8001c20:	f001 fbeb 	bl	80033fa <USB_ReadInterrupts>
 8001c24:	0482      	lsls	r2, r0, #18
 8001c26:	d51d      	bpl.n	8001c64 <HAL_PCD_IRQHandler+0x188>
    {
      USB_ActivateSetup(hpcd->Instance);
 8001c28:	6820      	ldr	r0, [r4, #0]
 8001c2a:	f001 fc18 	bl	800345e <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001c2e:	6820      	ldr	r0, [r4, #0]
 8001c30:	68c3      	ldr	r3, [r0, #12]
 8001c32:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8001c36:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8001c38:	f001 f975 	bl	8002f26 <USB_GetDevSpeed>
 8001c3c:	2800      	cmp	r0, #0
 8001c3e:	f040 816b 	bne.w	8001f18 <HAL_PCD_IRQHandler+0x43c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001c42:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8001c44:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8001c46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c4a:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001c4c:	68d3      	ldr	r3, [r2, #12]
 8001c4e:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8001c52:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8001c54:	4620      	mov	r0, r4
 8001c56:	f003 ff06 	bl	8005a66 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c5a:	6822      	ldr	r2, [r4, #0]
 8001c5c:	6953      	ldr	r3, [r2, #20]
 8001c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c62:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c64:	6820      	ldr	r0, [r4, #0]
 8001c66:	f001 fbc8 	bl	80033fa <USB_ReadInterrupts>
 8001c6a:	06c3      	lsls	r3, r0, #27
 8001c6c:	d52b      	bpl.n	8001cc6 <HAL_PCD_IRQHandler+0x1ea>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c6e:	6822      	ldr	r2, [r4, #0]
 8001c70:	6993      	ldr	r3, [r2, #24]
 8001c72:	f023 0310 	bic.w	r3, r3, #16
 8001c76:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8001c78:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8001c7c:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8001c80:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001c82:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8001c86:	f040 81a8 	bne.w	8001fda <HAL_PCD_IRQHandler+0x4fe>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c8a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001c8e:	421e      	tst	r6, r3
 8001c90:	d014      	beq.n	8001cbc <HAL_PCD_IRQHandler+0x1e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8001c92:	271c      	movs	r7, #28
 8001c94:	fb07 4708 	mla	r7, r7, r8, r4
 8001c98:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8001c9c:	4632      	mov	r2, r6
 8001c9e:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8001ca2:	4648      	mov	r0, r9
 8001ca4:	f001 fb3b 	bl	800331e <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001ca8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001cac:	4433      	add	r3, r6
 8001cae:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001cb2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001cb6:	441e      	add	r6, r3
 8001cb8:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cbc:	6822      	ldr	r2, [r4, #0]
 8001cbe:	6993      	ldr	r3, [r2, #24]
 8001cc0:	f043 0310 	orr.w	r3, r3, #16
 8001cc4:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001cc6:	6820      	ldr	r0, [r4, #0]
 8001cc8:	f001 fb97 	bl	80033fa <USB_ReadInterrupts>
 8001ccc:	0707      	lsls	r7, r0, #28
 8001cce:	d507      	bpl.n	8001ce0 <HAL_PCD_IRQHandler+0x204>
    {
      HAL_PCD_SOFCallback(hpcd);
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f003 fec4 	bl	8005a5e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cd6:	6822      	ldr	r2, [r4, #0]
 8001cd8:	6953      	ldr	r3, [r2, #20]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ce0:	6820      	ldr	r0, [r4, #0]
 8001ce2:	f001 fb8a 	bl	80033fa <USB_ReadInterrupts>
 8001ce6:	02c6      	lsls	r6, r0, #11
 8001ce8:	d508      	bpl.n	8001cfc <HAL_PCD_IRQHandler+0x220>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8001cea:	b2e9      	uxtb	r1, r5
 8001cec:	4620      	mov	r0, r4
 8001cee:	f003 feeb 	bl	8005ac8 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cf2:	6822      	ldr	r2, [r4, #0]
 8001cf4:	6953      	ldr	r3, [r2, #20]
 8001cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfa:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cfc:	6820      	ldr	r0, [r4, #0]
 8001cfe:	f001 fb7c 	bl	80033fa <USB_ReadInterrupts>
 8001d02:	0280      	lsls	r0, r0, #10
 8001d04:	d508      	bpl.n	8001d18 <HAL_PCD_IRQHandler+0x23c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8001d06:	b2e9      	uxtb	r1, r5
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f003 fed9 	bl	8005ac0 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d0e:	6822      	ldr	r2, [r4, #0]
 8001d10:	6953      	ldr	r3, [r2, #20]
 8001d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d16:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d18:	6820      	ldr	r0, [r4, #0]
 8001d1a:	f001 fb6e 	bl	80033fa <USB_ReadInterrupts>
 8001d1e:	0041      	lsls	r1, r0, #1
 8001d20:	d507      	bpl.n	8001d32 <HAL_PCD_IRQHandler+0x256>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8001d22:	4620      	mov	r0, r4
 8001d24:	f003 fed4 	bl	8005ad0 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d28:	6822      	ldr	r2, [r4, #0]
 8001d2a:	6953      	ldr	r3, [r2, #20]
 8001d2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d30:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d32:	6820      	ldr	r0, [r4, #0]
 8001d34:	f001 fb61 	bl	80033fa <USB_ReadInterrupts>
 8001d38:	0742      	lsls	r2, r0, #29
 8001d3a:	d50a      	bpl.n	8001d52 <HAL_PCD_IRQHandler+0x276>
    {
      temp = hpcd->Instance->GOTGINT;
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d40:	076b      	lsls	r3, r5, #29
 8001d42:	d502      	bpl.n	8001d4a <HAL_PCD_IRQHandler+0x26e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8001d44:	4620      	mov	r0, r4
 8001d46:	f003 fec7 	bl	8005ad8 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	4315      	orrs	r5, r2
 8001d50:	605d      	str	r5, [r3, #4]
    }
  }
}
 8001d52:	b007      	add	sp, #28
 8001d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 8001d58:	07f8      	lsls	r0, r7, #31
 8001d5a:	d538      	bpl.n	8001dce <HAL_PCD_IRQHandler+0x2f2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001d5c:	fa5f fb85 	uxtb.w	fp, r5
 8001d60:	4659      	mov	r1, fp
 8001d62:	6820      	ldr	r0, [r4, #0]
 8001d64:	f001 fb5d 	bl	8003422 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d68:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001d6c:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d6e:	d021      	beq.n	8001db4 <HAL_PCD_IRQHandler+0x2d8>
            if(hpcd->Init.dma_enable == 1U)
 8001d70:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d72:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 8001d74:	4299      	cmp	r1, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d76:	60b3      	str	r3, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 8001d78:	d10c      	bne.n	8001d94 <HAL_PCD_IRQHandler+0x2b8>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001d7a:	6931      	ldr	r1, [r6, #16]
 8001d7c:	f8da 0200 	ldr.w	r0, [sl, #512]	; 0x200
 8001d80:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8001d84:	1a41      	subs	r1, r0, r1
 8001d86:	f8ca 1210 	str.w	r1, [sl, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8001d8a:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
 8001d8e:	4408      	add	r0, r1
 8001d90:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8001d94:	4659      	mov	r1, fp
 8001d96:	4620      	mov	r0, r4
 8001d98:	f003 fe50 	bl	8005a3c <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8001d9c:	6921      	ldr	r1, [r4, #16]
 8001d9e:	2901      	cmp	r1, #1
 8001da0:	d108      	bne.n	8001db4 <HAL_PCD_IRQHandler+0x2d8>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001da2:	b93d      	cbnz	r5, 8001db4 <HAL_PCD_IRQHandler+0x2d8>
 8001da4:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8001da8:	b922      	cbnz	r2, 8001db4 <HAL_PCD_IRQHandler+0x2d8>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001daa:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001dae:	6820      	ldr	r0, [r4, #0]
 8001db0:	f001 fb70 	bl	8003494 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001db4:	f018 0f08 	tst.w	r8, #8
 8001db8:	d004      	beq.n	8001dc4 <HAL_PCD_IRQHandler+0x2e8>
            HAL_PCD_SetupStageCallback(hpcd);
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f003 fe38 	bl	8005a30 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001dc4:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001dc8:	bf1c      	itt	ne
 8001dca:	2310      	movne	r3, #16
 8001dcc:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8001dce:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8001dd0:	087f      	lsrs	r7, r7, #1
 8001dd2:	3620      	adds	r6, #32
 8001dd4:	f10a 0a1c 	add.w	sl, sl, #28
 8001dd8:	e6ac      	b.n	8001b34 <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 8001dda:	9b03      	ldr	r3, [sp, #12]
 8001ddc:	07da      	lsls	r2, r3, #31
 8001dde:	d558      	bpl.n	8001e92 <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001de0:	fa5f fb85 	uxtb.w	fp, r5
 8001de4:	4659      	mov	r1, fp
 8001de6:	6820      	ldr	r0, [r4, #0]
 8001de8:	f001 fb25 	bl	8003436 <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001dec:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001dee:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001df0:	d520      	bpl.n	8001e34 <HAL_PCD_IRQHandler+0x358>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001df2:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 8001df6:	2101      	movs	r1, #1
 8001df8:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dfa:	ea23 0301 	bic.w	r3, r3, r1
 8001dfe:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e02:	2301      	movs	r3, #1
 8001e04:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 8001e08:	6923      	ldr	r3, [r4, #16]
 8001e0a:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8001e0c:	bf01      	itttt	eq
 8001e0e:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 8001e10:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 8001e12:	189b      	addeq	r3, r3, r2
 8001e14:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8001e16:	4659      	mov	r1, fp
 8001e18:	4620      	mov	r0, r4
 8001e1a:	f003 fe18 	bl	8005a4e <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8001e1e:	6921      	ldr	r1, [r4, #16]
 8001e20:	2901      	cmp	r1, #1
 8001e22:	d107      	bne.n	8001e34 <HAL_PCD_IRQHandler+0x358>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e24:	b935      	cbnz	r5, 8001e34 <HAL_PCD_IRQHandler+0x358>
 8001e26:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e28:	b923      	cbnz	r3, 8001e34 <HAL_PCD_IRQHandler+0x358>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e2a:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001e2e:	6820      	ldr	r0, [r4, #0]
 8001e30:	f001 fb30 	bl	8003494 <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e34:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e36:	bf44      	itt	mi
 8001e38:	2308      	movmi	r3, #8
 8001e3a:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e3e:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e40:	bf44      	itt	mi
 8001e42:	2310      	movmi	r3, #16
 8001e44:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e48:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e4a:	bf44      	itt	mi
 8001e4c:	2340      	movmi	r3, #64	; 0x40
 8001e4e:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e52:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e54:	bf44      	itt	mi
 8001e56:	2302      	movmi	r3, #2
 8001e58:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e5c:	063f      	lsls	r7, r7, #24
 8001e5e:	d518      	bpl.n	8001e92 <HAL_PCD_IRQHandler+0x3b6>
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8001e64:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 8001e66:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8001e68:	1aff      	subs	r7, r7, r3
 8001e6a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8001e6c:	429f      	cmp	r7, r3
 8001e6e:	bf28      	it	cs
 8001e70:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001e72:	9b04      	ldr	r3, [sp, #16]
 8001e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8001e78:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001e7c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8001e80:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001e84:	9305      	str	r3, [sp, #20]
 8001e86:	9b05      	ldr	r3, [sp, #20]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	4553      	cmp	r3, sl
 8001e8e:	d808      	bhi.n	8001ea2 <HAL_PCD_IRQHandler+0x3c6>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 8001e90:	b32f      	cbz	r7, 8001ede <HAL_PCD_IRQHandler+0x402>
        ep_intr >>= 1U;
 8001e92:	9b03      	ldr	r3, [sp, #12]
 8001e94:	085b      	lsrs	r3, r3, #1
        epnum++;
 8001e96:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8001e98:	9303      	str	r3, [sp, #12]
 8001e9a:	361c      	adds	r6, #28
 8001e9c:	f108 0820 	add.w	r8, r8, #32
 8001ea0:	e658      	b.n	8001b54 <HAL_PCD_IRQHandler+0x78>
          (ep->xfer_count < ep->xfer_len) &&
 8001ea2:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8001ea4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d9f2      	bls.n	8001e90 <HAL_PCD_IRQHandler+0x3b4>
          (ep->xfer_count < ep->xfer_len) &&
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_PCD_IRQHandler+0x3b4>
 8001eae:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001eb0:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 8001eb2:	1a9b      	subs	r3, r3, r2
 8001eb4:	429f      	cmp	r7, r3
 8001eb6:	bf28      	it	cs
 8001eb8:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001eba:	7c23      	ldrb	r3, [r4, #16]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	465a      	mov	r2, fp
 8001ec0:	b2bb      	uxth	r3, r7
 8001ec2:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8001ec4:	f001 fa17 	bl	80032f6 <USB_WritePacket>
    ep->xfer_buff  += len;
 8001ec8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001eca:	443b      	add	r3, r7
 8001ecc:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8001ece:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 8001ed0:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 8001ed4:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 8001ed6:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 8001eda:	6533      	str	r3, [r6, #80]	; 0x50
 8001edc:	e7d3      	b.n	8001e86 <HAL_PCD_IRQHandler+0x3aa>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ede:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 8001ee0:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ee2:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8001ee6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 8001eea:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001eec:	ea23 0302 	bic.w	r3, r3, r2
 8001ef0:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8001ef4:	e7cd      	b.n	8001e92 <HAL_PCD_IRQHandler+0x3b6>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef6:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8001ef8:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efa:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8001efc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f00:	9002      	str	r0, [sp, #8]
 8001f02:	3320      	adds	r3, #32
 8001f04:	e661      	b.n	8001bca <HAL_PCD_IRQHandler+0xee>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8001f06:	6973      	ldr	r3, [r6, #20]
 8001f08:	f043 030b 	orr.w	r3, r3, #11
 8001f0c:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8001f0e:	6933      	ldr	r3, [r6, #16]
 8001f10:	f043 030b 	orr.w	r3, r3, #11
 8001f14:	6133      	str	r3, [r6, #16]
 8001f16:	e671      	b.n	8001bfc <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8001f1c:	2340      	movs	r3, #64	; 0x40
 8001f1e:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8001f20:	f000 fbf0 	bl	8002704 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8001f24:	4b34      	ldr	r3, [pc, #208]	; (8001ff8 <HAL_PCD_IRQHandler+0x51c>)
 8001f26:	4a35      	ldr	r2, [pc, #212]	; (8001ffc <HAL_PCD_IRQHandler+0x520>)
 8001f28:	4403      	add	r3, r0
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	d804      	bhi.n	8001f3a <HAL_PCD_IRQHandler+0x45e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	e68c      	b.n	8001c54 <HAL_PCD_IRQHandler+0x178>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8001f3a:	4a31      	ldr	r2, [pc, #196]	; (8002000 <HAL_PCD_IRQHandler+0x524>)
 8001f3c:	4931      	ldr	r1, [pc, #196]	; (8002004 <HAL_PCD_IRQHandler+0x528>)
 8001f3e:	4402      	add	r2, r0
 8001f40:	428a      	cmp	r2, r1
 8001f42:	d803      	bhi.n	8001f4c <HAL_PCD_IRQHandler+0x470>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001f4a:	e7f4      	b.n	8001f36 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8001f4c:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8001f50:	492d      	ldr	r1, [pc, #180]	; (8002008 <HAL_PCD_IRQHandler+0x52c>)
 8001f52:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8001f56:	428a      	cmp	r2, r1
 8001f58:	d803      	bhi.n	8001f62 <HAL_PCD_IRQHandler+0x486>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8001f60:	e7e9      	b.n	8001f36 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8001f62:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8001f66:	4929      	ldr	r1, [pc, #164]	; (800200c <HAL_PCD_IRQHandler+0x530>)
 8001f68:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8001f6c:	428a      	cmp	r2, r1
 8001f6e:	d803      	bhi.n	8001f78 <HAL_PCD_IRQHandler+0x49c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001f76:	e7de      	b.n	8001f36 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8001f78:	4a25      	ldr	r2, [pc, #148]	; (8002010 <HAL_PCD_IRQHandler+0x534>)
 8001f7a:	4926      	ldr	r1, [pc, #152]	; (8002014 <HAL_PCD_IRQHandler+0x538>)
 8001f7c:	4402      	add	r2, r0
 8001f7e:	428a      	cmp	r2, r1
 8001f80:	d803      	bhi.n	8001f8a <HAL_PCD_IRQHandler+0x4ae>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8001f88:	e7d5      	b.n	8001f36 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8001f8a:	4a23      	ldr	r2, [pc, #140]	; (8002018 <HAL_PCD_IRQHandler+0x53c>)
 8001f8c:	4923      	ldr	r1, [pc, #140]	; (800201c <HAL_PCD_IRQHandler+0x540>)
 8001f8e:	4402      	add	r2, r0
 8001f90:	428a      	cmp	r2, r1
 8001f92:	d803      	bhi.n	8001f9c <HAL_PCD_IRQHandler+0x4c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8001f9a:	e7cc      	b.n	8001f36 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8001f9c:	4a20      	ldr	r2, [pc, #128]	; (8002020 <HAL_PCD_IRQHandler+0x544>)
 8001f9e:	4921      	ldr	r1, [pc, #132]	; (8002024 <HAL_PCD_IRQHandler+0x548>)
 8001fa0:	4402      	add	r2, r0
 8001fa2:	428a      	cmp	r2, r1
 8001fa4:	d803      	bhi.n	8001fae <HAL_PCD_IRQHandler+0x4d2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001fac:	e7c3      	b.n	8001f36 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8001fae:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8001fb2:	491d      	ldr	r1, [pc, #116]	; (8002028 <HAL_PCD_IRQHandler+0x54c>)
 8001fb4:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8001fb8:	428a      	cmp	r2, r1
 8001fba:	d803      	bhi.n	8001fc4 <HAL_PCD_IRQHandler+0x4e8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fc2:	e7b8      	b.n	8001f36 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8001fc4:	4a19      	ldr	r2, [pc, #100]	; (800202c <HAL_PCD_IRQHandler+0x550>)
 8001fc6:	491a      	ldr	r1, [pc, #104]	; (8002030 <HAL_PCD_IRQHandler+0x554>)
 8001fc8:	4402      	add	r2, r0
 8001fca:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	bf94      	ite	ls
 8001fd0:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001fd4:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8001fd8:	e7ad      	b.n	8001f36 <HAL_PCD_IRQHandler+0x45a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	f47f ae6e 	bne.w	8001cbc <HAL_PCD_IRQHandler+0x1e0>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8001fe6:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001fe8:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001fea:	f001 f998 	bl	800331e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001fee:	fb07 4708 	mla	r7, r7, r8, r4
 8001ff2:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8001ff6:	e65c      	b.n	8001cb2 <HAL_PCD_IRQHandler+0x1d6>
 8001ff8:	ff275340 	.word	0xff275340
 8001ffc:	000c34ff 	.word	0x000c34ff
 8002000:	ff1b1e40 	.word	0xff1b1e40
 8002004:	000f423f 	.word	0x000f423f
 8002008:	00124f7f 	.word	0x00124f7f
 800200c:	0013d61f 	.word	0x0013d61f
 8002010:	fee5b660 	.word	0xfee5b660
 8002014:	0016e35f 	.word	0x0016e35f
 8002018:	feced300 	.word	0xfeced300
 800201c:	001b773f 	.word	0x001b773f
 8002020:	feb35bc0 	.word	0xfeb35bc0
 8002024:	002191bf 	.word	0x002191bf
 8002028:	0038751f 	.word	0x0038751f
 800202c:	fe5954e0 	.word	0xfe5954e0
 8002030:	00419cdf 	.word	0x00419cdf

08002034 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8002034:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8002038:	2b01      	cmp	r3, #1
{
 800203a:	b510      	push	{r4, lr}
 800203c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 800203e:	d009      	beq.n	8002054 <HAL_PCD_SetAddress+0x20>
 8002040:	2301      	movs	r3, #1
 8002042:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8002046:	6800      	ldr	r0, [r0, #0]
 8002048:	f001 f9af 	bl	80033aa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 800204c:	2000      	movs	r0, #0
 800204e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8002052:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8002054:	2002      	movs	r0, #2
}
 8002056:	bd10      	pop	{r4, pc}

08002058 <HAL_PCD_EP_Open>:
{
 8002058:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 800205a:	b24e      	sxtb	r6, r1
 800205c:	2e00      	cmp	r6, #0
{
 800205e:	4604      	mov	r4, r0
 8002060:	f04f 051c 	mov.w	r5, #28
 8002064:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002068:	bfb5      	itete	lt
 800206a:	fb05 4100 	mlalt	r1, r5, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800206e:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002072:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002074:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->num   = ep_addr & 0x7F;
 8002078:	b2c0      	uxtb	r0, r0
  if (ep->is_in)
 800207a:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 800207c:	bfb8      	it	lt
 800207e:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 8002080:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8002082:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 8002084:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->data_pid_start = 0U;
 8002088:	bf04      	itt	eq
 800208a:	2300      	moveq	r3, #0
 800208c:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 800208e:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8002090:	704d      	strb	r5, [r1, #1]
  __HAL_LOCK(hpcd); 
 8002092:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 8002096:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 8002098:	2b01      	cmp	r3, #1
 800209a:	d009      	beq.n	80020b0 <HAL_PCD_EP_Open+0x58>
 800209c:	2301      	movs	r3, #1
 800209e:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80020a2:	6820      	ldr	r0, [r4, #0]
 80020a4:	f000 ff5a 	bl	8002f5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80020a8:	2000      	movs	r0, #0
 80020aa:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 80020ae:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 80020b0:	2002      	movs	r0, #2
}
 80020b2:	bd70      	pop	{r4, r5, r6, pc}

080020b4 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 80020b4:	b24b      	sxtb	r3, r1
 80020b6:	2b00      	cmp	r3, #0
{  
 80020b8:	b510      	push	{r4, lr}
 80020ba:	f04f 021c 	mov.w	r2, #28
 80020be:	4604      	mov	r4, r0
 80020c0:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80020c4:	bfb5      	itete	lt
 80020c6:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80020ca:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80020ce:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80020d0:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 80020d4:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80020d6:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80020d8:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80020da:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d009      	beq.n	80020f6 <HAL_PCD_EP_Close+0x42>
 80020e2:	2301      	movs	r3, #1
 80020e4:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80020e8:	6820      	ldr	r0, [r4, #0]
 80020ea:	f000 ff76 	bl	8002fda <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80020ee:	2000      	movs	r0, #0
 80020f0:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80020f4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80020f6:	2002      	movs	r0, #2
}
 80020f8:	bd10      	pop	{r4, pc}

080020fa <HAL_PCD_EP_Receive>:
{
 80020fa:	b538      	push	{r3, r4, r5, lr}
 80020fc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002100:	241c      	movs	r4, #28
 8002102:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8002106:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800210a:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 800210e:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 8002112:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 8002114:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 8002118:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 800211c:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8002120:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 8002124:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002126:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8002128:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 800212a:	bf08      	it	eq
 800212c:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 8002130:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8002132:	b91d      	cbnz	r5, 800213c <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002134:	f001 f872 	bl	800321c <USB_EP0StartXfer>
}
 8002138:	2000      	movs	r0, #0
 800213a:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800213c:	f000 ffa8 	bl	8003090 <USB_EPStartXfer>
 8002140:	e7fa      	b.n	8002138 <HAL_PCD_EP_Receive+0x3e>

08002142 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8002142:	231c      	movs	r3, #28
 8002144:	f001 010f 	and.w	r1, r1, #15
 8002148:	fb03 0101 	mla	r1, r3, r1, r0
}
 800214c:	f8b1 0210 	ldrh.w	r0, [r1, #528]	; 0x210
 8002150:	4770      	bx	lr

08002152 <HAL_PCD_EP_Transmit>:
{
 8002152:	b538      	push	{r3, r4, r5, lr}
 8002154:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002158:	241c      	movs	r4, #28
 800215a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 800215e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002162:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 8002164:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 800216a:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 800216c:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800216e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 8002172:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 8002176:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002178:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800217a:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 800217c:	bf08      	it	eq
 800217e:	64a2      	streq	r2, [r4, #72]	; 0x48
 8002180:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8002182:	b91d      	cbnz	r5, 800218c <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002184:	f001 f84a 	bl	800321c <USB_EP0StartXfer>
}
 8002188:	2000      	movs	r0, #0
 800218a:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800218c:	f000 ff80 	bl	8003090 <USB_EPStartXfer>
 8002190:	e7fa      	b.n	8002188 <HAL_PCD_EP_Transmit+0x36>

08002192 <HAL_PCD_EP_SetStall>:
{
 8002192:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8002194:	b24b      	sxtb	r3, r1
 8002196:	2b00      	cmp	r3, #0
 8002198:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800219c:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80021a0:	bfb5      	itete	lt
 80021a2:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80021a6:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80021aa:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 80021ac:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 80021b0:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80021b2:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80021b4:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 80021b6:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80021b8:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80021ba:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80021bc:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80021c0:	4293      	cmp	r3, r2
{
 80021c2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80021c4:	d00f      	beq.n	80021e6 <HAL_PCD_EP_SetStall+0x54>
 80021c6:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 80021ca:	6800      	ldr	r0, [r0, #0]
 80021cc:	f001 f8b5 	bl	800333a <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80021d0:	b92d      	cbnz	r5, 80021de <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021d2:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80021d6:	7c21      	ldrb	r1, [r4, #16]
 80021d8:	6820      	ldr	r0, [r4, #0]
 80021da:	f001 f95b 	bl	8003494 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80021de:	2000      	movs	r0, #0
 80021e0:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80021e4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80021e6:	2002      	movs	r0, #2
}
 80021e8:	bd38      	pop	{r3, r4, r5, pc}

080021ea <HAL_PCD_EP_ClrStall>:
{
 80021ea:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80021ec:	b24b      	sxtb	r3, r1
 80021ee:	2b00      	cmp	r3, #0
{
 80021f0:	4605      	mov	r5, r0
 80021f2:	f04f 021c 	mov.w	r2, #28
 80021f6:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80021fa:	bfb5      	itete	lt
 80021fc:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8002200:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002204:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8002206:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800220a:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 800220c:	2400      	movs	r4, #0
 800220e:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8002210:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002212:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8002214:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8002218:	2b01      	cmp	r3, #1
 800221a:	d009      	beq.n	8002230 <HAL_PCD_EP_ClrStall+0x46>
 800221c:	2301      	movs	r3, #1
 800221e:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8002222:	6828      	ldr	r0, [r5, #0]
 8002224:	f001 f8a8 	bl	8003378 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8002228:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 800222c:	4620      	mov	r0, r4
 800222e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8002230:	2002      	movs	r0, #2
}
 8002232:	bd38      	pop	{r3, r4, r5, pc}

08002234 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002234:	6800      	ldr	r0, [r0, #0]
{
 8002236:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002238:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 800223a:	b921      	cbnz	r1, 8002246 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 800223c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002240:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 8002242:	2000      	movs	r0, #0
 8002244:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8002246:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 8002248:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 800224a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 800224e:	1e4e      	subs	r6, r1, #1
 8002250:	b2ec      	uxtb	r4, r5
 8002252:	42b4      	cmp	r4, r6
 8002254:	f105 0501 	add.w	r5, r5, #1
 8002258:	db06      	blt.n	8002268 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 800225a:	313f      	adds	r1, #63	; 0x3f
 800225c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8002260:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002264:	6043      	str	r3, [r0, #4]
 8002266:	e7ec      	b.n	8002242 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8002268:	3440      	adds	r4, #64	; 0x40
 800226a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800226e:	6864      	ldr	r4, [r4, #4]
 8002270:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8002274:	e7ec      	b.n	8002250 <HAL_PCDEx_SetTxFiFo+0x1c>

08002276 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002276:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8002278:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800227a:	6259      	str	r1, [r3, #36]	; 0x24
}
 800227c:	4770      	bx	lr
	...

08002280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002280:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002284:	4604      	mov	r4, r0
 8002286:	b918      	cbnz	r0, 8002290 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002288:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800228a:	b002      	add	sp, #8
 800228c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002290:	6803      	ldr	r3, [r0, #0]
 8002292:	07dd      	lsls	r5, r3, #31
 8002294:	d410      	bmi.n	80022b8 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	0798      	lsls	r0, r3, #30
 800229a:	d458      	bmi.n	800234e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229c:	6823      	ldr	r3, [r4, #0]
 800229e:	071a      	lsls	r2, r3, #28
 80022a0:	f100 809a 	bmi.w	80023d8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	075b      	lsls	r3, r3, #29
 80022a8:	f100 80b8 	bmi.w	800241c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ac:	69a2      	ldr	r2, [r4, #24]
 80022ae:	2a00      	cmp	r2, #0
 80022b0:	f040 8119 	bne.w	80024e6 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80022b4:	2000      	movs	r0, #0
 80022b6:	e7e8      	b.n	800228a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022b8:	4ba6      	ldr	r3, [pc, #664]	; (8002554 <HAL_RCC_OscConfig+0x2d4>)
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	f002 020c 	and.w	r2, r2, #12
 80022c0:	2a04      	cmp	r2, #4
 80022c2:	d007      	beq.n	80022d4 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ca:	2a08      	cmp	r2, #8
 80022cc:	d10a      	bne.n	80022e4 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	0259      	lsls	r1, r3, #9
 80022d2:	d507      	bpl.n	80022e4 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	4b9f      	ldr	r3, [pc, #636]	; (8002554 <HAL_RCC_OscConfig+0x2d4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	039a      	lsls	r2, r3, #14
 80022da:	d5dc      	bpl.n	8002296 <HAL_RCC_OscConfig+0x16>
 80022dc:	6863      	ldr	r3, [r4, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1d9      	bne.n	8002296 <HAL_RCC_OscConfig+0x16>
 80022e2:	e7d1      	b.n	8002288 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e4:	6863      	ldr	r3, [r4, #4]
 80022e6:	4d9b      	ldr	r5, [pc, #620]	; (8002554 <HAL_RCC_OscConfig+0x2d4>)
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ec:	d111      	bne.n	8002312 <HAL_RCC_OscConfig+0x92>
 80022ee:	682b      	ldr	r3, [r5, #0]
 80022f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022f6:	f7fe fe3b 	bl	8000f70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	4d96      	ldr	r5, [pc, #600]	; (8002554 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80022fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	682b      	ldr	r3, [r5, #0]
 8002300:	039b      	lsls	r3, r3, #14
 8002302:	d4c8      	bmi.n	8002296 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002304:	f7fe fe34 	bl	8000f70 <HAL_GetTick>
 8002308:	1b80      	subs	r0, r0, r6
 800230a:	2864      	cmp	r0, #100	; 0x64
 800230c:	d9f7      	bls.n	80022fe <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800230e:	2003      	movs	r0, #3
 8002310:	e7bb      	b.n	800228a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002312:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002316:	d104      	bne.n	8002322 <HAL_RCC_OscConfig+0xa2>
 8002318:	682b      	ldr	r3, [r5, #0]
 800231a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800231e:	602b      	str	r3, [r5, #0]
 8002320:	e7e5      	b.n	80022ee <HAL_RCC_OscConfig+0x6e>
 8002322:	682a      	ldr	r2, [r5, #0]
 8002324:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002328:	602a      	str	r2, [r5, #0]
 800232a:	682a      	ldr	r2, [r5, #0]
 800232c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002330:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1df      	bne.n	80022f6 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002336:	f7fe fe1b 	bl	8000f70 <HAL_GetTick>
 800233a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233c:	682b      	ldr	r3, [r5, #0]
 800233e:	039f      	lsls	r7, r3, #14
 8002340:	d5a9      	bpl.n	8002296 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002342:	f7fe fe15 	bl	8000f70 <HAL_GetTick>
 8002346:	1b80      	subs	r0, r0, r6
 8002348:	2864      	cmp	r0, #100	; 0x64
 800234a:	d9f7      	bls.n	800233c <HAL_RCC_OscConfig+0xbc>
 800234c:	e7df      	b.n	800230e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800234e:	4b81      	ldr	r3, [pc, #516]	; (8002554 <HAL_RCC_OscConfig+0x2d4>)
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	f012 0f0c 	tst.w	r2, #12
 8002356:	d007      	beq.n	8002368 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800235e:	2a08      	cmp	r2, #8
 8002360:	d111      	bne.n	8002386 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	025e      	lsls	r6, r3, #9
 8002366:	d40e      	bmi.n	8002386 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002368:	4b7a      	ldr	r3, [pc, #488]	; (8002554 <HAL_RCC_OscConfig+0x2d4>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	0795      	lsls	r5, r2, #30
 800236e:	d502      	bpl.n	8002376 <HAL_RCC_OscConfig+0xf6>
 8002370:	68e2      	ldr	r2, [r4, #12]
 8002372:	2a01      	cmp	r2, #1
 8002374:	d188      	bne.n	8002288 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	6921      	ldr	r1, [r4, #16]
 800237a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800237e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002382:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002384:	e78a      	b.n	800229c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002386:	68e2      	ldr	r2, [r4, #12]
 8002388:	4b73      	ldr	r3, [pc, #460]	; (8002558 <HAL_RCC_OscConfig+0x2d8>)
 800238a:	b1b2      	cbz	r2, 80023ba <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 800238c:	2201      	movs	r2, #1
 800238e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002390:	f7fe fdee 	bl	8000f70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002394:	4d6f      	ldr	r5, [pc, #444]	; (8002554 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002396:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	682b      	ldr	r3, [r5, #0]
 800239a:	0798      	lsls	r0, r3, #30
 800239c:	d507      	bpl.n	80023ae <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239e:	682b      	ldr	r3, [r5, #0]
 80023a0:	6922      	ldr	r2, [r4, #16]
 80023a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80023aa:	602b      	str	r3, [r5, #0]
 80023ac:	e776      	b.n	800229c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ae:	f7fe fddf 	bl	8000f70 <HAL_GetTick>
 80023b2:	1b80      	subs	r0, r0, r6
 80023b4:	2802      	cmp	r0, #2
 80023b6:	d9ef      	bls.n	8002398 <HAL_RCC_OscConfig+0x118>
 80023b8:	e7a9      	b.n	800230e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80023ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023bc:	f7fe fdd8 	bl	8000f70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c0:	4d64      	ldr	r5, [pc, #400]	; (8002554 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80023c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c4:	682b      	ldr	r3, [r5, #0]
 80023c6:	0799      	lsls	r1, r3, #30
 80023c8:	f57f af68 	bpl.w	800229c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023cc:	f7fe fdd0 	bl	8000f70 <HAL_GetTick>
 80023d0:	1b80      	subs	r0, r0, r6
 80023d2:	2802      	cmp	r0, #2
 80023d4:	d9f6      	bls.n	80023c4 <HAL_RCC_OscConfig+0x144>
 80023d6:	e79a      	b.n	800230e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023d8:	6962      	ldr	r2, [r4, #20]
 80023da:	4b60      	ldr	r3, [pc, #384]	; (800255c <HAL_RCC_OscConfig+0x2dc>)
 80023dc:	b17a      	cbz	r2, 80023fe <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80023e2:	f7fe fdc5 	bl	8000f70 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e6:	4d5b      	ldr	r5, [pc, #364]	; (8002554 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80023e8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ea:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80023ec:	079f      	lsls	r7, r3, #30
 80023ee:	f53f af59 	bmi.w	80022a4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f2:	f7fe fdbd 	bl	8000f70 <HAL_GetTick>
 80023f6:	1b80      	subs	r0, r0, r6
 80023f8:	2802      	cmp	r0, #2
 80023fa:	d9f6      	bls.n	80023ea <HAL_RCC_OscConfig+0x16a>
 80023fc:	e787      	b.n	800230e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80023fe:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002400:	f7fe fdb6 	bl	8000f70 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002404:	4d53      	ldr	r5, [pc, #332]	; (8002554 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002406:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002408:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800240a:	0798      	lsls	r0, r3, #30
 800240c:	f57f af4a 	bpl.w	80022a4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002410:	f7fe fdae 	bl	8000f70 <HAL_GetTick>
 8002414:	1b80      	subs	r0, r0, r6
 8002416:	2802      	cmp	r0, #2
 8002418:	d9f6      	bls.n	8002408 <HAL_RCC_OscConfig+0x188>
 800241a:	e778      	b.n	800230e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241c:	4b4d      	ldr	r3, [pc, #308]	; (8002554 <HAL_RCC_OscConfig+0x2d4>)
 800241e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002420:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002424:	d128      	bne.n	8002478 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	9201      	str	r2, [sp, #4]
 8002428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800242a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800242e:	641a      	str	r2, [r3, #64]	; 0x40
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800243a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	4d48      	ldr	r5, [pc, #288]	; (8002560 <HAL_RCC_OscConfig+0x2e0>)
 800243e:	682b      	ldr	r3, [r5, #0]
 8002440:	05d9      	lsls	r1, r3, #23
 8002442:	d51b      	bpl.n	800247c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002444:	68a3      	ldr	r3, [r4, #8]
 8002446:	4d43      	ldr	r5, [pc, #268]	; (8002554 <HAL_RCC_OscConfig+0x2d4>)
 8002448:	2b01      	cmp	r3, #1
 800244a:	d127      	bne.n	800249c <HAL_RCC_OscConfig+0x21c>
 800244c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002454:	f7fe fd8c 	bl	8000f70 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002458:	4d3e      	ldr	r5, [pc, #248]	; (8002554 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800245a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800245c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002462:	079b      	lsls	r3, r3, #30
 8002464:	d539      	bpl.n	80024da <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002466:	2e00      	cmp	r6, #0
 8002468:	f43f af20 	beq.w	80022ac <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800246c:	4a39      	ldr	r2, [pc, #228]	; (8002554 <HAL_RCC_OscConfig+0x2d4>)
 800246e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	e719      	b.n	80022ac <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002478:	2600      	movs	r6, #0
 800247a:	e7df      	b.n	800243c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800247c:	682b      	ldr	r3, [r5, #0]
 800247e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002482:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002484:	f7fe fd74 	bl	8000f70 <HAL_GetTick>
 8002488:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248a:	682b      	ldr	r3, [r5, #0]
 800248c:	05da      	lsls	r2, r3, #23
 800248e:	d4d9      	bmi.n	8002444 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002490:	f7fe fd6e 	bl	8000f70 <HAL_GetTick>
 8002494:	1bc0      	subs	r0, r0, r7
 8002496:	2802      	cmp	r0, #2
 8002498:	d9f7      	bls.n	800248a <HAL_RCC_OscConfig+0x20a>
 800249a:	e738      	b.n	800230e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800249c:	2b05      	cmp	r3, #5
 800249e:	d104      	bne.n	80024aa <HAL_RCC_OscConfig+0x22a>
 80024a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	672b      	str	r3, [r5, #112]	; 0x70
 80024a8:	e7d0      	b.n	800244c <HAL_RCC_OscConfig+0x1cc>
 80024aa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80024ac:	f022 0201 	bic.w	r2, r2, #1
 80024b0:	672a      	str	r2, [r5, #112]	; 0x70
 80024b2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80024b4:	f022 0204 	bic.w	r2, r2, #4
 80024b8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1ca      	bne.n	8002454 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80024be:	f7fe fd57 	bl	8000f70 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80024c6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80024ca:	0798      	lsls	r0, r3, #30
 80024cc:	d5cb      	bpl.n	8002466 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7fe fd4f 	bl	8000f70 <HAL_GetTick>
 80024d2:	1bc0      	subs	r0, r0, r7
 80024d4:	4540      	cmp	r0, r8
 80024d6:	d9f7      	bls.n	80024c8 <HAL_RCC_OscConfig+0x248>
 80024d8:	e719      	b.n	800230e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe fd49 	bl	8000f70 <HAL_GetTick>
 80024de:	1bc0      	subs	r0, r0, r7
 80024e0:	4540      	cmp	r0, r8
 80024e2:	d9bd      	bls.n	8002460 <HAL_RCC_OscConfig+0x1e0>
 80024e4:	e713      	b.n	800230e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024e6:	4d1b      	ldr	r5, [pc, #108]	; (8002554 <HAL_RCC_OscConfig+0x2d4>)
 80024e8:	68ab      	ldr	r3, [r5, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	f43f aeca 	beq.w	8002288 <HAL_RCC_OscConfig+0x8>
 80024f4:	4e1b      	ldr	r6, [pc, #108]	; (8002564 <HAL_RCC_OscConfig+0x2e4>)
 80024f6:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80024fa:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024fc:	d134      	bne.n	8002568 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80024fe:	f7fe fd37 	bl	8000f70 <HAL_GetTick>
 8002502:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002504:	682b      	ldr	r3, [r5, #0]
 8002506:	0199      	lsls	r1, r3, #6
 8002508:	d41e      	bmi.n	8002548 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800250a:	6a22      	ldr	r2, [r4, #32]
 800250c:	69e3      	ldr	r3, [r4, #28]
 800250e:	4313      	orrs	r3, r2
 8002510:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002512:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002516:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002518:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800251c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251e:	4c0d      	ldr	r4, [pc, #52]	; (8002554 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002520:	0852      	lsrs	r2, r2, #1
 8002522:	3a01      	subs	r2, #1
 8002524:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002528:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800252a:	2301      	movs	r3, #1
 800252c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800252e:	f7fe fd1f 	bl	8000f70 <HAL_GetTick>
 8002532:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002534:	6823      	ldr	r3, [r4, #0]
 8002536:	019a      	lsls	r2, r3, #6
 8002538:	f53f aebc 	bmi.w	80022b4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253c:	f7fe fd18 	bl	8000f70 <HAL_GetTick>
 8002540:	1b40      	subs	r0, r0, r5
 8002542:	2802      	cmp	r0, #2
 8002544:	d9f6      	bls.n	8002534 <HAL_RCC_OscConfig+0x2b4>
 8002546:	e6e2      	b.n	800230e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe fd12 	bl	8000f70 <HAL_GetTick>
 800254c:	1bc0      	subs	r0, r0, r7
 800254e:	2802      	cmp	r0, #2
 8002550:	d9d8      	bls.n	8002504 <HAL_RCC_OscConfig+0x284>
 8002552:	e6dc      	b.n	800230e <HAL_RCC_OscConfig+0x8e>
 8002554:	40023800 	.word	0x40023800
 8002558:	42470000 	.word	0x42470000
 800255c:	42470e80 	.word	0x42470e80
 8002560:	40007000 	.word	0x40007000
 8002564:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002568:	f7fe fd02 	bl	8000f70 <HAL_GetTick>
 800256c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256e:	682b      	ldr	r3, [r5, #0]
 8002570:	019b      	lsls	r3, r3, #6
 8002572:	f57f ae9f 	bpl.w	80022b4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002576:	f7fe fcfb 	bl	8000f70 <HAL_GetTick>
 800257a:	1b00      	subs	r0, r0, r4
 800257c:	2802      	cmp	r0, #2
 800257e:	d9f6      	bls.n	800256e <HAL_RCC_OscConfig+0x2ee>
 8002580:	e6c5      	b.n	800230e <HAL_RCC_OscConfig+0x8e>
 8002582:	bf00      	nop

08002584 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002584:	4910      	ldr	r1, [pc, #64]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x44>)
{
 8002586:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002588:	688b      	ldr	r3, [r1, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b08      	cmp	r3, #8
 8002590:	d118      	bne.n	80025c4 <HAL_RCC_GetSysClockFreq+0x40>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002592:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002594:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002596:	6849      	ldr	r1, [r1, #4]
 8002598:	480c      	ldr	r0, [pc, #48]	; (80025cc <HAL_RCC_GetSysClockFreq+0x48>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800259a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80025a2:	bf18      	it	ne
 80025a4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025aa:	fba1 0100 	umull	r0, r1, r1, r0
 80025ae:	f7fe fb31 	bl	8000c14 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x44>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80025ba:	3301      	adds	r3, #1
 80025bc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80025be:	fbb0 f0f3 	udiv	r0, r0, r3
 80025c2:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80025c4:	4801      	ldr	r0, [pc, #4]	; (80025cc <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80025c6:	bd08      	pop	{r3, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	00f42400 	.word	0x00f42400

080025d0 <HAL_RCC_ClockConfig>:
{
 80025d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025d4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80025d6:	4604      	mov	r4, r0
 80025d8:	b910      	cbnz	r0, 80025e0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80025da:	2001      	movs	r0, #1
 80025dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b44      	ldr	r3, [pc, #272]	; (80026f4 <HAL_RCC_ClockConfig+0x124>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	f002 020f 	and.w	r2, r2, #15
 80025e8:	428a      	cmp	r2, r1
 80025ea:	d328      	bcc.n	800263e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ec:	6821      	ldr	r1, [r4, #0]
 80025ee:	078f      	lsls	r7, r1, #30
 80025f0:	d42d      	bmi.n	800264e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f2:	07c8      	lsls	r0, r1, #31
 80025f4:	d440      	bmi.n	8002678 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025f6:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <HAL_RCC_ClockConfig+0x124>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	f002 020f 	and.w	r2, r2, #15
 80025fe:	4295      	cmp	r5, r2
 8002600:	d366      	bcc.n	80026d0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002602:	6822      	ldr	r2, [r4, #0]
 8002604:	0751      	lsls	r1, r2, #29
 8002606:	d46c      	bmi.n	80026e2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	0713      	lsls	r3, r2, #28
 800260a:	d507      	bpl.n	800261c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800260c:	4a3a      	ldr	r2, [pc, #232]	; (80026f8 <HAL_RCC_ClockConfig+0x128>)
 800260e:	6921      	ldr	r1, [r4, #16]
 8002610:	6893      	ldr	r3, [r2, #8]
 8002612:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002616:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800261a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800261c:	f7ff ffb2 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8002620:	4b35      	ldr	r3, [pc, #212]	; (80026f8 <HAL_RCC_ClockConfig+0x128>)
 8002622:	4a36      	ldr	r2, [pc, #216]	; (80026fc <HAL_RCC_ClockConfig+0x12c>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800262a:	5cd3      	ldrb	r3, [r2, r3]
 800262c:	40d8      	lsrs	r0, r3
 800262e:	4b34      	ldr	r3, [pc, #208]	; (8002700 <HAL_RCC_ClockConfig+0x130>)
 8002630:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002632:	2000      	movs	r0, #0
 8002634:	f003 f8f8 	bl	8005828 <HAL_InitTick>
  return HAL_OK;
 8002638:	2000      	movs	r0, #0
 800263a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	b2ca      	uxtb	r2, r1
 8002640:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	4299      	cmp	r1, r3
 800264a:	d1c6      	bne.n	80025da <HAL_RCC_ClockConfig+0xa>
 800264c:	e7ce      	b.n	80025ec <HAL_RCC_ClockConfig+0x1c>
 800264e:	4b2a      	ldr	r3, [pc, #168]	; (80026f8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002654:	bf1e      	ittt	ne
 8002656:	689a      	ldrne	r2, [r3, #8]
 8002658:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800265c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002660:	bf42      	ittt	mi
 8002662:	689a      	ldrmi	r2, [r3, #8]
 8002664:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002668:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	68a0      	ldr	r0, [r4, #8]
 800266e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002672:	4302      	orrs	r2, r0
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	e7bc      	b.n	80025f2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002678:	6862      	ldr	r2, [r4, #4]
 800267a:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <HAL_RCC_ClockConfig+0x128>)
 800267c:	2a01      	cmp	r2, #1
 800267e:	d11d      	bne.n	80026bc <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002686:	d0a8      	beq.n	80025da <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002688:	4e1b      	ldr	r6, [pc, #108]	; (80026f8 <HAL_RCC_ClockConfig+0x128>)
 800268a:	68b3      	ldr	r3, [r6, #8]
 800268c:	f023 0303 	bic.w	r3, r3, #3
 8002690:	4313      	orrs	r3, r2
 8002692:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002694:	f7fe fc6c 	bl	8000f70 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002698:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800269c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	68b3      	ldr	r3, [r6, #8]
 80026a0:	6862      	ldr	r2, [r4, #4]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80026aa:	d0a4      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ac:	f7fe fc60 	bl	8000f70 <HAL_GetTick>
 80026b0:	1bc0      	subs	r0, r0, r7
 80026b2:	4540      	cmp	r0, r8
 80026b4:	d9f3      	bls.n	800269e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80026b6:	2003      	movs	r0, #3
}
 80026b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026bc:	1e91      	subs	r1, r2, #2
 80026be:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026c2:	d802      	bhi.n	80026ca <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80026c8:	e7dd      	b.n	8002686 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ca:	f013 0f02 	tst.w	r3, #2
 80026ce:	e7da      	b.n	8002686 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d0:	b2ea      	uxtb	r2, r5
 80026d2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	429d      	cmp	r5, r3
 80026dc:	f47f af7d 	bne.w	80025da <HAL_RCC_ClockConfig+0xa>
 80026e0:	e78f      	b.n	8002602 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e2:	4905      	ldr	r1, [pc, #20]	; (80026f8 <HAL_RCC_ClockConfig+0x128>)
 80026e4:	68e0      	ldr	r0, [r4, #12]
 80026e6:	688b      	ldr	r3, [r1, #8]
 80026e8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80026ec:	4303      	orrs	r3, r0
 80026ee:	608b      	str	r3, [r1, #8]
 80026f0:	e78a      	b.n	8002608 <HAL_RCC_ClockConfig+0x38>
 80026f2:	bf00      	nop
 80026f4:	40023c00 	.word	0x40023c00
 80026f8:	40023800 	.word	0x40023800
 80026fc:	08007778 	.word	0x08007778
 8002700:	20000118 	.word	0x20000118

08002704 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002704:	4b01      	ldr	r3, [pc, #4]	; (800270c <HAL_RCC_GetHCLKFreq+0x8>)
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000118 	.word	0x20000118

08002710 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002712:	4a05      	ldr	r2, [pc, #20]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	4a03      	ldr	r2, [pc, #12]	; (800272c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800271e:	6810      	ldr	r0, [r2, #0]
}
 8002720:	40d8      	lsrs	r0, r3
 8002722:	4770      	bx	lr
 8002724:	40023800 	.word	0x40023800
 8002728:	08007788 	.word	0x08007788
 800272c:	20000118 	.word	0x20000118

08002730 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002732:	4a05      	ldr	r2, [pc, #20]	; (8002748 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800273a:	5cd3      	ldrb	r3, [r2, r3]
 800273c:	4a03      	ldr	r2, [pc, #12]	; (800274c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800273e:	6810      	ldr	r0, [r2, #0]
}
 8002740:	40d8      	lsrs	r0, r3
 8002742:	4770      	bx	lr
 8002744:	40023800 	.word	0x40023800
 8002748:	08007788 	.word	0x08007788
 800274c:	20000118 	.word	0x20000118

08002750 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002750:	230f      	movs	r3, #15
 8002752:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_GetClockConfig+0x34>)
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	f002 0203 	and.w	r2, r2, #3
 800275c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002764:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800276c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	08db      	lsrs	r3, r3, #3
 8002772:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002776:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_RCC_GetClockConfig+0x38>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	600b      	str	r3, [r1, #0]
 8002782:	4770      	bx	lr
 8002784:	40023800 	.word	0x40023800
 8002788:	40023c00 	.word	0x40023c00

0800278c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800278c:	6a03      	ldr	r3, [r0, #32]
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002794:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002796:	6842      	ldr	r2, [r0, #4]
{
 8002798:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800279a:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800279c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800279e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80027a2:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027a4:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80027a6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80027aa:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80027ac:	4c0c      	ldr	r4, [pc, #48]	; (80027e0 <TIM_OC1_SetConfig+0x54>)
 80027ae:	42a0      	cmp	r0, r4
 80027b0:	d009      	beq.n	80027c6 <TIM_OC1_SetConfig+0x3a>
 80027b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027b6:	42a0      	cmp	r0, r4
 80027b8:	d005      	beq.n	80027c6 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ba:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027bc:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80027be:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80027c0:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80027c2:	6203      	str	r3, [r0, #32]
} 
 80027c4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 80027c6:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80027c8:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80027ca:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80027ce:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80027d0:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80027d6:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80027d8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80027dc:	4322      	orrs	r2, r4
 80027de:	e7ec      	b.n	80027ba <TIM_OC1_SetConfig+0x2e>
 80027e0:	40010000 	.word	0x40010000

080027e4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027e4:	6a03      	ldr	r3, [r0, #32]
 80027e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027ea:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ec:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80027ee:	6842      	ldr	r2, [r0, #4]
{
 80027f0:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027f2:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80027f6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80027fa:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027fc:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80027fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002802:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002806:	4c0e      	ldr	r4, [pc, #56]	; (8002840 <TIM_OC3_SetConfig+0x5c>)
 8002808:	42a0      	cmp	r0, r4
 800280a:	d009      	beq.n	8002820 <TIM_OC3_SetConfig+0x3c>
 800280c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002810:	42a0      	cmp	r0, r4
 8002812:	d005      	beq.n	8002820 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002814:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002816:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002818:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800281a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800281c:	6203      	str	r3, [r0, #32]
}
 800281e:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002820:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002822:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002828:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800282c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800282e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002832:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002834:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002838:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800283c:	e7ea      	b.n	8002814 <TIM_OC3_SetConfig+0x30>
 800283e:	bf00      	nop
 8002840:	40010000 	.word	0x40010000

08002844 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002844:	6a03      	ldr	r3, [r0, #32]
 8002846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800284a:	6203      	str	r3, [r0, #32]
{
 800284c:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284e:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002850:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002852:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002854:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002856:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800285a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800285e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002860:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002864:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002868:	4d09      	ldr	r5, [pc, #36]	; (8002890 <TIM_OC4_SetConfig+0x4c>)
 800286a:	42a8      	cmp	r0, r5
 800286c:	d009      	beq.n	8002882 <TIM_OC4_SetConfig+0x3e>
 800286e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002872:	42a8      	cmp	r0, r5
 8002874:	d005      	beq.n	8002882 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002876:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002878:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800287a:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800287c:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800287e:	6204      	str	r4, [r0, #32]
}
 8002880:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002882:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002884:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002888:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800288c:	e7f3      	b.n	8002876 <TIM_OC4_SetConfig+0x32>
 800288e:	bf00      	nop
 8002890:	40010000 	.word	0x40010000

08002894 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002894:	6803      	ldr	r3, [r0, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	f042 0201 	orr.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
}
 80028a6:	2000      	movs	r0, #0
 80028a8:	4770      	bx	lr

080028aa <HAL_TIM_OC_DelayElapsedCallback>:
 80028aa:	4770      	bx	lr

080028ac <HAL_TIM_IC_CaptureCallback>:
 80028ac:	4770      	bx	lr

080028ae <HAL_TIM_PWM_PulseFinishedCallback>:
 80028ae:	4770      	bx	lr

080028b0 <HAL_TIM_TriggerCallback>:
 80028b0:	4770      	bx	lr

080028b2 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028b2:	6803      	ldr	r3, [r0, #0]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	0791      	lsls	r1, r2, #30
{
 80028b8:	b510      	push	{r4, lr}
 80028ba:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028bc:	d50e      	bpl.n	80028dc <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	0792      	lsls	r2, r2, #30
 80028c2:	d50b      	bpl.n	80028dc <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028c4:	f06f 0202 	mvn.w	r2, #2
 80028c8:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028ca:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028cc:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028ce:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028d0:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028d2:	d077      	beq.n	80029c4 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80028d4:	f7ff ffea 	bl	80028ac <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d8:	2300      	movs	r3, #0
 80028da:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	0750      	lsls	r0, r2, #29
 80028e2:	d510      	bpl.n	8002906 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	0751      	lsls	r1, r2, #29
 80028e8:	d50d      	bpl.n	8002906 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028ea:	f06f 0204 	mvn.w	r2, #4
 80028ee:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028f0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028f2:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028f4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028f8:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028fc:	d068      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	f7ff ffd5 	bl	80028ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	2300      	movs	r3, #0
 8002904:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	0712      	lsls	r2, r2, #28
 800290c:	d50f      	bpl.n	800292e <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	0710      	lsls	r0, r2, #28
 8002912:	d50c      	bpl.n	800292e <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002914:	f06f 0208 	mvn.w	r2, #8
 8002918:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800291a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800291c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800291e:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002920:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002922:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002924:	d05a      	beq.n	80029dc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002926:	f7ff ffc1 	bl	80028ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292a:	2300      	movs	r3, #0
 800292c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800292e:	6823      	ldr	r3, [r4, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	06d2      	lsls	r2, r2, #27
 8002934:	d510      	bpl.n	8002958 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	06d0      	lsls	r0, r2, #27
 800293a:	d50d      	bpl.n	8002958 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800293c:	f06f 0210 	mvn.w	r2, #16
 8002940:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002942:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002944:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002946:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800294a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800294c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800294e:	d04b      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002950:	f7ff ffac 	bl	80028ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002954:	2300      	movs	r3, #0
 8002956:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	07d1      	lsls	r1, r2, #31
 800295e:	d508      	bpl.n	8002972 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	07d2      	lsls	r2, r2, #31
 8002964:	d505      	bpl.n	8002972 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002966:	f06f 0201 	mvn.w	r2, #1
 800296a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800296c:	4620      	mov	r0, r4
 800296e:	f002 fa5f 	bl	8004e30 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	0610      	lsls	r0, r2, #24
 8002978:	d508      	bpl.n	800298c <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	0611      	lsls	r1, r2, #24
 800297e:	d505      	bpl.n	800298c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002984:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002986:	4620      	mov	r0, r4
 8002988:	f000 f9a9 	bl	8002cde <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	0652      	lsls	r2, r2, #25
 8002992:	d508      	bpl.n	80029a6 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	0650      	lsls	r0, r2, #25
 8002998:	d505      	bpl.n	80029a6 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800299a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800299e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80029a0:	4620      	mov	r0, r4
 80029a2:	f7ff ff85 	bl	80028b0 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	0691      	lsls	r1, r2, #26
 80029ac:	d522      	bpl.n	80029f4 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	0692      	lsls	r2, r2, #26
 80029b2:	d51f      	bpl.n	80029f4 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029b4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80029b8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029ba:	611a      	str	r2, [r3, #16]
}
 80029bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80029c0:	f000 b98c 	b.w	8002cdc <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c4:	f7ff ff71 	bl	80028aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c8:	4620      	mov	r0, r4
 80029ca:	f7ff ff70 	bl	80028ae <HAL_TIM_PWM_PulseFinishedCallback>
 80029ce:	e783      	b.n	80028d8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d0:	f7ff ff6b 	bl	80028aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	4620      	mov	r0, r4
 80029d6:	f7ff ff6a 	bl	80028ae <HAL_TIM_PWM_PulseFinishedCallback>
 80029da:	e792      	b.n	8002902 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029dc:	f7ff ff65 	bl	80028aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80029e0:	4620      	mov	r0, r4
 80029e2:	f7ff ff64 	bl	80028ae <HAL_TIM_PWM_PulseFinishedCallback>
 80029e6:	e7a0      	b.n	800292a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e8:	f7ff ff5f 	bl	80028aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	4620      	mov	r0, r4
 80029ee:	f7ff ff5e 	bl	80028ae <HAL_TIM_PWM_PulseFinishedCallback>
 80029f2:	e7af      	b.n	8002954 <HAL_TIM_IRQHandler+0xa2>
 80029f4:	bd10      	pop	{r4, pc}
	...

080029f8 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80029f8:	4a2e      	ldr	r2, [pc, #184]	; (8002ab4 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80029fa:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80029fc:	4290      	cmp	r0, r2
 80029fe:	d012      	beq.n	8002a26 <TIM_Base_SetConfig+0x2e>
 8002a00:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a04:	d00f      	beq.n	8002a26 <TIM_Base_SetConfig+0x2e>
 8002a06:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002a0a:	4290      	cmp	r0, r2
 8002a0c:	d00b      	beq.n	8002a26 <TIM_Base_SetConfig+0x2e>
 8002a0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a12:	4290      	cmp	r0, r2
 8002a14:	d007      	beq.n	8002a26 <TIM_Base_SetConfig+0x2e>
 8002a16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a1a:	4290      	cmp	r0, r2
 8002a1c:	d003      	beq.n	8002a26 <TIM_Base_SetConfig+0x2e>
 8002a1e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002a22:	4290      	cmp	r0, r2
 8002a24:	d11d      	bne.n	8002a62 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8002a26:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a2c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002a2e:	4a21      	ldr	r2, [pc, #132]	; (8002ab4 <TIM_Base_SetConfig+0xbc>)
 8002a30:	4290      	cmp	r0, r2
 8002a32:	d104      	bne.n	8002a3e <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a34:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	e028      	b.n	8002a90 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002a3e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a42:	d0f7      	beq.n	8002a34 <TIM_Base_SetConfig+0x3c>
 8002a44:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <TIM_Base_SetConfig+0xc0>)
 8002a46:	4290      	cmp	r0, r2
 8002a48:	d0f4      	beq.n	8002a34 <TIM_Base_SetConfig+0x3c>
 8002a4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a4e:	4290      	cmp	r0, r2
 8002a50:	d0f0      	beq.n	8002a34 <TIM_Base_SetConfig+0x3c>
 8002a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a56:	4290      	cmp	r0, r2
 8002a58:	d0ec      	beq.n	8002a34 <TIM_Base_SetConfig+0x3c>
 8002a5a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002a5e:	4290      	cmp	r0, r2
 8002a60:	d0e8      	beq.n	8002a34 <TIM_Base_SetConfig+0x3c>
 8002a62:	4a16      	ldr	r2, [pc, #88]	; (8002abc <TIM_Base_SetConfig+0xc4>)
 8002a64:	4290      	cmp	r0, r2
 8002a66:	d0e5      	beq.n	8002a34 <TIM_Base_SetConfig+0x3c>
 8002a68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a6c:	4290      	cmp	r0, r2
 8002a6e:	d0e1      	beq.n	8002a34 <TIM_Base_SetConfig+0x3c>
 8002a70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a74:	4290      	cmp	r0, r2
 8002a76:	d0dd      	beq.n	8002a34 <TIM_Base_SetConfig+0x3c>
 8002a78:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002a7c:	4290      	cmp	r0, r2
 8002a7e:	d0d9      	beq.n	8002a34 <TIM_Base_SetConfig+0x3c>
 8002a80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a84:	4290      	cmp	r0, r2
 8002a86:	d0d5      	beq.n	8002a34 <TIM_Base_SetConfig+0x3c>
 8002a88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a8c:	4290      	cmp	r0, r2
 8002a8e:	d0d1      	beq.n	8002a34 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8002a90:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a92:	688b      	ldr	r3, [r1, #8]
 8002a94:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002a96:	680b      	ldr	r3, [r1, #0]
 8002a98:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <TIM_Base_SetConfig+0xbc>)
 8002a9c:	4298      	cmp	r0, r3
 8002a9e:	d006      	beq.n	8002aae <TIM_Base_SetConfig+0xb6>
 8002aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aa4:	4298      	cmp	r0, r3
 8002aa6:	d002      	beq.n	8002aae <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	6143      	str	r3, [r0, #20]
}
 8002aac:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002aae:	690b      	ldr	r3, [r1, #16]
 8002ab0:	6303      	str	r3, [r0, #48]	; 0x30
 8002ab2:	e7f9      	b.n	8002aa8 <TIM_Base_SetConfig+0xb0>
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	40000400 	.word	0x40000400
 8002abc:	40014000 	.word	0x40014000

08002ac0 <HAL_TIM_Base_Init>:
{ 
 8002ac0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	b1a0      	cbz	r0, 8002af0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002ac6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002aca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ace:	b91b      	cbnz	r3, 8002ad8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002ad0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002ad4:	f002 fe28 	bl	8005728 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002ade:	6820      	ldr	r0, [r4, #0]
 8002ae0:	1d21      	adds	r1, r4, #4
 8002ae2:	f7ff ff89 	bl	80029f8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002aec:	2000      	movs	r0, #0
 8002aee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002af0:	2001      	movs	r0, #1
}
 8002af2:	bd10      	pop	{r4, pc}

08002af4 <HAL_TIM_PWM_Init>:
{
 8002af4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002af6:	4604      	mov	r4, r0
 8002af8:	b1a0      	cbz	r0, 8002b24 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002afa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002afe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b02:	b91b      	cbnz	r3, 8002b0c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002b04:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002b08:	f002 fdd4 	bl	80056b4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002b12:	6820      	ldr	r0, [r4, #0]
 8002b14:	1d21      	adds	r1, r4, #4
 8002b16:	f7ff ff6f 	bl	80029f8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002b20:	2000      	movs	r0, #0
 8002b22:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b24:	2001      	movs	r0, #1
}  
 8002b26:	bd10      	pop	{r4, pc}

08002b28 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b28:	6a03      	ldr	r3, [r0, #32]
 8002b2a:	f023 0310 	bic.w	r3, r3, #16
 8002b2e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002b30:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002b32:	6842      	ldr	r2, [r0, #4]
{
 8002b34:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8002b36:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b38:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b3a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b3e:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b42:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002b44:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b48:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002b4c:	4c0d      	ldr	r4, [pc, #52]	; (8002b84 <TIM_OC2_SetConfig+0x5c>)
 8002b4e:	42a0      	cmp	r0, r4
 8002b50:	d009      	beq.n	8002b66 <TIM_OC2_SetConfig+0x3e>
 8002b52:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b56:	42a0      	cmp	r0, r4
 8002b58:	d005      	beq.n	8002b66 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8002b5a:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002b5c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002b5e:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002b60:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002b62:	6203      	str	r3, [r0, #32]
}
 8002b64:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b66:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b68:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b6e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b72:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b78:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b7e:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8002b82:	e7ea      	b.n	8002b5a <TIM_OC2_SetConfig+0x32>
 8002b84:	40010000 	.word	0x40010000

08002b88 <HAL_TIM_PWM_ConfigChannel>:
{
 8002b88:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002b8a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002b8e:	2b01      	cmp	r3, #1
{
 8002b90:	4604      	mov	r4, r0
 8002b92:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002b96:	d025      	beq.n	8002be4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8002ba2:	2a0c      	cmp	r2, #12
 8002ba4:	d818      	bhi.n	8002bd8 <HAL_TIM_PWM_ConfigChannel+0x50>
 8002ba6:	e8df f002 	tbb	[pc, r2]
 8002baa:	1707      	.short	0x1707
 8002bac:	171e1717 	.word	0x171e1717
 8002bb0:	172f1717 	.word	0x172f1717
 8002bb4:	1717      	.short	0x1717
 8002bb6:	40          	.byte	0x40
 8002bb7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bb8:	6820      	ldr	r0, [r4, #0]
 8002bba:	f7ff fde7 	bl	800278c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bbe:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bc0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bc2:	699a      	ldr	r2, [r3, #24]
 8002bc4:	f042 0208 	orr.w	r2, r2, #8
 8002bc8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	f022 0204 	bic.w	r2, r2, #4
 8002bd0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bd2:	699a      	ldr	r2, [r3, #24]
 8002bd4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bd6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002bd8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002bda:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002bdc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002be0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002be4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002be6:	6820      	ldr	r0, [r4, #0]
 8002be8:	f7ff ff9e 	bl	8002b28 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bec:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bee:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c06:	e7e6      	b.n	8002bd6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c08:	6820      	ldr	r0, [r4, #0]
 8002c0a:	f7ff fdeb 	bl	80027e4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c0e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002c10:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c12:	69da      	ldr	r2, [r3, #28]
 8002c14:	f042 0208 	orr.w	r2, r2, #8
 8002c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c1a:	69da      	ldr	r2, [r3, #28]
 8002c1c:	f022 0204 	bic.w	r2, r2, #4
 8002c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002c22:	69da      	ldr	r2, [r3, #28]
 8002c24:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002c26:	61da      	str	r2, [r3, #28]
    break;
 8002c28:	e7d6      	b.n	8002bd8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c2a:	6820      	ldr	r0, [r4, #0]
 8002c2c:	f7ff fe0a 	bl	8002844 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c30:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002c32:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c34:	69da      	ldr	r2, [r3, #28]
 8002c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c3a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002c44:	69da      	ldr	r2, [r3, #28]
 8002c46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c4a:	e7ec      	b.n	8002c26 <HAL_TIM_PWM_ConfigChannel+0x9e>

08002c4c <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8002c4c:	6a03      	ldr	r3, [r0, #32]
{
 8002c4e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8002c50:	2401      	movs	r4, #1
 8002c52:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002c54:	ea23 0304 	bic.w	r3, r3, r4
 8002c58:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002c5a:	6a03      	ldr	r3, [r0, #32]
 8002c5c:	408a      	lsls	r2, r1
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	6202      	str	r2, [r0, #32]
 8002c62:	bd10      	pop	{r4, pc}

08002c64 <HAL_TIM_PWM_Start>:
{
 8002c64:	b510      	push	{r4, lr}
 8002c66:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c68:	2201      	movs	r2, #1
 8002c6a:	6800      	ldr	r0, [r0, #0]
 8002c6c:	f7ff ffee 	bl	8002c4c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <HAL_TIM_PWM_Start+0x30>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d003      	beq.n	8002c80 <HAL_TIM_PWM_Start+0x1c>
 8002c78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d103      	bne.n	8002c88 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8002c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c86:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
} 
 8002c90:	2000      	movs	r0, #0
 8002c92:	bd10      	pop	{r4, pc}
 8002c94:	40010000 	.word	0x40010000

08002c98 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002c98:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002c9c:	2b01      	cmp	r3, #1
{
 8002c9e:	b510      	push	{r4, lr}
 8002ca0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002ca4:	d018      	beq.n	8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002caa:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002cac:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002cae:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002cb0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002cb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002cb6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	4322      	orrs	r2, r4
 8002cbc:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002cd8:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8002cda:	bd10      	pop	{r4, pc}

08002cdc <HAL_TIMEx_CommutationCallback>:
 8002cdc:	4770      	bx	lr

08002cde <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cde:	4770      	bx	lr

08002ce0 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	b538      	push	{r3, r4, r5, lr}
 8002ce4:	ad05      	add	r5, sp, #20
 8002ce6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cec:	2b01      	cmp	r3, #1
{
 8002cee:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cf0:	d126      	bne.n	8002d40 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cf2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf8:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002cfa:	68c3      	ldr	r3, [r0, #12]
 8002cfc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d04:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d06:	68c3      	ldr	r3, [r0, #12]
 8002d08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002d0c:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8002d0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d10:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d12:	bf02      	ittt	eq
 8002d14:	68c3      	ldreq	r3, [r0, #12]
 8002d16:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002d1a:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8002d1c:	f000 fbde 	bl	80034dc <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8002d20:	9b08      	ldr	r3, [sp, #32]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d107      	bne.n	8002d36 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d26:	68a3      	ldr	r3, [r4, #8]
 8002d28:	f043 0306 	orr.w	r3, r3, #6
 8002d2c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d2e:	68a3      	ldr	r3, [r4, #8]
 8002d30:	f043 0320 	orr.w	r3, r3, #32
 8002d34:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8002d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	b004      	add	sp, #16
 8002d3e:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d40:	68c3      	ldr	r3, [r0, #12]
 8002d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d46:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8002d48:	f000 fbc8 	bl	80034dc <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d50:	63a3      	str	r3, [r4, #56]	; 0x38
 8002d52:	e7e5      	b.n	8002d20 <USB_CoreInit+0x40>

08002d54 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d54:	6883      	ldr	r3, [r0, #8]
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	4770      	bx	lr

08002d60 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d60:	6883      	ldr	r3, [r0, #8]
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002d68:	2000      	movs	r0, #0
 8002d6a:	4770      	bx	lr

08002d6c <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002d6c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002d6e:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002d70:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002d72:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002d76:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8002d78:	d108      	bne.n	8002d8c <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002d7a:	68c3      	ldr	r3, [r0, #12]
 8002d7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d80:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 8002d82:	2032      	movs	r0, #50	; 0x32
 8002d84:	f7fe f8fa 	bl	8000f7c <HAL_Delay>
  
  return HAL_OK;
}
 8002d88:	2000      	movs	r0, #0
 8002d8a:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002d8c:	2900      	cmp	r1, #0
 8002d8e:	d1f8      	bne.n	8002d82 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002d90:	68c3      	ldr	r3, [r0, #12]
 8002d92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d96:	60c3      	str	r3, [r0, #12]
 8002d98:	e7f3      	b.n	8002d82 <USB_SetCurrentMode+0x16>
	...

08002d9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002da2:	4604      	mov	r4, r0
 8002da4:	a807      	add	r0, sp, #28
 8002da6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002daa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8002dac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002dae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002db0:	4688      	mov	r8, r1
  if (cfg.vbus_sensing_enable == 0U)
 8002db2:	b9a6      	cbnz	r6, 8002dde <USB_DevInit+0x42>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002db4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002db8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002dc0:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002dc4:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8002dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002dca:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002dcc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8002dd0:	d15e      	bne.n	8002e90 <USB_DevInit+0xf4>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8002dd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002dd4:	b939      	cbnz	r1, 8002de6 <USB_DevInit+0x4a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	f000 f89e 	bl	8002f18 <USB_SetDevSpeed>
 8002ddc:	e007      	b.n	8002dee <USB_DevInit+0x52>
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002dde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002de2:	63a3      	str	r3, [r4, #56]	; 0x38
 8002de4:	e7e9      	b.n	8002dba <USB_DevInit+0x1e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8002de6:	4619      	mov	r1, r3
 8002de8:	4620      	mov	r0, r4
 8002dea:	f000 f895 	bl	8002f18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8002dee:	2110      	movs	r1, #16
 8002df0:	4620      	mov	r0, r4
 8002df2:	f000 f86f 	bl	8002ed4 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002df6:	4620      	mov	r0, r4
 8002df8:	f000 f87e 	bl	8002ef8 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002dfc:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002dfe:	f04f 32ff 	mov.w	r2, #4294967295
  USBx_DEVICE->DIEPMSK = 0U;
 8002e02:	612b      	str	r3, [r5, #16]
 8002e04:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 8002e06:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002e0c:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002e0e:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0U;
 8002e12:	61eb      	str	r3, [r5, #28]
 8002e14:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e18:	4543      	cmp	r3, r8
 8002e1a:	d13b      	bne.n	8002e94 <USB_DevInit+0xf8>
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
 8002e22:	4608      	mov	r0, r1
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002e24:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002e28:	f04f 0cff 	mov.w	ip, #255	; 0xff
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e2c:	428b      	cmp	r3, r1
 8002e2e:	d13e      	bne.n	8002eae <USB_DevInit+0x112>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e30:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 8002e32:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e38:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8002e3a:	d108      	bne.n	8002e4e <USB_DevInit+0xb2>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002e3c:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <USB_DevInit+0x130>)
 8002e3e:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8002e40:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e46:	f043 0303 	orr.w	r3, r3, #3
 8002e4a:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8002e4c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002e52:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002e56:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8002e58:	b91f      	cbnz	r7, 8002e62 <USB_DevInit+0xc6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8002e5a:	69a3      	ldr	r3, [r4, #24]
 8002e5c:	f043 0310 	orr.w	r3, r3, #16
 8002e60:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8002e62:	69a2      	ldr	r2, [r4, #24]
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <USB_DevInit+0x134>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8002e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e6c:	b11b      	cbz	r3, 8002e76 <USB_DevInit+0xda>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002e6e:	69a3      	ldr	r3, [r4, #24]
 8002e70:	f043 0308 	orr.w	r3, r3, #8
 8002e74:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8002e76:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8002e78:	bf01      	itttt	eq
 8002e7a:	69a3      	ldreq	r3, [r4, #24]
 8002e7c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002e80:	f043 0304 	orreq.w	r3, r3, #4
 8002e84:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8002e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	b004      	add	sp, #16
 8002e8e:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002e90:	2103      	movs	r1, #3
 8002e92:	e7a0      	b.n	8002dd6 <USB_DevInit+0x3a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e94:	f8d2 c000 	ldr.w	ip, [r2]
 8002e98:	f1bc 0f00 	cmp.w	ip, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002e9c:	bfb4      	ite	lt
 8002e9e:	6010      	strlt	r0, [r2, #0]
      USBx_INEP(i)->DIEPCTL = 0U;
 8002ea0:	6011      	strge	r1, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ea2:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002ea4:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002ea6:	f8c2 e008 	str.w	lr, [r2, #8]
 8002eaa:	3220      	adds	r2, #32
 8002eac:	e7b4      	b.n	8002e18 <USB_DevInit+0x7c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002eae:	f8d2 8000 	ldr.w	r8, [r2]
 8002eb2:	f1b8 0f00 	cmp.w	r8, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002eb6:	bfb4      	ite	lt
 8002eb8:	f8c2 e000 	strlt.w	lr, [r2]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002ebc:	6010      	strge	r0, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ebe:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002ec0:	6110      	str	r0, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002ec2:	f8c2 c008 	str.w	ip, [r2, #8]
 8002ec6:	3220      	adds	r2, #32
 8002ec8:	e7b0      	b.n	8002e2c <USB_DevInit+0x90>
 8002eca:	bf00      	nop
 8002ecc:	00800100 	.word	0x00800100
 8002ed0:	803c3800 	.word	0x803c3800

08002ed4 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002ed4:	0189      	lsls	r1, r1, #6
 8002ed6:	f041 0120 	orr.w	r1, r1, #32
 8002eda:	4a06      	ldr	r2, [pc, #24]	; (8002ef4 <USB_FlushTxFifo+0x20>)
 8002edc:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8002ede:	3a01      	subs	r2, #1
 8002ee0:	d005      	beq.n	8002eee <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002ee2:	6903      	ldr	r3, [r0, #16]
 8002ee4:	f013 0320 	ands.w	r3, r3, #32
 8002ee8:	d1f9      	bne.n	8002ede <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8002eea:	4618      	mov	r0, r3
 8002eec:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002eee:	2003      	movs	r0, #3
}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	00030d41 	.word	0x00030d41

08002ef8 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002ef8:	2310      	movs	r3, #16
 8002efa:	4a06      	ldr	r2, [pc, #24]	; (8002f14 <USB_FlushRxFifo+0x1c>)
 8002efc:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8002efe:	3a01      	subs	r2, #1
 8002f00:	d005      	beq.n	8002f0e <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f02:	6903      	ldr	r3, [r0, #16]
 8002f04:	f013 0310 	ands.w	r3, r3, #16
 8002f08:	d1f9      	bne.n	8002efe <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002f0e:	2003      	movs	r0, #3
}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	00030d41 	.word	0x00030d41

08002f18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8002f18:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002f1c:	4319      	orrs	r1, r3
 8002f1e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8002f22:	2000      	movs	r0, #0
 8002f24:	4770      	bx	lr

08002f26 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002f26:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8002f2a:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 8002f2e:	f010 0006 	ands.w	r0, r0, #6
 8002f32:	d012      	beq.n	8002f5a <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002f34:	6893      	ldr	r3, [r2, #8]
 8002f36:	f003 0306 	and.w	r3, r3, #6
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d00c      	beq.n	8002f58 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8002f3e:	6893      	ldr	r3, [r2, #8]
 8002f40:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002f44:	2b06      	cmp	r3, #6
 8002f46:	d007      	beq.n	8002f58 <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002f48:	6893      	ldr	r3, [r2, #8]
 8002f4a:	f003 0306 	and.w	r3, r3, #6
 8002f4e:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8002f50:	bf14      	ite	ne
 8002f52:	2000      	movne	r0, #0
 8002f54:	2002      	moveq	r0, #2
 8002f56:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8002f58:	2003      	movs	r0, #3
  }
  
  return speed;
}
 8002f5a:	4770      	bx	lr

08002f5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002f5c:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8002f5e:	784b      	ldrb	r3, [r1, #1]
 8002f60:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002f62:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8002f66:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d11b      	bne.n	8002fa6 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002f6e:	40a3      	lsls	r3, r4
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002f74:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002f78:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002f7a:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	0412      	lsls	r2, r2, #16
 8002f82:	d40e      	bmi.n	8002fa2 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002f84:	688a      	ldr	r2, [r1, #8]
 8002f86:	78c8      	ldrb	r0, [r1, #3]
 8002f88:	681d      	ldr	r5, [r3, #0]
 8002f8a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002f8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f96:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 8002f9a:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8002f9e:	4328      	orrs	r0, r5
 8002fa0:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8002fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002faa:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002fac:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8002fb0:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002fb2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8002fb6:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002fb8:	6803      	ldr	r3, [r0, #0]
 8002fba:	041b      	lsls	r3, r3, #16
 8002fbc:	d4f1      	bmi.n	8002fa2 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002fbe:	688b      	ldr	r3, [r1, #8]
 8002fc0:	78c9      	ldrb	r1, [r1, #3]
 8002fc2:	6802      	ldr	r2, [r0, #0]
 8002fc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	6003      	str	r3, [r0, #0]
 8002fd8:	e7e3      	b.n	8002fa2 <USB_ActivateEndpoint+0x46>

08002fda <USB_DeactivateEndpoint>:
 8002fda:	f000 b801 	b.w	8002fe0 <USB_DeactivateDedicatedEndpoint>
	...

08002fe0 <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002fe0:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8002fe2:	784b      	ldrb	r3, [r1, #1]
 8002fe4:	2b01      	cmp	r3, #1
{
 8002fe6:	460e      	mov	r6, r1
 8002fe8:	4605      	mov	r5, r0
 8002fea:	7809      	ldrb	r1, [r1, #0]
 8002fec:	f04f 0320 	mov.w	r3, #32
  if (ep->is_in == 1U)
 8002ff0:	d126      	bne.n	8003040 <USB_DeactivateDedicatedEndpoint+0x60>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8002ff2:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 8002ff6:	fb13 2301 	smlabb	r3, r3, r1, r2
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003000:	601a      	str	r2, [r3, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003002:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003006:	601a      	str	r2, [r3, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8003008:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	4a1f      	ldr	r2, [pc, #124]	; (800308c <USB_DeactivateDedicatedEndpoint+0xac>)
    
    do
    {
      if (++count > 200000U)
 8003010:	3a01      	subs	r2, #1
 8003012:	d101      	bne.n	8003018 <USB_DeactivateDedicatedEndpoint+0x38>
      {
        return HAL_TIMEOUT;
 8003014:	2003      	movs	r0, #3
 8003016:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8003018:	689c      	ldr	r4, [r3, #8]
 800301a:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 800301e:	d1f7      	bne.n	8003010 <USB_DeactivateDedicatedEndpoint+0x30>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8003020:	2110      	movs	r1, #16
 8003022:	4628      	mov	r0, r5
 8003024:	f7ff ff56 	bl	8002ed4 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8003028:	7831      	ldrb	r1, [r6, #0]
 800302a:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 800302e:	2301      	movs	r3, #1
 8003030:	408b      	lsls	r3, r1
 8003032:	b29b      	uxth	r3, r3
 8003034:	ea22 0303 	bic.w	r3, r2, r3
 8003038:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 800303c:	4620      	mov	r0, r4
 800303e:	bd70      	pop	{r4, r5, r6, pc}
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8003040:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8003044:	fb13 2301 	smlabb	r3, r3, r1, r2
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800304e:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003050:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003054:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8003056:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	4a0b      	ldr	r2, [pc, #44]	; (800308c <USB_DeactivateDedicatedEndpoint+0xac>)
      if (++count > 200000U)
 800305e:	3a01      	subs	r2, #1
 8003060:	d0d8      	beq.n	8003014 <USB_DeactivateDedicatedEndpoint+0x34>
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8003062:	6898      	ldr	r0, [r3, #8]
 8003064:	f010 0010 	ands.w	r0, r0, #16
 8003068:	d1f9      	bne.n	800305e <USB_DeactivateDedicatedEndpoint+0x7e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800306a:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800306e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003072:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 8003076:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 800307a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800307e:	408a      	lsls	r2, r1
 8003080:	ea23 0302 	bic.w	r3, r3, r2
 8003084:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c

}
 8003088:	bd70      	pop	{r4, r5, r6, pc}
 800308a:	bf00      	nop
 800308c:	00030d41 	.word	0x00030d41

08003090 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003092:	784b      	ldrb	r3, [r1, #1]
 8003094:	780c      	ldrb	r4, [r1, #0]
 8003096:	2b01      	cmp	r3, #1
 8003098:	694b      	ldr	r3, [r1, #20]
 800309a:	d177      	bne.n	800318c <USB_EPStartXfer+0xfc>
 800309c:	2620      	movs	r6, #32
 800309e:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80030a2:	fb16 5404 	smlabb	r4, r6, r4, r5
 80030a6:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d138      	bne.n	800311e <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80030ac:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 80030b0:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 80030b4:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80030b6:	6926      	ldr	r6, [r4, #16]
 80030b8:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 80030bc:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80030be:	6926      	ldr	r6, [r4, #16]
 80030c0:	0cf6      	lsrs	r6, r6, #19
 80030c2:	04f6      	lsls	r6, r6, #19
 80030c4:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 80030c6:	2a01      	cmp	r2, #1
 80030c8:	d150      	bne.n	800316c <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80030ca:	780c      	ldrb	r4, [r1, #0]
 80030cc:	690e      	ldr	r6, [r1, #16]
 80030ce:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 80030d2:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80030d4:	78ce      	ldrb	r6, [r1, #3]
 80030d6:	2e01      	cmp	r6, #1
 80030d8:	d10f      	bne.n	80030fa <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80030da:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80030de:	780f      	ldrb	r7, [r1, #0]
 80030e0:	f414 7f80 	tst.w	r4, #256	; 0x100
 80030e4:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80030e8:	fb14 5407 	smlabb	r4, r4, r7, r5
 80030ec:	6827      	ldr	r7, [r4, #0]
 80030ee:	bf0c      	ite	eq
 80030f0:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80030f4:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 80030f8:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80030fa:	780f      	ldrb	r7, [r1, #0]
 80030fc:	eb05 1547 	add.w	r5, r5, r7, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8003100:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003102:	682c      	ldr	r4, [r5, #0]
 8003104:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003108:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 800310a:	d105      	bne.n	8003118 <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 800310c:	9200      	str	r2, [sp, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	463a      	mov	r2, r7
 8003112:	68c9      	ldr	r1, [r1, #12]
 8003114:	f000 f8ef 	bl	80032f6 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8003118:	2000      	movs	r0, #0
 800311a:	b003      	add	sp, #12
 800311c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800311e:	0cf6      	lsrs	r6, r6, #19
 8003120:	04f6      	lsls	r6, r6, #19
 8003122:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003124:	6926      	ldr	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8003126:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003128:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 800312c:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8003130:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8003132:	19de      	adds	r6, r3, r7
 8003134:	3e01      	subs	r6, #1
 8003136:	fbb6 f7f7 	udiv	r7, r6, r7
 800313a:	4e37      	ldr	r6, [pc, #220]	; (8003218 <USB_EPStartXfer+0x188>)
 800313c:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8003140:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 8003144:	ea46 060e 	orr.w	r6, r6, lr
 8003148:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800314a:	6927      	ldr	r7, [r4, #16]
 800314c:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8003150:	433e      	orrs	r6, r7
 8003152:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8003154:	78ce      	ldrb	r6, [r1, #3]
 8003156:	2e01      	cmp	r6, #1
 8003158:	d15a      	bne.n	8003210 <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 800315a:	6926      	ldr	r6, [r4, #16]
 800315c:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8003160:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8003162:	6926      	ldr	r6, [r4, #16]
 8003164:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8003168:	6126      	str	r6, [r4, #16]
 800316a:	e7ac      	b.n	80030c6 <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 800316c:	78ce      	ldrb	r6, [r1, #3]
 800316e:	2e01      	cmp	r6, #1
 8003170:	d0b3      	beq.n	80030da <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0U)
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0ae      	beq.n	80030d4 <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8003176:	f891 e000 	ldrb.w	lr, [r1]
 800317a:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 800317e:	2401      	movs	r4, #1
 8003180:	fa04 f40e 	lsl.w	r4, r4, lr
 8003184:	433c      	orrs	r4, r7
 8003186:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 800318a:	e7a3      	b.n	80030d4 <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800318c:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 8003190:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8003194:	6925      	ldr	r5, [r4, #16]
 8003196:	0ced      	lsrs	r5, r5, #19
 8003198:	04ed      	lsls	r5, r5, #19
 800319a:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800319c:	6925      	ldr	r5, [r4, #16]
 800319e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80031a2:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80031a6:	6125      	str	r5, [r4, #16]
 80031a8:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 80031aa:	b9fb      	cbnz	r3, 80031ec <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80031ac:	6923      	ldr	r3, [r4, #16]
 80031ae:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80031b2:	431d      	orrs	r5, r3
 80031b4:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80031b6:	6923      	ldr	r3, [r4, #16]
 80031b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031bc:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 80031be:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80031c0:	bf04      	itt	eq
 80031c2:	68cb      	ldreq	r3, [r1, #12]
 80031c4:	6163      	streq	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 80031c6:	78cb      	ldrb	r3, [r1, #3]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d10a      	bne.n	80031e2 <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80031cc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80031d0:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	bf0c      	ite	eq
 80031d8:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80031dc:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80031e0:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80031e8:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 80031ea:	e795      	b.n	8003118 <USB_EPStartXfer+0x88>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 80031ec:	4e0a      	ldr	r6, [pc, #40]	; (8003218 <USB_EPStartXfer+0x188>)
 80031ee:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 80031f0:	442b      	add	r3, r5
 80031f2:	3b01      	subs	r3, #1
 80031f4:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 80031f8:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 80031fc:	433e      	orrs	r6, r7
 80031fe:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8003200:	b29b      	uxth	r3, r3
 8003202:	6926      	ldr	r6, [r4, #16]
 8003204:	435d      	muls	r5, r3
 8003206:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800320a:	4335      	orrs	r5, r6
 800320c:	6125      	str	r5, [r4, #16]
 800320e:	e7d6      	b.n	80031be <USB_EPStartXfer+0x12e>
    if (dma == 1U)
 8003210:	2a01      	cmp	r2, #1
 8003212:	d1ae      	bne.n	8003172 <USB_EPStartXfer+0xe2>
 8003214:	e759      	b.n	80030ca <USB_EPStartXfer+0x3a>
 8003216:	bf00      	nop
 8003218:	1ff80000 	.word	0x1ff80000

0800321c <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 800321c:	784b      	ldrb	r3, [r1, #1]
 800321e:	2b01      	cmp	r3, #1
{
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	780b      	ldrb	r3, [r1, #0]
 8003224:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1U)
 8003226:	d143      	bne.n	80032b0 <USB_EP0StartXfer+0x94>
 8003228:	2420      	movs	r4, #32
 800322a:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800322e:	fb14 6303 	smlabb	r3, r4, r3, r6
 8003232:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8003234:	b9cd      	cbnz	r5, 800326a <USB_EP0StartXfer+0x4e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003236:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800323a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800323e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003240:	691c      	ldr	r4, [r3, #16]
 8003242:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003246:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003248:	691c      	ldr	r4, [r3, #16]
 800324a:	0ce4      	lsrs	r4, r4, #19
 800324c:	04e4      	lsls	r4, r4, #19
 800324e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8003250:	780d      	ldrb	r5, [r1, #0]
 8003252:	eb06 1345 	add.w	r3, r6, r5, lsl #5
    
    if (dma == 1)
 8003256:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8003258:	681c      	ldr	r4, [r3, #0]
 800325a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800325e:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 8003260:	d11b      	bne.n	800329a <USB_EP0StartXfer+0x7e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003262:	690a      	ldr	r2, [r1, #16]
 8003264:	615a      	str	r2, [r3, #20]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8003266:	2000      	movs	r0, #0
 8003268:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800326a:	0ce4      	lsrs	r4, r4, #19
 800326c:	04e4      	lsls	r4, r4, #19
 800326e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003270:	691c      	ldr	r4, [r3, #16]
 8003272:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003276:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800327a:	611c      	str	r4, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 800327c:	688c      	ldr	r4, [r1, #8]
 800327e:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8003280:	bf88      	it	hi
 8003282:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003284:	691c      	ldr	r4, [r3, #16]
 8003286:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800328a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800328c:	694c      	ldr	r4, [r1, #20]
 800328e:	691d      	ldr	r5, [r3, #16]
 8003290:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003294:	432c      	orrs	r4, r5
 8003296:	611c      	str	r4, [r3, #16]
 8003298:	e7da      	b.n	8003250 <USB_EP0StartXfer+0x34>
      if (ep->xfer_len > 0U)
 800329a:	694b      	ldr	r3, [r1, #20]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0e2      	beq.n	8003266 <USB_EP0StartXfer+0x4a>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 80032a0:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80032a4:	2301      	movs	r3, #1
 80032a6:	40ab      	lsls	r3, r5
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80032ae:	e7da      	b.n	8003266 <USB_EP0StartXfer+0x4a>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80032b0:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80032b4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80032b8:	6903      	ldr	r3, [r0, #16]
 80032ba:	0cdb      	lsrs	r3, r3, #19
 80032bc:	04db      	lsls	r3, r3, #19
 80032be:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80032c0:	6903      	ldr	r3, [r0, #16]
 80032c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80032c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80032ca:	6103      	str	r3, [r0, #16]
 80032cc:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 80032ce:	b105      	cbz	r5, 80032d2 <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 80032d0:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80032d2:	6904      	ldr	r4, [r0, #16]
 80032d4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80032d8:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80032da:	6904      	ldr	r4, [r0, #16]
 80032dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e0:	4323      	orrs	r3, r4
    if (dma == 1U)
 80032e2:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80032e4:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80032e6:	bf04      	itt	eq
 80032e8:	68cb      	ldreq	r3, [r1, #12]
 80032ea:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 80032ec:	6803      	ldr	r3, [r0, #0]
 80032ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80032f2:	6003      	str	r3, [r0, #0]
 80032f4:	e7b7      	b.n	8003266 <USB_EP0StartXfer+0x4a>

080032f6 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80032f6:	b510      	push	{r4, lr}
 80032f8:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 80032fc:	b94c      	cbnz	r4, 8003312 <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 80032fe:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003300:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003304:	f023 0303 	bic.w	r3, r3, #3
 8003308:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 800330c:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 800330e:	4299      	cmp	r1, r3
 8003310:	d101      	bne.n	8003316 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8003312:	2000      	movs	r0, #0
 8003314:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003316:	f851 0b04 	ldr.w	r0, [r1], #4
 800331a:	6010      	str	r0, [r2, #0]
 800331c:	e7f7      	b.n	800330e <USB_WritePacket+0x18>

0800331e <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 800331e:	3203      	adds	r2, #3
 8003320:	f022 0203 	bic.w	r2, r2, #3
 8003324:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003326:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 800332a:	4291      	cmp	r1, r2
 800332c:	d101      	bne.n	8003332 <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 800332e:	4608      	mov	r0, r1
 8003330:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003332:	6803      	ldr	r3, [r0, #0]
 8003334:	f841 3b04 	str.w	r3, [r1], #4
 8003338:	e7f7      	b.n	800332a <USB_ReadPacket+0xc>

0800333a <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 800333a:	784b      	ldrb	r3, [r1, #1]
 800333c:	780a      	ldrb	r2, [r1, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	f04f 0320 	mov.w	r3, #32
 8003344:	d10b      	bne.n	800335e <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8003346:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800334a:	fb13 0002 	smlabb	r0, r3, r2, r0
 800334e:	6803      	ldr	r3, [r0, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	db0b      	blt.n	800336c <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8003354:	6803      	ldr	r3, [r0, #0]
 8003356:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800335a:	6003      	str	r3, [r0, #0]
 800335c:	e006      	b.n	800336c <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 800335e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8003362:	fb13 0002 	smlabb	r0, r3, r2, r0
 8003366:	6803      	ldr	r3, [r0, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	daf3      	bge.n	8003354 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800336c:	6803      	ldr	r3, [r0, #0]
 800336e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003372:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8003374:	2000      	movs	r0, #0
 8003376:	4770      	bx	lr

08003378 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8003378:	784b      	ldrb	r3, [r1, #1]
 800337a:	780a      	ldrb	r2, [r1, #0]
 800337c:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800337e:	bf0c      	ite	eq
 8003380:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003384:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8003388:	2320      	movs	r3, #32
 800338a:	fb13 0002 	smlabb	r0, r3, r2, r0
 800338e:	6803      	ldr	r3, [r0, #0]
 8003390:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003394:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003396:	78cb      	ldrb	r3, [r1, #3]
 8003398:	3b02      	subs	r3, #2
 800339a:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800339c:	bf9e      	ittt	ls
 800339e:	6803      	ldrls	r3, [r0, #0]
 80033a0:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 80033a4:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 80033a6:	2000      	movs	r0, #0
 80033a8:	4770      	bx	lr

080033aa <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80033aa:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80033ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80033b2:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 80033b6:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80033ba:	0109      	lsls	r1, r1, #4
 80033bc:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80033c0:	4319      	orrs	r1, r3
 80033c2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 80033c6:	2000      	movs	r0, #0
 80033c8:	4770      	bx	lr

080033ca <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80033ca:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 80033cc:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80033d0:	f023 0302 	bic.w	r3, r3, #2
 80033d4:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80033d8:	2003      	movs	r0, #3
 80033da:	f7fd fdcf 	bl	8000f7c <HAL_Delay>
  
  return HAL_OK;  
}
 80033de:	2000      	movs	r0, #0
 80033e0:	bd08      	pop	{r3, pc}

080033e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80033e2:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80033e4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80033f0:	2003      	movs	r0, #3
 80033f2:	f7fd fdc3 	bl	8000f7c <HAL_Delay>
  
  return HAL_OK;  
}
 80033f6:	2000      	movs	r0, #0
 80033f8:	bd08      	pop	{r3, pc}

080033fa <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 80033fa:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 80033fc:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 80033fe:	4010      	ands	r0, r2
 8003400:	4770      	bx	lr

08003402 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003402:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003406:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 800340a:	69c0      	ldr	r0, [r0, #28]
 800340c:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 800340e:	0c00      	lsrs	r0, r0, #16
 8003410:	4770      	bx	lr

08003412 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003412:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003416:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 800341a:	69c0      	ldr	r0, [r0, #28]
 800341c:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 800341e:	b280      	uxth	r0, r0
 8003420:	4770      	bx	lr

08003422 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003422:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8003426:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 800342a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 800342e:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8003430:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8003432:	4010      	ands	r0, r2
 8003434:	4770      	bx	lr

08003436 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003436:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8003438:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800343c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003440:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003444:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003446:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 800344a:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 800344c:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 800344e:	b2db      	uxtb	r3, r3
 8003450:	4323      	orrs	r3, r4
  return v;
}
 8003452:	4018      	ands	r0, r3
 8003454:	bd10      	pop	{r4, pc}

08003456 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8003456:	6940      	ldr	r0, [r0, #20]
}
 8003458:	f000 0001 	and.w	r0, r0, #1
 800345c:	4770      	bx	lr

0800345e <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800345e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003462:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003466:	f023 0307 	bic.w	r3, r3, #7
 800346a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800346e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	f002 0206 	and.w	r2, r2, #6
 8003478:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800347a:	bf02      	ittt	eq
 800347c:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8003480:	f042 0203 	orreq.w	r2, r2, #3
 8003484:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800348e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8003490:	2000      	movs	r0, #0
 8003492:	4770      	bx	lr

08003494 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003494:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003496:	2400      	movs	r4, #0
 8003498:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 800349c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80034a0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80034a4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80034a8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80034ac:	f044 0418 	orr.w	r4, r4, #24
 80034b0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80034b4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 80034b8:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80034ba:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80034be:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80034c2:	bf08      	it	eq
 80034c4:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80034c8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80034cc:	bf04      	itt	eq
 80034ce:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80034d2:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 80034d6:	2000      	movs	r0, #0
 80034d8:	bd10      	pop	{r4, pc}
	...

080034dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80034dc:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80034de:	3b01      	subs	r3, #1
 80034e0:	d101      	bne.n	80034e6 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80034e2:	2003      	movs	r0, #3
 80034e4:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034e6:	6902      	ldr	r2, [r0, #16]
 80034e8:	2a00      	cmp	r2, #0
 80034ea:	daf8      	bge.n	80034de <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80034ec:	6903      	ldr	r3, [r0, #16]
 80034ee:	4a06      	ldr	r2, [pc, #24]	; (8003508 <USB_CoreReset+0x2c>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80034f6:	3a01      	subs	r2, #1
 80034f8:	d0f3      	beq.n	80034e2 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80034fa:	6903      	ldr	r3, [r0, #16]
 80034fc:	f013 0301 	ands.w	r3, r3, #1
 8003500:	d1f9      	bne.n	80034f6 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8003502:	4618      	mov	r0, r3
}
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	00030d41 	.word	0x00030d41

0800350c <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800350c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8003510:	b11b      	cbz	r3, 800351a <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8003512:	2000      	movs	r0, #0
 8003514:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8003518:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800351a:	2002      	movs	r0, #2
  }
}
 800351c:	4770      	bx	lr

0800351e <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800351e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8003522:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003524:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003528:	b15b      	cbz	r3, 8003542 <USBD_CDC_EP0_RxReady+0x24>
 800352a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800352e:	28ff      	cmp	r0, #255	; 0xff
 8003530:	d007      	beq.n	8003542 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003538:	4621      	mov	r1, r4
 800353a:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800353c:	23ff      	movs	r3, #255	; 0xff
 800353e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8003542:	2000      	movs	r0, #0
 8003544:	bd10      	pop	{r4, pc}
	...

08003548 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8003548:	2343      	movs	r3, #67	; 0x43
 800354a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800354c:	4800      	ldr	r0, [pc, #0]	; (8003550 <USBD_CDC_GetFSCfgDesc+0x8>)
 800354e:	4770      	bx	lr
 8003550:	2000003c 	.word	0x2000003c

08003554 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003554:	2343      	movs	r3, #67	; 0x43
 8003556:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003558:	4800      	ldr	r0, [pc, #0]	; (800355c <USBD_CDC_GetHSCfgDesc+0x8>)
 800355a:	4770      	bx	lr
 800355c:	20000080 	.word	0x20000080

08003560 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8003560:	2343      	movs	r3, #67	; 0x43
 8003562:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003564:	4800      	ldr	r0, [pc, #0]	; (8003568 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003566:	4770      	bx	lr
 8003568:	200000d0 	.word	0x200000d0

0800356c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800356c:	230a      	movs	r3, #10
 800356e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003570:	4800      	ldr	r0, [pc, #0]	; (8003574 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003572:	4770      	bx	lr
 8003574:	200000c4 	.word	0x200000c4

08003578 <USBD_CDC_DataOut>:
{      
 8003578:	b538      	push	{r3, r4, r5, lr}
 800357a:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800357c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003580:	f002 fb6e 	bl	8005c60 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8003584:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003588:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800358c:	b14b      	cbz	r3, 80035a2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800358e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8003592:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800359c:	4798      	blx	r3
    return USBD_OK;
 800359e:	2000      	movs	r0, #0
 80035a0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80035a2:	2002      	movs	r0, #2
}
 80035a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080035a8 <USBD_CDC_Setup>:
{
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035aa:	780f      	ldrb	r7, [r1, #0]
 80035ac:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 80035b0:	4606      	mov	r6, r0
 80035b2:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80035b4:	d023      	beq.n	80035fe <USBD_CDC_Setup+0x56>
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d119      	bne.n	80035ee <USBD_CDC_Setup+0x46>
    if (req->wLength)
 80035ba:	88ca      	ldrh	r2, [r1, #6]
 80035bc:	784b      	ldrb	r3, [r1, #1]
 80035be:	b1c2      	cbz	r2, 80035f2 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 80035c0:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80035c2:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 80035c6:	d50b      	bpl.n	80035e0 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80035c8:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80035cc:	4618      	mov	r0, r3
 80035ce:	688f      	ldr	r7, [r1, #8]
 80035d0:	4629      	mov	r1, r5
 80035d2:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 80035d4:	88e2      	ldrh	r2, [r4, #6]
 80035d6:	4629      	mov	r1, r5
 80035d8:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 80035da:	f000 fb9a 	bl	8003d12 <USBD_CtlSendData>
      break;
 80035de:	e006      	b.n	80035ee <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 80035e0:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80035e4:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 80035e8:	4629      	mov	r1, r5
 80035ea:	f000 fba7 	bl	8003d3c <USBD_CtlPrepareRx>
}
 80035ee:	2000      	movs	r0, #0
 80035f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80035f2:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80035f6:	6884      	ldr	r4, [r0, #8]
 80035f8:	4618      	mov	r0, r3
 80035fa:	47a0      	blx	r4
 80035fc:	e7f7      	b.n	80035ee <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 80035fe:	784b      	ldrb	r3, [r1, #1]
 8003600:	2b0a      	cmp	r3, #10
 8003602:	d1f4      	bne.n	80035ee <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8003604:	2201      	movs	r2, #1
 8003606:	4901      	ldr	r1, [pc, #4]	; (800360c <USBD_CDC_Setup+0x64>)
 8003608:	e7e7      	b.n	80035da <USBD_CDC_Setup+0x32>
 800360a:	bf00      	nop
 800360c:	2000034c 	.word	0x2000034c

08003610 <USBD_CDC_DeInit>:
{
 8003610:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8003612:	2181      	movs	r1, #129	; 0x81
{
 8003614:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8003616:	f002 fabb 	bl	8005b90 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800361a:	2101      	movs	r1, #1
 800361c:	4620      	mov	r0, r4
 800361e:	f002 fab7 	bl	8005b90 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8003622:	2182      	movs	r1, #130	; 0x82
 8003624:	4620      	mov	r0, r4
 8003626:	f002 fab3 	bl	8005b90 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800362a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800362e:	b153      	cbz	r3, 8003646 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003630:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003638:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800363c:	f002 fbee 	bl	8005e1c <free>
    pdev->pClassData = NULL;
 8003640:	2300      	movs	r3, #0
 8003642:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8003646:	2000      	movs	r0, #0
 8003648:	bd10      	pop	{r4, pc}

0800364a <USBD_CDC_Init>:
{
 800364a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800364c:	7c03      	ldrb	r3, [r0, #16]
{
 800364e:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003650:	bb7b      	cbnz	r3, 80036b2 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8003652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003656:	2202      	movs	r2, #2
 8003658:	2181      	movs	r1, #129	; 0x81
 800365a:	f002 fa89 	bl	8005b70 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800365e:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8003662:	2202      	movs	r2, #2
 8003664:	2101      	movs	r1, #1
 8003666:	4620      	mov	r0, r4
 8003668:	f002 fa82 	bl	8005b70 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800366c:	2308      	movs	r3, #8
 800366e:	2203      	movs	r2, #3
 8003670:	2182      	movs	r1, #130	; 0x82
 8003672:	4620      	mov	r0, r4
 8003674:	f002 fa7c 	bl	8005b70 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003678:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800367c:	f002 fbc6 	bl	8005e0c <malloc>
 8003680:	4606      	mov	r6, r0
 8003682:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8003686:	b320      	cbz	r0, 80036d2 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003688:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003690:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8003692:	2500      	movs	r5, #0
 8003694:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8003698:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800369c:	b987      	cbnz	r7, 80036c0 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 800369e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036a2:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80036a6:	2101      	movs	r1, #1
 80036a8:	4620      	mov	r0, r4
 80036aa:	f002 facb 	bl	8005c44 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80036ae:	4638      	mov	r0, r7
 80036b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 80036b2:	2340      	movs	r3, #64	; 0x40
 80036b4:	2202      	movs	r2, #2
 80036b6:	2181      	movs	r1, #129	; 0x81
 80036b8:	f002 fa5a 	bl	8005b70 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80036bc:	2340      	movs	r3, #64	; 0x40
 80036be:	e7d0      	b.n	8003662 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 80036c0:	2340      	movs	r3, #64	; 0x40
 80036c2:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80036c6:	2101      	movs	r1, #1
 80036c8:	4620      	mov	r0, r4
 80036ca:	f002 fabb 	bl	8005c44 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80036ce:	4628      	mov	r0, r5
 80036d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 80036d2:	2001      	movs	r0, #1
}
 80036d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080036d6 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80036d6:	b119      	cbz	r1, 80036e0 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80036d8:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80036dc:	2000      	movs	r0, #0
 80036de:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80036e0:	2002      	movs	r0, #2
  }
  
  return ret;
}
 80036e2:	4770      	bx	lr

080036e4 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80036e4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80036e8:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80036ea:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80036ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80036f2:	4770      	bx	lr

080036f4 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 80036f4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 80036f8:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80036fa:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80036fe:	4770      	bx	lr

08003700 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003700:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8003704:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 8003706:	b172      	cbz	r2, 8003726 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8003708:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800370c:	2301      	movs	r3, #1
 800370e:	b964      	cbnz	r4, 800372a <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8003710:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8003714:	2181      	movs	r1, #129	; 0x81
 8003716:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 800371a:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800371e:	f002 fa83 	bl	8005c28 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 8003722:	4620      	mov	r0, r4
 8003724:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8003726:	2002      	movs	r0, #2
 8003728:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 800372a:	4618      	mov	r0, r3
  }
}
 800372c:	bd10      	pop	{r4, pc}

0800372e <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800372e:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8003732:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8003734:	b162      	cbz	r2, 8003750 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003736:	7c04      	ldrb	r4, [r0, #16]
 8003738:	b944      	cbnz	r4, 800374c <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800373a:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800373e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003742:	2101      	movs	r1, #1
 8003744:	f002 fa7e 	bl	8005c44 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003748:	2000      	movs	r0, #0
 800374a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800374c:	2340      	movs	r3, #64	; 0x40
 800374e:	e7f6      	b.n	800373e <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8003750:	2002      	movs	r0, #2
  }
}
 8003752:	bd10      	pop	{r4, pc}

08003754 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003754:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003756:	b180      	cbz	r0, 800377a <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003758:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800375c:	b113      	cbz	r3, 8003764 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800375e:	2300      	movs	r3, #0
 8003760:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003764:	b109      	cbz	r1, 800376a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003766:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800376a:	2301      	movs	r3, #1
 800376c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8003770:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003772:	f002 f9b5 	bl	8005ae0 <USBD_LL_Init>
  
  return USBD_OK; 
 8003776:	2000      	movs	r0, #0
 8003778:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800377a:	2002      	movs	r0, #2
}
 800377c:	bd08      	pop	{r3, pc}

0800377e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800377e:	b119      	cbz	r1, 8003788 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003780:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8003784:	2000      	movs	r0, #0
 8003786:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003788:	2002      	movs	r0, #2
  }
  
  return status;
}
 800378a:	4770      	bx	lr

0800378c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800378c:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800378e:	f002 f9e1 	bl	8005b54 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8003792:	2000      	movs	r0, #0
 8003794:	bd08      	pop	{r3, pc}

08003796 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003796:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003798:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800379c:	b90b      	cbnz	r3, 80037a2 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800379e:	2002      	movs	r0, #2
 80037a0:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4798      	blx	r3
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d1f9      	bne.n	800379e <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80037aa:	bd08      	pop	{r3, pc}

080037ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80037ac:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80037ae:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	4798      	blx	r3
  return USBD_OK;
}
 80037b6:	2000      	movs	r0, #0
 80037b8:	bd08      	pop	{r3, pc}

080037ba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80037ba:	b538      	push	{r3, r4, r5, lr}
 80037bc:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80037be:	f500 7502 	add.w	r5, r0, #520	; 0x208
 80037c2:	4628      	mov	r0, r5
 80037c4:	f000 fa75 	bl	8003cb2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80037c8:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80037ca:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80037ce:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80037d2:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80037d6:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80037da:	f001 031f 	and.w	r3, r1, #31
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d00e      	beq.n	8003800 <USBD_LL_SetupStage+0x46>
 80037e2:	d307      	bcc.n	80037f4 <USBD_LL_SetupStage+0x3a>
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d010      	beq.n	800380a <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80037e8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80037ec:	4620      	mov	r0, r4
 80037ee:	f002 f9dd 	bl	8005bac <USBD_LL_StallEP>
    break;
 80037f2:	e003      	b.n	80037fc <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80037f4:	4629      	mov	r1, r5
 80037f6:	4620      	mov	r0, r4
 80037f8:	f000 f8e6 	bl	80039c8 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80037fc:	2000      	movs	r0, #0
 80037fe:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003800:	4629      	mov	r1, r5
 8003802:	4620      	mov	r0, r4
 8003804:	f000 f9da 	bl	8003bbc <USBD_StdItfReq>
    break;
 8003808:	e7f8      	b.n	80037fc <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800380a:	4629      	mov	r1, r5
 800380c:	4620      	mov	r0, r4
 800380e:	f000 f9ed 	bl	8003bec <USBD_StdEPReq>
    break;
 8003812:	e7f3      	b.n	80037fc <USBD_LL_SetupStage+0x42>

08003814 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003814:	b538      	push	{r3, r4, r5, lr}
 8003816:	4604      	mov	r4, r0
 8003818:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800381a:	bb11      	cbnz	r1, 8003862 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800381c:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8003820:	2b03      	cmp	r3, #3
 8003822:	d10f      	bne.n	8003844 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8003824:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8003828:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800382c:	4293      	cmp	r3, r2
 800382e:	d90b      	bls.n	8003848 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8003830:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8003832:	429a      	cmp	r2, r3
 8003834:	bf28      	it	cs
 8003836:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8003838:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 800383c:	b292      	uxth	r2, r2
 800383e:	4629      	mov	r1, r5
 8003840:	f000 fa8b 	bl	8003d5a <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003844:	2000      	movs	r0, #0
 8003846:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003848:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	b123      	cbz	r3, 800385a <USBD_LL_DataOutStage+0x46>
 8003850:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003854:	2a03      	cmp	r2, #3
 8003856:	d100      	bne.n	800385a <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8003858:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800385a:	4620      	mov	r0, r4
 800385c:	f000 fa85 	bl	8003d6a <USBD_CtlSendStatus>
 8003860:	e7f0      	b.n	8003844 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8003862:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0eb      	beq.n	8003844 <USBD_LL_DataOutStage+0x30>
 800386c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003870:	2a03      	cmp	r2, #3
 8003872:	d1e7      	bne.n	8003844 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8003874:	4798      	blx	r3
 8003876:	e7e5      	b.n	8003844 <USBD_LL_DataOutStage+0x30>

08003878 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	4613      	mov	r3, r2
 800387c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800387e:	460e      	mov	r6, r1
 8003880:	2900      	cmp	r1, #0
 8003882:	d13d      	bne.n	8003900 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003884:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003888:	2a02      	cmp	r2, #2
 800388a:	d10f      	bne.n	80038ac <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 800388c:	69c5      	ldr	r5, [r0, #28]
 800388e:	6a02      	ldr	r2, [r0, #32]
 8003890:	4295      	cmp	r5, r2
 8003892:	d914      	bls.n	80038be <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8003894:	1aaa      	subs	r2, r5, r2
 8003896:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8003898:	4619      	mov	r1, r3
 800389a:	b292      	uxth	r2, r2
 800389c:	f000 fa46 	bl	8003d2c <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80038a0:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80038a2:	461a      	mov	r2, r3
 80038a4:	4619      	mov	r1, r3
 80038a6:	4620      	mov	r0, r4
 80038a8:	f002 f9cc 	bl	8005c44 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80038ac:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d102      	bne.n	80038ba <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80038ba:	2000      	movs	r0, #0
 80038bc:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80038be:	6983      	ldr	r3, [r0, #24]
 80038c0:	fbb3 f5f2 	udiv	r5, r3, r2
 80038c4:	fb02 3515 	mls	r5, r2, r5, r3
 80038c8:	b965      	cbnz	r5, 80038e4 <USBD_LL_DataInStage+0x6c>
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d80a      	bhi.n	80038e4 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80038ce:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d206      	bcs.n	80038e4 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80038d6:	462a      	mov	r2, r5
 80038d8:	f000 fa28 	bl	8003d2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80038dc:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80038e0:	462b      	mov	r3, r5
 80038e2:	e7de      	b.n	80038a2 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80038e4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	b12b      	cbz	r3, 80038f8 <USBD_LL_DataInStage+0x80>
 80038ec:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80038f0:	2a03      	cmp	r2, #3
 80038f2:	d101      	bne.n	80038f8 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80038f4:	4620      	mov	r0, r4
 80038f6:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80038f8:	4620      	mov	r0, r4
 80038fa:	f000 fa41 	bl	8003d80 <USBD_CtlReceiveStatus>
 80038fe:	e7d5      	b.n	80038ac <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8003900:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0d7      	beq.n	80038ba <USBD_LL_DataInStage+0x42>
 800390a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800390e:	2a03      	cmp	r2, #3
 8003910:	d1d3      	bne.n	80038ba <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8003912:	4798      	blx	r3
 8003914:	e7d1      	b.n	80038ba <USBD_LL_DataInStage+0x42>

08003916 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003916:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003918:	2200      	movs	r2, #0
{
 800391a:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 800391c:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800391e:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8003920:	2340      	movs	r3, #64	; 0x40
 8003922:	f002 f925 	bl	8005b70 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003926:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003928:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800392c:	2200      	movs	r2, #0
 800392e:	2180      	movs	r1, #128	; 0x80
 8003930:	4620      	mov	r0, r4
 8003932:	f002 f91d 	bl	8005b70 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003936:	2301      	movs	r3, #1
 8003938:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800393c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003940:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8003942:	b12b      	cbz	r3, 8003950 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003944:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003948:	7921      	ldrb	r1, [r4, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	4620      	mov	r0, r4
 800394e:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8003950:	2000      	movs	r0, #0
 8003952:	bd38      	pop	{r3, r4, r5, pc}

08003954 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003954:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8003956:	2000      	movs	r0, #0
 8003958:	4770      	bx	lr

0800395a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800395a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800395e:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003962:	2304      	movs	r3, #4
 8003964:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003968:	2000      	movs	r0, #0
 800396a:	4770      	bx	lr

0800396c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 800396c:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8003970:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003974:	2000      	movs	r0, #0
 8003976:	4770      	bx	lr

08003978 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003978:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800397a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800397e:	2a03      	cmp	r2, #3
 8003980:	d104      	bne.n	800398c <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8003982:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	b103      	cbz	r3, 800398c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800398a:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800398c:	2000      	movs	r0, #0
 800398e:	bd08      	pop	{r3, pc}

08003990 <USBD_LL_IsoINIncomplete>:
 8003990:	2000      	movs	r0, #0
 8003992:	4770      	bx	lr

08003994 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8003994:	2000      	movs	r0, #0
 8003996:	4770      	bx	lr

08003998 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8003998:	2000      	movs	r0, #0
 800399a:	4770      	bx	lr

0800399c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800399c:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800399e:	2201      	movs	r2, #1
 80039a0:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80039a4:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 80039a8:	7901      	ldrb	r1, [r0, #4]
 80039aa:	6852      	ldr	r2, [r2, #4]
 80039ac:	4790      	blx	r2
   
  return USBD_OK;
}
 80039ae:	2000      	movs	r0, #0
 80039b0:	bd08      	pop	{r3, pc}

080039b2 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80039b2:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 80039b4:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80039b6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80039b8:	f002 f8f8 	bl	8005bac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80039bc:	4620      	mov	r0, r4
 80039be:	2100      	movs	r1, #0
}
 80039c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80039c4:	f002 b8f2 	b.w	8005bac <USBD_LL_StallEP>

080039c8 <USBD_StdDevReq>:
{
 80039c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80039ca:	784b      	ldrb	r3, [r1, #1]
{
 80039cc:	4604      	mov	r4, r0
 80039ce:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80039d0:	2b09      	cmp	r3, #9
 80039d2:	d879      	bhi.n	8003ac8 <USBD_StdDevReq+0x100>
 80039d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80039d8:	00e500c9 	.word	0x00e500c9
 80039dc:	00d90078 	.word	0x00d90078
 80039e0:	006d0078 	.word	0x006d0078
 80039e4:	0078000a 	.word	0x0078000a
 80039e8:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80039ec:	884b      	ldrh	r3, [r1, #2]
 80039ee:	0a1a      	lsrs	r2, r3, #8
 80039f0:	3a01      	subs	r2, #1
 80039f2:	2a06      	cmp	r2, #6
 80039f4:	d868      	bhi.n	8003ac8 <USBD_StdDevReq+0x100>
 80039f6:	e8df f002 	tbb	[pc, r2]
 80039fa:	1c04      	.short	0x1c04
 80039fc:	49676729 	.word	0x49676729
 8003a00:	52          	.byte	0x52
 8003a01:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003a02:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003a06:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003a08:	7c20      	ldrb	r0, [r4, #16]
 8003a0a:	f10d 0106 	add.w	r1, sp, #6
 8003a0e:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8003a10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003a14:	2a00      	cmp	r2, #0
 8003a16:	d067      	beq.n	8003ae8 <USBD_StdDevReq+0x120>
 8003a18:	88eb      	ldrh	r3, [r5, #6]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d064      	beq.n	8003ae8 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	bf28      	it	cs
 8003a22:	461a      	movcs	r2, r3
 8003a24:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8003a28:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f000 f971 	bl	8003d12 <USBD_CtlSendData>
 8003a30:	e05a      	b.n	8003ae8 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8003a32:	7c02      	ldrb	r2, [r0, #16]
 8003a34:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003a38:	b932      	cbnz	r2, 8003a48 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003a3c:	f10d 0006 	add.w	r0, sp, #6
 8003a40:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003a42:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003a44:	7043      	strb	r3, [r0, #1]
 8003a46:	e7e3      	b.n	8003a10 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	e7f7      	b.n	8003a3c <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b05      	cmp	r3, #5
 8003a50:	d83a      	bhi.n	8003ac8 <USBD_StdDevReq+0x100>
 8003a52:	e8df f003 	tbb	[pc, r3]
 8003a56:	0703      	.short	0x0703
 8003a58:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003a5c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	e7d1      	b.n	8003a08 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003a64:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	e7cd      	b.n	8003a08 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003a6c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	e7c9      	b.n	8003a08 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003a74:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	e7c5      	b.n	8003a08 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003a7c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	e7c1      	b.n	8003a08 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003a84:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	e7bd      	b.n	8003a08 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003a8c:	7c03      	ldrb	r3, [r0, #16]
 8003a8e:	b9db      	cbnz	r3, 8003ac8 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003a90:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003a94:	f10d 0006 	add.w	r0, sp, #6
 8003a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9a:	4798      	blx	r3
 8003a9c:	e7b8      	b.n	8003a10 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003a9e:	7c03      	ldrb	r3, [r0, #16]
 8003aa0:	b993      	cbnz	r3, 8003ac8 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003aa2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003aa6:	f10d 0006 	add.w	r0, sp, #6
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003aae:	2307      	movs	r3, #7
 8003ab0:	e7c8      	b.n	8003a44 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8003ab2:	888b      	ldrh	r3, [r1, #4]
 8003ab4:	b943      	cbnz	r3, 8003ac8 <USBD_StdDevReq+0x100>
 8003ab6:	88cb      	ldrh	r3, [r1, #6]
 8003ab8:	b933      	cbnz	r3, 8003ac8 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003aba:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003abe:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003ac0:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003ac2:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003ac6:	d103      	bne.n	8003ad0 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7ff ff72 	bl	80039b2 <USBD_CtlError.constprop.0>
    break;
 8003ace:	e00b      	b.n	8003ae8 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8003ad0:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	f002 f899 	bl	8005c0c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003ada:	4620      	mov	r0, r4
 8003adc:	f000 f945 	bl	8003d6a <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8003ae0:	b12d      	cbz	r5, 8003aee <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8003ae2:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003ae4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8003ae8:	2000      	movs	r0, #0
 8003aea:	b003      	add	sp, #12
 8003aec:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003aee:	2301      	movs	r3, #1
 8003af0:	e7f8      	b.n	8003ae4 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8003af2:	7889      	ldrb	r1, [r1, #2]
 8003af4:	4d30      	ldr	r5, [pc, #192]	; (8003bb8 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003af6:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8003af8:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003afa:	d8e5      	bhi.n	8003ac8 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8003afc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d00c      	beq.n	8003b1e <USBD_StdDevReq+0x156>
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d1df      	bne.n	8003ac8 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8003b08:	b9b1      	cbnz	r1, 8003b38 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8003b10:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8003b12:	f7ff fe4b 	bl	80037ac <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8003b16:	4620      	mov	r0, r4
 8003b18:	f000 f927 	bl	8003d6a <USBD_CtlSendStatus>
 8003b1c:	e7e4      	b.n	8003ae8 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8003b1e:	2900      	cmp	r1, #0
 8003b20:	d0f9      	beq.n	8003b16 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8003b22:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003b24:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8003b26:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003b28:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f7ff fe32 	bl	8003796 <USBD_SetClassConfig>
 8003b32:	2802      	cmp	r0, #2
 8003b34:	d1ef      	bne.n	8003b16 <USBD_StdDevReq+0x14e>
 8003b36:	e7c7      	b.n	8003ac8 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8003b38:	6841      	ldr	r1, [r0, #4]
 8003b3a:	2901      	cmp	r1, #1
 8003b3c:	d0eb      	beq.n	8003b16 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8003b3e:	b2c9      	uxtb	r1, r1
 8003b40:	f7ff fe34 	bl	80037ac <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003b44:	7829      	ldrb	r1, [r5, #0]
 8003b46:	6061      	str	r1, [r4, #4]
 8003b48:	e7f0      	b.n	8003b2c <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8003b4a:	88ca      	ldrh	r2, [r1, #6]
 8003b4c:	2a01      	cmp	r2, #1
 8003b4e:	d1bb      	bne.n	8003ac8 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8003b50:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d003      	beq.n	8003b60 <USBD_StdDevReq+0x198>
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d1b5      	bne.n	8003ac8 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8003b5c:	1d01      	adds	r1, r0, #4
 8003b5e:	e764      	b.n	8003a2a <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8003b60:	4601      	mov	r1, r0
 8003b62:	2300      	movs	r3, #0
 8003b64:	f841 3f08 	str.w	r3, [r1, #8]!
 8003b68:	e75f      	b.n	8003a2a <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8003b6a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003b6e:	3b02      	subs	r3, #2
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d8a9      	bhi.n	8003ac8 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8003b74:	2301      	movs	r3, #1
 8003b76:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8003b78:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003b7c:	b10b      	cbz	r3, 8003b82 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003b7e:	2303      	movs	r3, #3
 8003b80:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8003b82:	2202      	movs	r2, #2
 8003b84:	f104 010c 	add.w	r1, r4, #12
 8003b88:	e74f      	b.n	8003a2a <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003b8a:	884b      	ldrh	r3, [r1, #2]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d1ab      	bne.n	8003ae8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8003b90:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003b94:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003b98:	4629      	mov	r1, r5
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	4798      	blx	r3
 8003ba0:	e7b9      	b.n	8003b16 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8003ba2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003ba6:	3b02      	subs	r3, #2
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d88d      	bhi.n	8003ac8 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003bac:	884b      	ldrh	r3, [r1, #2]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d19a      	bne.n	8003ae8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e7ec      	b.n	8003b90 <USBD_StdDevReq+0x1c8>
 8003bb6:	bf00      	nop
 8003bb8:	2000034d 	.word	0x2000034d

08003bbc <USBD_StdItfReq>:
{
 8003bbc:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8003bbe:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003bc2:	2b03      	cmp	r3, #3
{
 8003bc4:	4604      	mov	r4, r0
 8003bc6:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8003bc8:	d10d      	bne.n	8003be6 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003bca:	790b      	ldrb	r3, [r1, #4]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d80a      	bhi.n	8003be6 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8003bd0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003bd8:	88eb      	ldrh	r3, [r5, #6]
 8003bda:	b913      	cbnz	r3, 8003be2 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f000 f8c4 	bl	8003d6a <USBD_CtlSendStatus>
}
 8003be2:	2000      	movs	r0, #0
 8003be4:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8003be6:	f7ff fee4 	bl	80039b2 <USBD_CtlError.constprop.0>
    break;
 8003bea:	e7fa      	b.n	8003be2 <USBD_StdItfReq+0x26>

08003bec <USBD_StdEPReq>:
{
 8003bec:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8003bee:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8003bf0:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8003bf2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003bf6:	2a20      	cmp	r2, #32
{
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8003bfc:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8003bfe:	d105      	bne.n	8003c0c <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8003c00:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	4798      	blx	r3
}
 8003c08:	2000      	movs	r0, #0
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8003c0c:	784a      	ldrb	r2, [r1, #1]
 8003c0e:	2a01      	cmp	r2, #1
 8003c10:	d01c      	beq.n	8003c4c <USBD_StdEPReq+0x60>
 8003c12:	d32a      	bcc.n	8003c6a <USBD_StdEPReq+0x7e>
 8003c14:	2a03      	cmp	r2, #3
 8003c16:	d1f7      	bne.n	8003c08 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003c18:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003c1c:	2a02      	cmp	r2, #2
 8003c1e:	d040      	beq.n	8003ca2 <USBD_StdEPReq+0xb6>
 8003c20:	2a03      	cmp	r2, #3
 8003c22:	d002      	beq.n	8003c2a <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8003c24:	f7ff fec5 	bl	80039b2 <USBD_CtlError.constprop.0>
      break;
 8003c28:	e7ee      	b.n	8003c08 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003c2a:	884a      	ldrh	r2, [r1, #2]
 8003c2c:	b922      	cbnz	r2, 8003c38 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003c2e:	065e      	lsls	r6, r3, #25
 8003c30:	d002      	beq.n	8003c38 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8003c32:	4619      	mov	r1, r3
 8003c34:	f001 ffba 	bl	8005bac <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8003c38:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4620      	mov	r0, r4
 8003c42:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003c44:	4620      	mov	r0, r4
 8003c46:	f000 f890 	bl	8003d6a <USBD_CtlSendStatus>
 8003c4a:	e7dd      	b.n	8003c08 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003c4c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003c50:	2a02      	cmp	r2, #2
 8003c52:	d026      	beq.n	8003ca2 <USBD_StdEPReq+0xb6>
 8003c54:	2a03      	cmp	r2, #3
 8003c56:	d1e5      	bne.n	8003c24 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003c58:	884a      	ldrh	r2, [r1, #2]
 8003c5a:	2a00      	cmp	r2, #0
 8003c5c:	d1d4      	bne.n	8003c08 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8003c5e:	0659      	lsls	r1, r3, #25
 8003c60:	d0f0      	beq.n	8003c44 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8003c62:	4619      	mov	r1, r3
 8003c64:	f001 ffb0 	bl	8005bc8 <USBD_LL_ClearStallEP>
 8003c68:	e7e6      	b.n	8003c38 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8003c6a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003c6e:	2a02      	cmp	r2, #2
 8003c70:	d017      	beq.n	8003ca2 <USBD_StdEPReq+0xb6>
 8003c72:	2a03      	cmp	r2, #3
 8003c74:	d1d6      	bne.n	8003c24 <USBD_StdEPReq+0x38>
 8003c76:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003c7a:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003c7e:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003c82:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003c84:	bf14      	ite	ne
 8003c86:	3514      	addne	r5, #20
 8003c88:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003c8c:	f001 ffaa 	bl	8005be4 <USBD_LL_IsStallEP>
 8003c90:	b168      	cbz	r0, 8003cae <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8003c92:	2301      	movs	r3, #1
 8003c94:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8003c96:	2202      	movs	r2, #2
 8003c98:	4629      	mov	r1, r5
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f000 f839 	bl	8003d12 <USBD_CtlSendData>
      break;
 8003ca0:	e7b2      	b.n	8003c08 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8003ca2:	065a      	lsls	r2, r3, #25
 8003ca4:	d0b0      	beq.n	8003c08 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	f001 ff80 	bl	8005bac <USBD_LL_StallEP>
 8003cac:	e7ac      	b.n	8003c08 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8003cae:	6028      	str	r0, [r5, #0]
 8003cb0:	e7f1      	b.n	8003c96 <USBD_StdEPReq+0xaa>

08003cb2 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003cb2:	780b      	ldrb	r3, [r1, #0]
 8003cb4:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003cb6:	784b      	ldrb	r3, [r1, #1]
 8003cb8:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003cba:	78ca      	ldrb	r2, [r1, #3]
 8003cbc:	788b      	ldrb	r3, [r1, #2]
 8003cbe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003cc2:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003cc4:	794a      	ldrb	r2, [r1, #5]
 8003cc6:	790b      	ldrb	r3, [r1, #4]
 8003cc8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003ccc:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003cce:	79ca      	ldrb	r2, [r1, #7]
 8003cd0:	798b      	ldrb	r3, [r1, #6]
 8003cd2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003cd6:	80c3      	strh	r3, [r0, #6]
 8003cd8:	4770      	bx	lr

08003cda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003cda:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8003cdc:	b188      	cbz	r0, 8003d02 <USBD_GetString+0x28>
 8003cde:	4605      	mov	r5, r0
 8003ce0:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8003ce2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2c00      	cmp	r4, #0
 8003cea:	d1f9      	bne.n	8003ce0 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	3302      	adds	r3, #2
 8003cf0:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8003cf2:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	704b      	strb	r3, [r1, #1]
 8003cf8:	3801      	subs	r0, #1
 8003cfa:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8003cfc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003d00:	b905      	cbnz	r5, 8003d04 <USBD_GetString+0x2a>
 8003d02:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	548c      	strb	r4, [r1, r2]
 8003d10:	e7f4      	b.n	8003cfc <USBD_GetString+0x22>

08003d12 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003d12:	b510      	push	{r4, lr}
 8003d14:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003d16:	2202      	movs	r2, #2
 8003d18:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8003d1c:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003d1e:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8003d20:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003d22:	2100      	movs	r1, #0
 8003d24:	f001 ff80 	bl	8005c28 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003d28:	2000      	movs	r0, #0
 8003d2a:	bd10      	pop	{r4, pc}

08003d2c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003d2c:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8003d2e:	4613      	mov	r3, r2
 8003d30:	460a      	mov	r2, r1
 8003d32:	2100      	movs	r1, #0
 8003d34:	f001 ff78 	bl	8005c28 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003d38:	2000      	movs	r0, #0
 8003d3a:	bd08      	pop	{r3, pc}

08003d3c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8003d40:	2203      	movs	r2, #3
 8003d42:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8003d46:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8003d4a:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8003d4c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8003d50:	2100      	movs	r1, #0
 8003d52:	f001 ff77 	bl	8005c44 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8003d56:	2000      	movs	r0, #0
 8003d58:	bd10      	pop	{r4, pc}

08003d5a <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003d5a:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	460a      	mov	r2, r1
 8003d60:	2100      	movs	r1, #0
 8003d62:	f001 ff6f 	bl	8005c44 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8003d66:	2000      	movs	r0, #0
 8003d68:	bd08      	pop	{r3, pc}

08003d6a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003d6a:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8003d72:	2300      	movs	r3, #0
 8003d74:	461a      	mov	r2, r3
 8003d76:	4619      	mov	r1, r3
 8003d78:	f001 ff56 	bl	8005c28 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	bd08      	pop	{r3, pc}

08003d80 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8003d80:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8003d82:	2305      	movs	r3, #5
 8003d84:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003d88:	2300      	movs	r3, #0
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f001 ff59 	bl	8005c44 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8003d92:	2000      	movs	r0, #0
 8003d94:	bd08      	pop	{r3, pc}

08003d96 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d96:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003d98:	f000 fbe6 	bl	8004568 <vTaskStartScheduler>
  
  return osOK;
}
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	bd08      	pop	{r3, pc}

08003da0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003da0:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003da2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8003da6:	8a02      	ldrh	r2, [r0, #16]
{
 8003da8:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003daa:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8003dae:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8003db0:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8003db2:	bf14      	ite	ne
 8003db4:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003db6:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003db8:	a803      	add	r0, sp, #12
 8003dba:	9001      	str	r0, [sp, #4]
 8003dbc:	9400      	str	r4, [sp, #0]
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	f000 fb02 	bl	80043c8 <xTaskCreate>
 8003dc4:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003dc6:	bf0c      	ite	eq
 8003dc8:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8003dca:	2000      	movne	r0, #0
}
 8003dcc:	b005      	add	sp, #20
 8003dce:	bd30      	pop	{r4, r5, pc}

08003dd0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003dd0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	bf08      	it	eq
 8003dd6:	2001      	moveq	r0, #1
 8003dd8:	f000 fd14 	bl	8004804 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ddc:	2000      	movs	r0, #0
 8003dde:	bd08      	pop	{r3, pc}

08003de0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003de0:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003de2:	f000 fda7 	bl	8004934 <xTaskGetSchedulerState>
 8003de6:	2801      	cmp	r0, #1
 8003de8:	d003      	beq.n	8003df2 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003dee:	f000 b909 	b.w	8004004 <xPortSysTickHandler>
 8003df2:	bd08      	pop	{r3, pc}

08003df4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003df4:	f100 0308 	add.w	r3, r0, #8
 8003df8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dfa:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dfe:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e00:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e02:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e04:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e06:	6003      	str	r3, [r0, #0]
 8003e08:	4770      	bx	lr

08003e0a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6103      	str	r3, [r0, #16]
 8003e0e:	4770      	bx	lr

08003e10 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e10:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e12:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e1c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003e1e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e20:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003e22:	3301      	adds	r3, #1
 8003e24:	6003      	str	r3, [r0, #0]
 8003e26:	4770      	bx	lr

08003e28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e28:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e2a:	1c53      	adds	r3, r2, #1
{
 8003e2c:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8003e2e:	d10a      	bne.n	8003e46 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e30:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e36:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e38:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e3a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003e3c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e3e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003e40:	3301      	adds	r3, #1
 8003e42:	6003      	str	r3, [r0, #0]
 8003e44:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e46:	f100 0308 	add.w	r3, r0, #8
 8003e4a:	685c      	ldr	r4, [r3, #4]
 8003e4c:	6825      	ldr	r5, [r4, #0]
 8003e4e:	42aa      	cmp	r2, r5
 8003e50:	d3ef      	bcc.n	8003e32 <vListInsert+0xa>
 8003e52:	4623      	mov	r3, r4
 8003e54:	e7f9      	b.n	8003e4a <vListInsert+0x22>

08003e56 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e56:	6841      	ldr	r1, [r0, #4]
 8003e58:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e5a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e5c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e5e:	6882      	ldr	r2, [r0, #8]
 8003e60:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e62:	6859      	ldr	r1, [r3, #4]
 8003e64:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e66:	bf08      	it	eq
 8003e68:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	3801      	subs	r0, #1
 8003e72:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8003e74:	4770      	bx	lr
	...

08003e78 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e78:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <prvTaskExitError+0x2c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	d008      	beq.n	8003e92 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	e7fe      	b.n	8003e90 <prvTaskExitError+0x18>
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	e7fe      	b.n	8003ea2 <prvTaskExitError+0x2a>
 8003ea4:	20000114 	.word	0x20000114

08003ea8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003ea8:	4806      	ldr	r0, [pc, #24]	; (8003ec4 <prvPortStartFirstTask+0x1c>)
 8003eaa:	6800      	ldr	r0, [r0, #0]
 8003eac:	6800      	ldr	r0, [r0, #0]
 8003eae:	f380 8808 	msr	MSP, r0
 8003eb2:	b662      	cpsie	i
 8003eb4:	b661      	cpsie	f
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	df00      	svc	0
 8003ec0:	bf00      	nop
 8003ec2:	0000      	.short	0x0000
 8003ec4:	e000ed08 	.word	0xe000ed08

08003ec8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003ec8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003ed8 <vPortEnableVFP+0x10>
 8003ecc:	6801      	ldr	r1, [r0, #0]
 8003ece:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003ed2:	6001      	str	r1, [r0, #0]
 8003ed4:	4770      	bx	lr
 8003ed6:	0000      	.short	0x0000
 8003ed8:	e000ed88 	.word	0xe000ed88

08003edc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ee0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ee4:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <pxPortInitialiseStack+0x28>)
 8003ee6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003eea:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003eee:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ef2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ef6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003efa:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8003efe:	3844      	subs	r0, #68	; 0x44
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	08003e79 	.word	0x08003e79
	...

08003f10 <SVC_Handler>:
	__asm volatile (
 8003f10:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <pxCurrentTCBConst2>)
 8003f12:	6819      	ldr	r1, [r3, #0]
 8003f14:	6808      	ldr	r0, [r1, #0]
 8003f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f1a:	f380 8809 	msr	PSP, r0
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f04f 0000 	mov.w	r0, #0
 8003f26:	f380 8811 	msr	BASEPRI, r0
 8003f2a:	4770      	bx	lr
 8003f2c:	f3af 8000 	nop.w

08003f30 <pxCurrentTCBConst2>:
 8003f30:	20003f6c 	.word	0x20003f6c

08003f34 <vPortEnterCritical>:
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003f44:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <vPortEnterCritical+0x3c>)
 8003f46:	6813      	ldr	r3, [r2, #0]
 8003f48:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8003f4a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8003f4c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003f4e:	d10d      	bne.n	8003f6c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f50:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <vPortEnterCritical+0x40>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003f58:	d008      	beq.n	8003f6c <vPortEnterCritical+0x38>
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	e7fe      	b.n	8003f6a <vPortEnterCritical+0x36>
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000114 	.word	0x20000114
 8003f74:	e000ed04 	.word	0xe000ed04

08003f78 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003f78:	4a08      	ldr	r2, [pc, #32]	; (8003f9c <vPortExitCritical+0x24>)
 8003f7a:	6813      	ldr	r3, [r2, #0]
 8003f7c:	b943      	cbnz	r3, 8003f90 <vPortExitCritical+0x18>
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	e7fe      	b.n	8003f8e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003f90:	3b01      	subs	r3, #1
 8003f92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f94:	b90b      	cbnz	r3, 8003f9a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	4770      	bx	lr
 8003f9c:	20000114 	.word	0x20000114

08003fa0 <PendSV_Handler>:
	__asm volatile
 8003fa0:	f3ef 8009 	mrs	r0, PSP
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	4b15      	ldr	r3, [pc, #84]	; (8004000 <pxCurrentTCBConst>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	f01e 0f10 	tst.w	lr, #16
 8003fb0:	bf08      	it	eq
 8003fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fba:	6010      	str	r0, [r2, #0]
 8003fbc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003fc4:	f380 8811 	msr	BASEPRI, r0
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f000 fc76 	bl	80048c0 <vTaskSwitchContext>
 8003fd4:	f04f 0000 	mov.w	r0, #0
 8003fd8:	f380 8811 	msr	BASEPRI, r0
 8003fdc:	bc08      	pop	{r3}
 8003fde:	6819      	ldr	r1, [r3, #0]
 8003fe0:	6808      	ldr	r0, [r1, #0]
 8003fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe6:	f01e 0f10 	tst.w	lr, #16
 8003fea:	bf08      	it	eq
 8003fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ff0:	f380 8809 	msr	PSP, r0
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	f3af 8000 	nop.w

08004000 <pxCurrentTCBConst>:
 8004000:	20003f6c 	.word	0x20003f6c

08004004 <xPortSysTickHandler>:
{
 8004004:	b508      	push	{r3, lr}
	__asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004016:	f000 faeb 	bl	80045f0 <xTaskIncrementTick>
 800401a:	b118      	cbz	r0, 8004024 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <xPortSysTickHandler+0x28>)
 800401e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004022:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004024:	2300      	movs	r3, #0
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	bd08      	pop	{r3, pc}
 800402c:	e000ed04 	.word	0xe000ed04

08004030 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <vPortSetupTimerInterrupt+0x1c>)
 8004032:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	fbb3 f3f2 	udiv	r3, r3, r2
 800403c:	4a04      	ldr	r2, [pc, #16]	; (8004050 <vPortSetupTimerInterrupt+0x20>)
 800403e:	3b01      	subs	r3, #1
 8004040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004042:	4b04      	ldr	r3, [pc, #16]	; (8004054 <vPortSetupTimerInterrupt+0x24>)
 8004044:	2207      	movs	r2, #7
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000118 	.word	0x20000118
 8004050:	e000e014 	.word	0xe000e014
 8004054:	e000e010 	.word	0xe000e010

08004058 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004058:	4b31      	ldr	r3, [pc, #196]	; (8004120 <xPortStartScheduler+0xc8>)
 800405a:	4a32      	ldr	r2, [pc, #200]	; (8004124 <xPortStartScheduler+0xcc>)
{
 800405c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800405e:	6819      	ldr	r1, [r3, #0]
 8004060:	4291      	cmp	r1, r2
 8004062:	d108      	bne.n	8004076 <xPortStartScheduler+0x1e>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	e7fe      	b.n	8004074 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4b2b      	ldr	r3, [pc, #172]	; (8004128 <xPortStartScheduler+0xd0>)
 800407a:	429a      	cmp	r2, r3
 800407c:	d108      	bne.n	8004090 <xPortStartScheduler+0x38>
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	e7fe      	b.n	800408e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004090:	4b26      	ldr	r3, [pc, #152]	; (800412c <xPortStartScheduler+0xd4>)
 8004092:	781a      	ldrb	r2, [r3, #0]
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004098:	22ff      	movs	r2, #255	; 0xff
 800409a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800409c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800409e:	4a24      	ldr	r2, [pc, #144]	; (8004130 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80040aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040ae:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040b0:	4b20      	ldr	r3, [pc, #128]	; (8004134 <xPortStartScheduler+0xdc>)
 80040b2:	2207      	movs	r2, #7
 80040b4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040b6:	2100      	movs	r1, #0
 80040b8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80040bc:	0600      	lsls	r0, r0, #24
 80040be:	f102 34ff 	add.w	r4, r2, #4294967295
 80040c2:	d423      	bmi.n	800410c <xPortStartScheduler+0xb4>
 80040c4:	b101      	cbz	r1, 80040c8 <xPortStartScheduler+0x70>
 80040c6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80040d0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80040d2:	9b01      	ldr	r3, [sp, #4]
 80040d4:	4a15      	ldr	r2, [pc, #84]	; (800412c <xPortStartScheduler+0xd4>)
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80040da:	4b17      	ldr	r3, [pc, #92]	; (8004138 <xPortStartScheduler+0xe0>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80040e2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80040ea:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80040ec:	f7ff ffa0 	bl	8004030 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80040f0:	4b12      	ldr	r3, [pc, #72]	; (800413c <xPortStartScheduler+0xe4>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80040f6:	f7ff fee7 	bl	8003ec8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040fa:	4a11      	ldr	r2, [pc, #68]	; (8004140 <xPortStartScheduler+0xe8>)
 80040fc:	6813      	ldr	r3, [r2, #0]
 80040fe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004102:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004104:	f7ff fed0 	bl	8003ea8 <prvPortStartFirstTask>
	prvTaskExitError();
 8004108:	f7ff feb6 	bl	8003e78 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800410c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004110:	0052      	lsls	r2, r2, #1
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	f88d 2003 	strb.w	r2, [sp, #3]
 8004118:	2101      	movs	r1, #1
 800411a:	4622      	mov	r2, r4
 800411c:	e7cc      	b.n	80040b8 <xPortStartScheduler+0x60>
 800411e:	bf00      	nop
 8004120:	e000ed00 	.word	0xe000ed00
 8004124:	410fc271 	.word	0x410fc271
 8004128:	410fc270 	.word	0x410fc270
 800412c:	e000e400 	.word	0xe000e400
 8004130:	2000034e 	.word	0x2000034e
 8004134:	20000350 	.word	0x20000350
 8004138:	e000ed20 	.word	0xe000ed20
 800413c:	20000114 	.word	0x20000114
 8004140:	e000ef34 	.word	0xe000ef34

08004144 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004144:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004146:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <prvInsertBlockIntoFreeList+0x40>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4282      	cmp	r2, r0
 800414c:	d318      	bcc.n	8004180 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800414e:	685c      	ldr	r4, [r3, #4]
 8004150:	1919      	adds	r1, r3, r4
 8004152:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004154:	bf01      	itttt	eq
 8004156:	6841      	ldreq	r1, [r0, #4]
 8004158:	4618      	moveq	r0, r3
 800415a:	1909      	addeq	r1, r1, r4
 800415c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800415e:	6844      	ldr	r4, [r0, #4]
 8004160:	1901      	adds	r1, r0, r4
 8004162:	428a      	cmp	r2, r1
 8004164:	d107      	bne.n	8004176 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004166:	4908      	ldr	r1, [pc, #32]	; (8004188 <prvInsertBlockIntoFreeList+0x44>)
 8004168:	6809      	ldr	r1, [r1, #0]
 800416a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800416c:	bf1f      	itttt	ne
 800416e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004170:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004172:	1909      	addne	r1, r1, r4
 8004174:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004176:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004178:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800417a:	bf18      	it	ne
 800417c:	6018      	strne	r0, [r3, #0]
 800417e:	bd10      	pop	{r4, pc}
 8004180:	4613      	mov	r3, r2
 8004182:	e7e1      	b.n	8004148 <prvInsertBlockIntoFreeList+0x4>
 8004184:	20003f64 	.word	0x20003f64
 8004188:	20000354 	.word	0x20000354

0800418c <pvPortMalloc>:
{
 800418c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004190:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004192:	f000 fa25 	bl	80045e0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004196:	493e      	ldr	r1, [pc, #248]	; (8004290 <pvPortMalloc+0x104>)
 8004198:	4d3e      	ldr	r5, [pc, #248]	; (8004294 <pvPortMalloc+0x108>)
 800419a:	680b      	ldr	r3, [r1, #0]
 800419c:	bb0b      	cbnz	r3, 80041e2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800419e:	4a3e      	ldr	r2, [pc, #248]	; (8004298 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041a0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041a2:	bf1f      	itttt	ne
 80041a4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041a6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041aa:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80041ae:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041b0:	bf14      	ite	ne
 80041b2:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041b4:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041b8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80041ba:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041bc:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041c0:	4e36      	ldr	r6, [pc, #216]	; (800429c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80041c2:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041c4:	2000      	movs	r0, #0
 80041c6:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041c8:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80041ca:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80041cc:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041ce:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041d0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041d2:	4b33      	ldr	r3, [pc, #204]	; (80042a0 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041d4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041d6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041d8:	4b32      	ldr	r3, [pc, #200]	; (80042a4 <pvPortMalloc+0x118>)
 80041da:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041e0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041e2:	682f      	ldr	r7, [r5, #0]
 80041e4:	4227      	tst	r7, r4
 80041e6:	d116      	bne.n	8004216 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80041e8:	2c00      	cmp	r4, #0
 80041ea:	d041      	beq.n	8004270 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80041ec:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041f0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041f2:	bf1c      	itt	ne
 80041f4:	f023 0307 	bicne.w	r3, r3, #7
 80041f8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041fa:	b163      	cbz	r3, 8004216 <pvPortMalloc+0x8a>
 80041fc:	4a29      	ldr	r2, [pc, #164]	; (80042a4 <pvPortMalloc+0x118>)
 80041fe:	6816      	ldr	r6, [r2, #0]
 8004200:	42b3      	cmp	r3, r6
 8004202:	4690      	mov	r8, r2
 8004204:	d807      	bhi.n	8004216 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8004206:	4a25      	ldr	r2, [pc, #148]	; (800429c <pvPortMalloc+0x110>)
 8004208:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800420a:	6868      	ldr	r0, [r5, #4]
 800420c:	4283      	cmp	r3, r0
 800420e:	d804      	bhi.n	800421a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8004210:	6809      	ldr	r1, [r1, #0]
 8004212:	428d      	cmp	r5, r1
 8004214:	d107      	bne.n	8004226 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8004216:	2400      	movs	r4, #0
 8004218:	e02a      	b.n	8004270 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800421a:	682c      	ldr	r4, [r5, #0]
 800421c:	2c00      	cmp	r4, #0
 800421e:	d0f7      	beq.n	8004210 <pvPortMalloc+0x84>
 8004220:	462a      	mov	r2, r5
 8004222:	4625      	mov	r5, r4
 8004224:	e7f1      	b.n	800420a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004226:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004228:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800422a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800422c:	1ac2      	subs	r2, r0, r3
 800422e:	2a10      	cmp	r2, #16
 8004230:	d90f      	bls.n	8004252 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004232:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004234:	0741      	lsls	r1, r0, #29
 8004236:	d008      	beq.n	800424a <pvPortMalloc+0xbe>
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	e7fe      	b.n	8004248 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800424a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800424c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800424e:	f7ff ff79 	bl	8004144 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004252:	4913      	ldr	r1, [pc, #76]	; (80042a0 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004254:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004256:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004258:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800425a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800425c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800425e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004262:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004266:	bf38      	it	cc
 8004268:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800426a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800426c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800426e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8004270:	f000 fa50 	bl	8004714 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004274:	0763      	lsls	r3, r4, #29
 8004276:	d008      	beq.n	800428a <pvPortMalloc+0xfe>
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	e7fe      	b.n	8004288 <pvPortMalloc+0xfc>
}
 800428a:	4620      	mov	r0, r4
 800428c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004290:	20000354 	.word	0x20000354
 8004294:	20003f58 	.word	0x20003f58
 8004298:	20000358 	.word	0x20000358
 800429c:	20003f64 	.word	0x20003f64
 80042a0:	20003f60 	.word	0x20003f60
 80042a4:	20003f5c 	.word	0x20003f5c

080042a8 <vPortFree>:
{
 80042a8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80042aa:	4604      	mov	r4, r0
 80042ac:	b370      	cbz	r0, 800430c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80042ae:	4a18      	ldr	r2, [pc, #96]	; (8004310 <vPortFree+0x68>)
 80042b0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	4213      	tst	r3, r2
 80042b8:	d108      	bne.n	80042cc <vPortFree+0x24>
 80042ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	e7fe      	b.n	80042ca <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042cc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80042d0:	b141      	cbz	r1, 80042e4 <vPortFree+0x3c>
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	e7fe      	b.n	80042e2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042e4:	ea23 0302 	bic.w	r3, r3, r2
 80042e8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80042ec:	f000 f978 	bl	80045e0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042f0:	4a08      	ldr	r2, [pc, #32]	; (8004314 <vPortFree+0x6c>)
 80042f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80042f6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042f8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042fc:	440b      	add	r3, r1
 80042fe:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004300:	f7ff ff20 	bl	8004144 <prvInsertBlockIntoFreeList>
}
 8004304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8004308:	f000 ba04 	b.w	8004714 <xTaskResumeAll>
 800430c:	bd10      	pop	{r4, pc}
 800430e:	bf00      	nop
 8004310:	20003f58 	.word	0x20003f58
 8004314:	20003f5c 	.word	0x20003f5c

08004318 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004318:	4a06      	ldr	r2, [pc, #24]	; (8004334 <prvResetNextTaskUnblockTime+0x1c>)
 800431a:	6813      	ldr	r3, [r2, #0]
 800431c:	6819      	ldr	r1, [r3, #0]
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <prvResetNextTaskUnblockTime+0x20>)
 8004320:	b919      	cbnz	r1, 800432a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004322:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800432e:	68d2      	ldr	r2, [r2, #12]
 8004330:	6852      	ldr	r2, [r2, #4]
 8004332:	e7f8      	b.n	8004326 <prvResetNextTaskUnblockTime+0xe>
 8004334:	20003f70 	.word	0x20003f70
 8004338:	20004048 	.word	0x20004048

0800433c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800433e:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004340:	4e1b      	ldr	r6, [pc, #108]	; (80043b0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8004342:	681d      	ldr	r5, [r3, #0]
{
 8004344:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004346:	6830      	ldr	r0, [r6, #0]
 8004348:	3004      	adds	r0, #4
{
 800434a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800434c:	f7ff fd83 	bl	8003e56 <uxListRemove>
 8004350:	4633      	mov	r3, r6
 8004352:	b940      	cbnz	r0, 8004366 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004354:	6831      	ldr	r1, [r6, #0]
 8004356:	4e17      	ldr	r6, [pc, #92]	; (80043b4 <prvAddCurrentTaskToDelayedList+0x78>)
 8004358:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800435a:	6832      	ldr	r2, [r6, #0]
 800435c:	2001      	movs	r0, #1
 800435e:	4088      	lsls	r0, r1
 8004360:	ea22 0200 	bic.w	r2, r2, r0
 8004364:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004366:	1c62      	adds	r2, r4, #1
 8004368:	d107      	bne.n	800437a <prvAddCurrentTaskToDelayedList+0x3e>
 800436a:	b137      	cbz	r7, 800437a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800436c:	6819      	ldr	r1, [r3, #0]
 800436e:	4812      	ldr	r0, [pc, #72]	; (80043b8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8004370:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004372:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004376:	f7ff bd4b 	b.w	8003e10 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800437a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800437c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800437e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004380:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8004382:	d907      	bls.n	8004394 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004384:	4a0d      	ldr	r2, [pc, #52]	; (80043bc <prvAddCurrentTaskToDelayedList+0x80>)
 8004386:	6810      	ldr	r0, [r2, #0]
 8004388:	6819      	ldr	r1, [r3, #0]
}
 800438a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800438e:	3104      	adds	r1, #4
 8004390:	f7ff bd4a 	b.w	8003e28 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004394:	4a0a      	ldr	r2, [pc, #40]	; (80043c0 <prvAddCurrentTaskToDelayedList+0x84>)
 8004396:	6810      	ldr	r0, [r2, #0]
 8004398:	6819      	ldr	r1, [r3, #0]
 800439a:	3104      	adds	r1, #4
 800439c:	f7ff fd44 	bl	8003e28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043a0:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <prvAddCurrentTaskToDelayedList+0x88>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80043a6:	bf38      	it	cc
 80043a8:	601c      	strcc	r4, [r3, #0]
 80043aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ac:	20004090 	.word	0x20004090
 80043b0:	20003f6c 	.word	0x20003f6c
 80043b4:	20004018 	.word	0x20004018
 80043b8:	20004068 	.word	0x20004068
 80043bc:	20003f74 	.word	0x20003f74
 80043c0:	20003f70 	.word	0x20003f70
 80043c4:	20004048 	.word	0x20004048

080043c8 <xTaskCreate>:
	{
 80043c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043cc:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80043d0:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043d2:	4650      	mov	r0, sl
	{
 80043d4:	460f      	mov	r7, r1
 80043d6:	4699      	mov	r9, r3
 80043d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043da:	f7ff fed7 	bl	800418c <pvPortMalloc>
			if( pxStack != NULL )
 80043de:	4605      	mov	r5, r0
 80043e0:	2800      	cmp	r0, #0
 80043e2:	f000 8096 	beq.w	8004512 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80043e6:	2054      	movs	r0, #84	; 0x54
 80043e8:	f7ff fed0 	bl	800418c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80043ec:	4604      	mov	r4, r0
 80043ee:	2800      	cmp	r0, #0
 80043f0:	f000 808c 	beq.w	800450c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80043f4:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80043f8:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80043fa:	4455      	add	r5, sl
 80043fc:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80043fe:	f025 0a07 	bic.w	sl, r5, #7
 8004402:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8004406:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004408:	7859      	ldrb	r1, [r3, #1]
 800440a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800440e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004412:	b109      	cbz	r1, 8004418 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004414:	42bb      	cmp	r3, r7
 8004416:	d1f7      	bne.n	8004408 <xTaskCreate+0x40>
 8004418:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800441a:	2d06      	cmp	r5, #6
 800441c:	bf28      	it	cs
 800441e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004420:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004424:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8004426:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004428:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800442a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800442c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8004430:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004434:	f7ff fce9 	bl	8003e0a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004438:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800443c:	f104 0018 	add.w	r0, r4, #24
 8004440:	f7ff fce3 	bl	8003e0a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8004444:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004448:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800444a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800444c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800444e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004452:	464a      	mov	r2, r9
 8004454:	4641      	mov	r1, r8
 8004456:	4650      	mov	r0, sl
 8004458:	f7ff fd40 	bl	8003edc <pxPortInitialiseStack>
 800445c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800445e:	b106      	cbz	r6, 8004462 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004460:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8004462:	f7ff fd67 	bl	8003f34 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004466:	4b32      	ldr	r3, [pc, #200]	; (8004530 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8004468:	4e32      	ldr	r6, [pc, #200]	; (8004534 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8004560 <xTaskCreate+0x198>
 8004470:	3201      	adds	r2, #1
 8004472:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004474:	6835      	ldr	r5, [r6, #0]
 8004476:	2d00      	cmp	r5, #0
 8004478:	d14e      	bne.n	8004518 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 800447a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d11d      	bne.n	80044be <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004482:	eb08 0005 	add.w	r0, r8, r5
 8004486:	3514      	adds	r5, #20
 8004488:	f7ff fcb4 	bl	8003df4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800448c:	2d8c      	cmp	r5, #140	; 0x8c
 800448e:	d1f8      	bne.n	8004482 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8004490:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004564 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8004494:	4d28      	ldr	r5, [pc, #160]	; (8004538 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8004496:	4648      	mov	r0, r9
 8004498:	f7ff fcac 	bl	8003df4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800449c:	4628      	mov	r0, r5
 800449e:	f7ff fca9 	bl	8003df4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044a2:	4826      	ldr	r0, [pc, #152]	; (800453c <xTaskCreate+0x174>)
 80044a4:	f7ff fca6 	bl	8003df4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80044a8:	4825      	ldr	r0, [pc, #148]	; (8004540 <xTaskCreate+0x178>)
 80044aa:	f7ff fca3 	bl	8003df4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80044ae:	4825      	ldr	r0, [pc, #148]	; (8004544 <xTaskCreate+0x17c>)
 80044b0:	f7ff fca0 	bl	8003df4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80044b4:	4b24      	ldr	r3, [pc, #144]	; (8004548 <xTaskCreate+0x180>)
 80044b6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044ba:	4b24      	ldr	r3, [pc, #144]	; (800454c <xTaskCreate+0x184>)
 80044bc:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80044be:	4a24      	ldr	r2, [pc, #144]	; (8004550 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80044c0:	4924      	ldr	r1, [pc, #144]	; (8004554 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80044c2:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80044c4:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80044c6:	3301      	adds	r3, #1
 80044c8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80044ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80044cc:	2501      	movs	r5, #1
 80044ce:	fa05 f302 	lsl.w	r3, r5, r2
 80044d2:	4303      	orrs	r3, r0
 80044d4:	2014      	movs	r0, #20
 80044d6:	600b      	str	r3, [r1, #0]
 80044d8:	fb00 8002 	mla	r0, r0, r2, r8
 80044dc:	4639      	mov	r1, r7
 80044de:	f7ff fc97 	bl	8003e10 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80044e2:	f7ff fd49 	bl	8003f78 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80044e6:	4b1c      	ldr	r3, [pc, #112]	; (8004558 <xTaskCreate+0x190>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	b163      	cbz	r3, 8004506 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044ec:	6833      	ldr	r3, [r6, #0]
 80044ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d207      	bcs.n	8004506 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80044f6:	4b19      	ldr	r3, [pc, #100]	; (800455c <xTaskCreate+0x194>)
 80044f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	f3bf 8f6f 	isb	sy
	}
 8004506:	4628      	mov	r0, r5
 8004508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800450c:	4628      	mov	r0, r5
 800450e:	f7ff fecb 	bl	80042a8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004512:	f04f 35ff 	mov.w	r5, #4294967295
 8004516:	e7f6      	b.n	8004506 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <xTaskCreate+0x190>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1ce      	bne.n	80044be <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004520:	6833      	ldr	r3, [r6, #0]
 8004522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004524:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004526:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8004528:	bf98      	it	ls
 800452a:	6034      	strls	r4, [r6, #0]
 800452c:	e7c7      	b.n	80044be <xTaskCreate+0xf6>
 800452e:	bf00      	nop
 8004530:	20004004 	.word	0x20004004
 8004534:	20003f6c 	.word	0x20003f6c
 8004538:	20004030 	.word	0x20004030
 800453c:	20004050 	.word	0x20004050
 8004540:	2000407c 	.word	0x2000407c
 8004544:	20004068 	.word	0x20004068
 8004548:	20003f70 	.word	0x20003f70
 800454c:	20003f74 	.word	0x20003f74
 8004550:	20004014 	.word	0x20004014
 8004554:	20004018 	.word	0x20004018
 8004558:	20004064 	.word	0x20004064
 800455c:	e000ed04 	.word	0xe000ed04
 8004560:	20003f78 	.word	0x20003f78
 8004564:	2000401c 	.word	0x2000401c

08004568 <vTaskStartScheduler>:
{
 8004568:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800456a:	4b17      	ldr	r3, [pc, #92]	; (80045c8 <vTaskStartScheduler+0x60>)
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	2400      	movs	r4, #0
 8004570:	9400      	str	r4, [sp, #0]
 8004572:	4623      	mov	r3, r4
 8004574:	2280      	movs	r2, #128	; 0x80
 8004576:	4915      	ldr	r1, [pc, #84]	; (80045cc <vTaskStartScheduler+0x64>)
 8004578:	4815      	ldr	r0, [pc, #84]	; (80045d0 <vTaskStartScheduler+0x68>)
 800457a:	f7ff ff25 	bl	80043c8 <xTaskCreate>
	if( xReturn == pdPASS )
 800457e:	2801      	cmp	r0, #1
 8004580:	d114      	bne.n	80045ac <vTaskStartScheduler+0x44>
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004592:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <vTaskStartScheduler+0x6c>)
 8004594:	f04f 32ff 	mov.w	r2, #4294967295
 8004598:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800459a:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <vTaskStartScheduler+0x70>)
 800459c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800459e:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <vTaskStartScheduler+0x74>)
 80045a0:	601c      	str	r4, [r3, #0]
}
 80045a2:	b002      	add	sp, #8
 80045a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80045a8:	f7ff bd56 	b.w	8004058 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045ac:	3001      	adds	r0, #1
 80045ae:	d108      	bne.n	80045c2 <vTaskStartScheduler+0x5a>
 80045b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	e7fe      	b.n	80045c0 <vTaskStartScheduler+0x58>
}
 80045c2:	b002      	add	sp, #8
 80045c4:	bd10      	pop	{r4, pc}
 80045c6:	bf00      	nop
 80045c8:	20004044 	.word	0x20004044
 80045cc:	080076cb 	.word	0x080076cb
 80045d0:	0800484d 	.word	0x0800484d
 80045d4:	20004048 	.word	0x20004048
 80045d8:	20004064 	.word	0x20004064
 80045dc:	20004090 	.word	0x20004090

080045e0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80045e0:	4a02      	ldr	r2, [pc, #8]	; (80045ec <vTaskSuspendAll+0xc>)
 80045e2:	6813      	ldr	r3, [r2, #0]
 80045e4:	3301      	adds	r3, #1
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	20004010 	.word	0x20004010

080045f0 <xTaskIncrementTick>:
{
 80045f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045f4:	4b3c      	ldr	r3, [pc, #240]	; (80046e8 <xTaskIncrementTick+0xf8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d153      	bne.n	80046a4 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80045fc:	4b3b      	ldr	r3, [pc, #236]	; (80046ec <xTaskIncrementTick+0xfc>)
 80045fe:	681c      	ldr	r4, [r3, #0]
 8004600:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8004602:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8004604:	b9bc      	cbnz	r4, 8004636 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004606:	4b3a      	ldr	r3, [pc, #232]	; (80046f0 <xTaskIncrementTick+0x100>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	b142      	cbz	r2, 8004620 <xTaskIncrementTick+0x30>
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	e7fe      	b.n	800461e <xTaskIncrementTick+0x2e>
 8004620:	4a34      	ldr	r2, [pc, #208]	; (80046f4 <xTaskIncrementTick+0x104>)
 8004622:	6819      	ldr	r1, [r3, #0]
 8004624:	6810      	ldr	r0, [r2, #0]
 8004626:	6018      	str	r0, [r3, #0]
 8004628:	6011      	str	r1, [r2, #0]
 800462a:	4a33      	ldr	r2, [pc, #204]	; (80046f8 <xTaskIncrementTick+0x108>)
 800462c:	6813      	ldr	r3, [r2, #0]
 800462e:	3301      	adds	r3, #1
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	f7ff fe71 	bl	8004318 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004636:	4d31      	ldr	r5, [pc, #196]	; (80046fc <xTaskIncrementTick+0x10c>)
 8004638:	4f31      	ldr	r7, [pc, #196]	; (8004700 <xTaskIncrementTick+0x110>)
 800463a:	682b      	ldr	r3, [r5, #0]
 800463c:	429c      	cmp	r4, r3
 800463e:	f04f 0b00 	mov.w	fp, #0
 8004642:	d33e      	bcc.n	80046c2 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004644:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80046f0 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8004648:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004710 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800464c:	f8d8 2000 	ldr.w	r2, [r8]
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	bb72      	cbnz	r2, 80046b2 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004654:	f04f 32ff 	mov.w	r2, #4294967295
 8004658:	602a      	str	r2, [r5, #0]
					break;
 800465a:	e032      	b.n	80046c2 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800465c:	f106 0a04 	add.w	sl, r6, #4
 8004660:	4650      	mov	r0, sl
 8004662:	f7ff fbf8 	bl	8003e56 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004666:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8004668:	b119      	cbz	r1, 8004672 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800466a:	f106 0018 	add.w	r0, r6, #24
 800466e:	f7ff fbf2 	bl	8003e56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004672:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004674:	f8d9 3000 	ldr.w	r3, [r9]
 8004678:	2201      	movs	r2, #1
 800467a:	fa02 f100 	lsl.w	r1, r2, r0
 800467e:	4319      	orrs	r1, r3
 8004680:	4b20      	ldr	r3, [pc, #128]	; (8004704 <xTaskIncrementTick+0x114>)
 8004682:	f8c9 1000 	str.w	r1, [r9]
 8004686:	f04f 0e14 	mov.w	lr, #20
 800468a:	4651      	mov	r1, sl
 800468c:	fb0e 3000 	mla	r0, lr, r0, r3
 8004690:	f7ff fbbe 	bl	8003e10 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004694:	6838      	ldr	r0, [r7, #0]
 8004696:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8004698:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800469a:	4291      	cmp	r1, r2
 800469c:	bf28      	it	cs
 800469e:	f04f 0b01 	movcs.w	fp, #1
 80046a2:	e7d3      	b.n	800464c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80046a4:	4a18      	ldr	r2, [pc, #96]	; (8004708 <xTaskIncrementTick+0x118>)
 80046a6:	6813      	ldr	r3, [r2, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80046ac:	f04f 0b00 	mov.w	fp, #0
 80046b0:	e011      	b.n	80046d6 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046b2:	f8d8 2000 	ldr.w	r2, [r8]
 80046b6:	68d2      	ldr	r2, [r2, #12]
 80046b8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046ba:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80046bc:	428c      	cmp	r4, r1
 80046be:	d2cd      	bcs.n	800465c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80046c0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <xTaskIncrementTick+0x114>)
 80046c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046c8:	2214      	movs	r2, #20
 80046ca:	434a      	muls	r2, r1
 80046cc:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80046ce:	2a02      	cmp	r2, #2
 80046d0:	bf28      	it	cs
 80046d2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80046d6:	4a0d      	ldr	r2, [pc, #52]	; (800470c <xTaskIncrementTick+0x11c>)
 80046d8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80046da:	2a00      	cmp	r2, #0
 80046dc:	bf18      	it	ne
 80046de:	f04f 0b01 	movne.w	fp, #1
}
 80046e2:	4658      	mov	r0, fp
 80046e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e8:	20004010 	.word	0x20004010
 80046ec:	20004090 	.word	0x20004090
 80046f0:	20003f70 	.word	0x20003f70
 80046f4:	20003f74 	.word	0x20003f74
 80046f8:	2000404c 	.word	0x2000404c
 80046fc:	20004048 	.word	0x20004048
 8004700:	20003f6c 	.word	0x20003f6c
 8004704:	20003f78 	.word	0x20003f78
 8004708:	2000400c 	.word	0x2000400c
 800470c:	20004094 	.word	0x20004094
 8004710:	20004018 	.word	0x20004018

08004714 <xTaskResumeAll>:
{
 8004714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8004718:	4c31      	ldr	r4, [pc, #196]	; (80047e0 <xTaskResumeAll+0xcc>)
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	b943      	cbnz	r3, 8004730 <xTaskResumeAll+0x1c>
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	e7fe      	b.n	800472e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8004730:	f7ff fc00 	bl	8003f34 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	3b01      	subs	r3, #1
 8004738:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800473a:	6824      	ldr	r4, [r4, #0]
 800473c:	b12c      	cbz	r4, 800474a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800473e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004740:	f7ff fc1a 	bl	8003f78 <vPortExitCritical>
}
 8004744:	4620      	mov	r0, r4
 8004746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800474a:	4b26      	ldr	r3, [pc, #152]	; (80047e4 <xTaskResumeAll+0xd0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0f5      	beq.n	800473e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004752:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80047fc <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8004756:	4f24      	ldr	r7, [pc, #144]	; (80047e8 <xTaskResumeAll+0xd4>)
 8004758:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004800 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800475c:	f8d9 3000 	ldr.w	r3, [r9]
 8004760:	b9e3      	cbnz	r3, 800479c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8004762:	b10c      	cbz	r4, 8004768 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8004764:	f7ff fdd8 	bl	8004318 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004768:	4d20      	ldr	r5, [pc, #128]	; (80047ec <xTaskResumeAll+0xd8>)
 800476a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800476c:	b144      	cbz	r4, 8004780 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800476e:	4e20      	ldr	r6, [pc, #128]	; (80047f0 <xTaskResumeAll+0xdc>)
 8004770:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004772:	f7ff ff3d 	bl	80045f0 <xTaskIncrementTick>
 8004776:	b100      	cbz	r0, 800477a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8004778:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800477a:	3c01      	subs	r4, #1
 800477c:	d1f9      	bne.n	8004772 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800477e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004780:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <xTaskResumeAll+0xdc>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0da      	beq.n	800473e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004788:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <xTaskResumeAll+0xe0>)
 800478a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004798:	2401      	movs	r4, #1
 800479a:	e7d1      	b.n	8004740 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800479c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80047a0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047a2:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047a4:	f104 0018 	add.w	r0, r4, #24
 80047a8:	f7ff fb55 	bl	8003e56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ac:	4630      	mov	r0, r6
 80047ae:	f7ff fb52 	bl	8003e56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80047b4:	6839      	ldr	r1, [r7, #0]
 80047b6:	2501      	movs	r5, #1
 80047b8:	fa05 f302 	lsl.w	r3, r5, r2
 80047bc:	2014      	movs	r0, #20
 80047be:	430b      	orrs	r3, r1
 80047c0:	fb00 8002 	mla	r0, r0, r2, r8
 80047c4:	4631      	mov	r1, r6
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	f7ff fb22 	bl	8003e10 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <xTaskResumeAll+0xe4>)
 80047ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80047d6:	bf24      	itt	cs
 80047d8:	4b05      	ldrcs	r3, [pc, #20]	; (80047f0 <xTaskResumeAll+0xdc>)
 80047da:	601d      	strcs	r5, [r3, #0]
 80047dc:	e7be      	b.n	800475c <xTaskResumeAll+0x48>
 80047de:	bf00      	nop
 80047e0:	20004010 	.word	0x20004010
 80047e4:	20004004 	.word	0x20004004
 80047e8:	20004018 	.word	0x20004018
 80047ec:	2000400c 	.word	0x2000400c
 80047f0:	20004094 	.word	0x20004094
 80047f4:	e000ed04 	.word	0xe000ed04
 80047f8:	20003f6c 	.word	0x20003f6c
 80047fc:	20004050 	.word	0x20004050
 8004800:	20003f78 	.word	0x20003f78

08004804 <vTaskDelay>:
	{
 8004804:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004806:	b940      	cbnz	r0, 800481a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004808:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <vTaskDelay+0x40>)
 800480a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800481a:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <vTaskDelay+0x44>)
 800481c:	6819      	ldr	r1, [r3, #0]
 800481e:	b141      	cbz	r1, 8004832 <vTaskDelay+0x2e>
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	e7fe      	b.n	8004830 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004832:	f7ff fed5 	bl	80045e0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004836:	f7ff fd81 	bl	800433c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800483a:	f7ff ff6b 	bl	8004714 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800483e:	2800      	cmp	r0, #0
 8004840:	d0e2      	beq.n	8004808 <vTaskDelay+0x4>
 8004842:	bd08      	pop	{r3, pc}
 8004844:	e000ed04 	.word	0xe000ed04
 8004848:	20004010 	.word	0x20004010

0800484c <prvIdleTask>:
{
 800484c:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800484e:	4e17      	ldr	r6, [pc, #92]	; (80048ac <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004850:	4c17      	ldr	r4, [pc, #92]	; (80048b0 <prvIdleTask+0x64>)
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	b963      	cbnz	r3, 8004870 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004856:	4b17      	ldr	r3, [pc, #92]	; (80048b4 <prvIdleTask+0x68>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d9f8      	bls.n	8004850 <prvIdleTask+0x4>
				taskYIELD();
 800485e:	4b16      	ldr	r3, [pc, #88]	; (80048b8 <prvIdleTask+0x6c>)
 8004860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	e7ef      	b.n	8004850 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8004870:	f7ff feb6 	bl	80045e0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004874:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8004876:	f7ff ff4d 	bl	8004714 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800487a:	2d00      	cmp	r5, #0
 800487c:	d0e9      	beq.n	8004852 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800487e:	f7ff fb59 	bl	8003f34 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004882:	68f3      	ldr	r3, [r6, #12]
 8004884:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004886:	1d28      	adds	r0, r5, #4
 8004888:	f7ff fae5 	bl	8003e56 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800488c:	4a0b      	ldr	r2, [pc, #44]	; (80048bc <prvIdleTask+0x70>)
 800488e:	6813      	ldr	r3, [r2, #0]
 8004890:	3b01      	subs	r3, #1
 8004892:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	3b01      	subs	r3, #1
 8004898:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800489a:	f7ff fb6d 	bl	8003f78 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800489e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80048a0:	f7ff fd02 	bl	80042a8 <vPortFree>
			vPortFree( pxTCB );
 80048a4:	4628      	mov	r0, r5
 80048a6:	f7ff fcff 	bl	80042a8 <vPortFree>
 80048aa:	e7d2      	b.n	8004852 <prvIdleTask+0x6>
 80048ac:	2000407c 	.word	0x2000407c
 80048b0:	20004008 	.word	0x20004008
 80048b4:	20003f78 	.word	0x20003f78
 80048b8:	e000ed04 	.word	0xe000ed04
 80048bc:	20004004 	.word	0x20004004

080048c0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048c0:	4b17      	ldr	r3, [pc, #92]	; (8004920 <vTaskSwitchContext+0x60>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4b17      	ldr	r3, [pc, #92]	; (8004924 <vTaskSwitchContext+0x64>)
{
 80048c6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048c8:	b112      	cbz	r2, 80048d0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80048ca:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80048d0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <vTaskSwitchContext+0x68>)
 80048d4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80048d6:	fab3 f383 	clz	r3, r3
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	f1c3 031f 	rsb	r3, r3, #31
 80048e0:	2214      	movs	r2, #20
 80048e2:	4912      	ldr	r1, [pc, #72]	; (800492c <vTaskSwitchContext+0x6c>)
 80048e4:	435a      	muls	r2, r3
 80048e6:	1888      	adds	r0, r1, r2
 80048e8:	588c      	ldr	r4, [r1, r2]
 80048ea:	b944      	cbnz	r4, 80048fe <vTaskSwitchContext+0x3e>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	e7fe      	b.n	80048fc <vTaskSwitchContext+0x3c>
 80048fe:	6844      	ldr	r4, [r0, #4]
 8004900:	3208      	adds	r2, #8
 8004902:	6864      	ldr	r4, [r4, #4]
 8004904:	6044      	str	r4, [r0, #4]
 8004906:	440a      	add	r2, r1
 8004908:	4294      	cmp	r4, r2
 800490a:	bf04      	itt	eq
 800490c:	6862      	ldreq	r2, [r4, #4]
 800490e:	6042      	streq	r2, [r0, #4]
 8004910:	2214      	movs	r2, #20
 8004912:	fb02 1303 	mla	r3, r2, r3, r1
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	4b05      	ldr	r3, [pc, #20]	; (8004930 <vTaskSwitchContext+0x70>)
 800491c:	e7d6      	b.n	80048cc <vTaskSwitchContext+0xc>
 800491e:	bf00      	nop
 8004920:	20004010 	.word	0x20004010
 8004924:	20004094 	.word	0x20004094
 8004928:	20004018 	.word	0x20004018
 800492c:	20003f78 	.word	0x20003f78
 8004930:	20003f6c 	.word	0x20003f6c

08004934 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004934:	4b05      	ldr	r3, [pc, #20]	; (800494c <xTaskGetSchedulerState+0x18>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	b133      	cbz	r3, 8004948 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <xTaskGetSchedulerState+0x1c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004940:	bf0c      	ite	eq
 8004942:	2002      	moveq	r0, #2
 8004944:	2000      	movne	r0, #0
 8004946:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004948:	2001      	movs	r0, #1
	}
 800494a:	4770      	bx	lr
 800494c:	20004064 	.word	0x20004064
 8004950:	20004010 	.word	0x20004010

08004954 <StartDefaultTask>:
}
/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8004954:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8004956:	f000 ffdd 	bl	8005914 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800495a:	2001      	movs	r0, #1
 800495c:	f7ff fa38 	bl	8003dd0 <osDelay>
 8004960:	e7fb      	b.n	800495a <StartDefaultTask+0x6>
	...

08004964 <SystemClock_Config>:
{
 8004964:	b530      	push	{r4, r5, lr}
 8004966:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 8004968:	4b27      	ldr	r3, [pc, #156]	; (8004a08 <SystemClock_Config+0xa4>)
 800496a:	2100      	movs	r1, #0
 800496c:	9101      	str	r1, [sp, #4]
 800496e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004970:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004980:	4b22      	ldr	r3, [pc, #136]	; (8004a0c <SystemClock_Config+0xa8>)
 8004982:	9102      	str	r1, [sp, #8]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004992:	9302      	str	r3, [sp, #8]
 8004994:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004996:	2301      	movs	r3, #1
 8004998:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800499a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800499e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80049a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049a4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80049a6:	2308      	movs	r3, #8
 80049a8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80049aa:	2348      	movs	r3, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049ac:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 72;
 80049ae:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049b0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80049b2:	2303      	movs	r3, #3
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049b4:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80049b6:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80049b8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049ba:	f7fd fc61 	bl	8002280 <HAL_RCC_OscConfig>
 80049be:	b100      	cbz	r0, 80049c2 <SystemClock_Config+0x5e>
 80049c0:	e7fe      	b.n	80049c0 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049c2:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80049c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049c8:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80049ca:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049cc:	250f      	movs	r5, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80049ce:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049d0:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049d2:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80049d4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80049d6:	f7fd fdfb 	bl	80025d0 <HAL_RCC_ClockConfig>
 80049da:	4604      	mov	r4, r0
 80049dc:	b100      	cbz	r0, 80049e0 <SystemClock_Config+0x7c>
 80049de:	e7fe      	b.n	80049de <SystemClock_Config+0x7a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80049e0:	f7fd fe90 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 80049e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80049ec:	f7fc fb2c 	bl	8001048 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80049f0:	2004      	movs	r0, #4
 80049f2:	f7fc fb3f 	bl	8001074 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80049f6:	4622      	mov	r2, r4
 80049f8:	4629      	mov	r1, r5
 80049fa:	f04f 30ff 	mov.w	r0, #4294967295
 80049fe:	f7fc fae3 	bl	8000fc8 <HAL_NVIC_SetPriority>
}
 8004a02:	b015      	add	sp, #84	; 0x54
 8004a04:	bd30      	pop	{r4, r5, pc}
 8004a06:	bf00      	nop
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	40007000 	.word	0x40007000

08004a10 <main>:
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a14:	2400      	movs	r4, #0
  HAL_Init();
 8004a16:	f7fc fa85 	bl	8000f24 <HAL_Init>
  SystemClock_Config();
 8004a1a:	f7ff ffa3 	bl	8004964 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a1e:	4b97      	ldr	r3, [pc, #604]	; (8004c7c <main+0x26c>)
 8004a20:	9401      	str	r4, [sp, #4]
 8004a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, HeartBeat3_Pin|HeartBeat4_Pin, GPIO_PIN_RESET);
 8004a24:	4896      	ldr	r0, [pc, #600]	; (8004c80 <main+0x270>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a26:	f042 0204 	orr.w	r2, r2, #4
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a2e:	f002 0204 	and.w	r2, r2, #4
 8004a32:	9201      	str	r2, [sp, #4]
 8004a34:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a36:	9402      	str	r4, [sp, #8]
 8004a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8004a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a42:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004a46:	9202      	str	r2, [sp, #8]
 8004a48:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a4a:	9403      	str	r4, [sp, #12]
 8004a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
 8004a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a56:	f002 0201 	and.w	r2, r2, #1
 8004a5a:	9203      	str	r2, [sp, #12]
 8004a5c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a5e:	9404      	str	r4, [sp, #16]
 8004a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a62:	f042 0202 	orr.w	r2, r2, #2
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, HeartBeat3_Pin|HeartBeat4_Pin, GPIO_PIN_RESET);
 8004a70:	4622      	mov	r2, r4
 8004a72:	2130      	movs	r1, #48	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a74:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, HeartBeat3_Pin|HeartBeat4_Pin, GPIO_PIN_RESET);
 8004a76:	f7fc fbef 	bl	8001258 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, PC4_LED_Pin|PC4_LEDC5_Pin|HeartBeat1_Pin|HeartBeat2_Pin, GPIO_PIN_RESET);
 8004a7a:	4622      	mov	r2, r4
 8004a7c:	21f0      	movs	r1, #240	; 0xf0
 8004a7e:	4881      	ldr	r0, [pc, #516]	; (8004c84 <main+0x274>)
 8004a80:	f7fc fbea 	bl	8001258 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = PC13_Header_Pin|Switch6_Pin|KillSwitch_Pin|Switch3_Pin 
 8004a84:	f24e 030e 	movw	r3, #57358	; 0xe00e
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a88:	a907      	add	r1, sp, #28
 8004a8a:	487e      	ldr	r0, [pc, #504]	; (8004c84 <main+0x274>)
  GPIO_InitStruct.Pin = PC13_Header_Pin|Switch6_Pin|KillSwitch_Pin|Switch3_Pin 
 8004a8c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = MissionStart_Pin;
 8004a8e:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a90:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a92:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a94:	f7fc fafa 	bl	800108c <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004a98:	2302      	movs	r3, #2
  HAL_GPIO_Init(MissionStart_GPIO_Port, &GPIO_InitStruct);
 8004a9a:	a907      	add	r1, sp, #28
 8004a9c:	4879      	ldr	r0, [pc, #484]	; (8004c84 <main+0x274>)
  GPIO_InitStruct.Pin = MissionStart_Pin;
 8004a9e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004aa0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004aa2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(MissionStart_GPIO_Port, &GPIO_InitStruct);
 8004aa4:	f7fc faf2 	bl	800108c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HeartBeat3_Pin|HeartBeat4_Pin;
 8004aa8:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aaa:	a907      	add	r1, sp, #28
 8004aac:	4874      	ldr	r0, [pc, #464]	; (8004c80 <main+0x270>)
  GPIO_InitStruct.Pin = HeartBeat3_Pin|HeartBeat4_Pin;
 8004aae:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ab0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab6:	f7fc fae9 	bl	800108c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PC4_LED_Pin|PC4_LEDC5_Pin|HeartBeat1_Pin|HeartBeat2_Pin;
 8004aba:	23f0      	movs	r3, #240	; 0xf0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004abc:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004abe:	a907      	add	r1, sp, #28
  htim2.Instance = TIM2;
 8004ac0:	4d71      	ldr	r5, [pc, #452]	; (8004c88 <main+0x278>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ac2:	4870      	ldr	r0, [pc, #448]	; (8004c84 <main+0x274>)
  GPIO_InitStruct.Pin = PC4_LED_Pin|PC4_LEDC5_Pin|HeartBeat1_Pin|HeartBeat2_Pin;
 8004ac4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aca:	f7fc fadf 	bl	800108c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PB8_Header_Pin|DebugSwitch_Pin;
 8004ace:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ad2:	486e      	ldr	r0, [pc, #440]	; (8004c8c <main+0x27c>)
  GPIO_InitStruct.Pin = PB8_Header_Pin|DebugSwitch_Pin;
 8004ad4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ad6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ad8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ada:	9409      	str	r4, [sp, #36]	; 0x24
  htim2.Init.Prescaler = 71;
 8004adc:	2747      	movs	r7, #71	; 0x47
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ade:	f7fc fad5 	bl	800108c <HAL_GPIO_Init>
  htim2.Init.Period = 3000;
 8004ae2:	f640 36b8 	movw	r6, #3000	; 0xbb8
  htim2.Init.Prescaler = 71;
 8004ae6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004aea:	4628      	mov	r0, r5
  htim2.Init.Prescaler = 71;
 8004aec:	e885 0088 	stmia.w	r5, {r3, r7}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004af0:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 3000;
 8004af2:	60ee      	str	r6, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004af4:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004af6:	f7fd fffd 	bl	8002af4 <HAL_TIM_PWM_Init>
 8004afa:	b100      	cbz	r0, 8004afe <main+0xee>
 8004afc:	e7fe      	b.n	8004afc <main+0xec>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004afe:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b00:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004b02:	a905      	add	r1, sp, #20
 8004b04:	4628      	mov	r0, r5
 8004b06:	f7fe f8c7 	bl	8002c98 <HAL_TIMEx_MasterConfigSynchronization>
 8004b0a:	b100      	cbz	r0, 8004b0e <main+0xfe>
 8004b0c:	e7fe      	b.n	8004b0c <main+0xfc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b0e:	f04f 0a60 	mov.w	sl, #96	; 0x60
  sConfigOC.Pulse = 1500;
 8004b12:	f240 59dc 	movw	r9, #1500	; 0x5dc
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b16:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b18:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	a907      	add	r1, sp, #28
 8004b1e:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b20:	f8cd a01c 	str.w	sl, [sp, #28]
  sConfigOC.Pulse = 1500;
 8004b24:	f8cd 9020 	str.w	r9, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004b28:	f7fe f82e 	bl	8002b88 <HAL_TIM_PWM_ConfigChannel>
 8004b2c:	b100      	cbz	r0, 8004b30 <main+0x120>
 8004b2e:	e7fe      	b.n	8004b2e <main+0x11e>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004b30:	2208      	movs	r2, #8
 8004b32:	a907      	add	r1, sp, #28
 8004b34:	4628      	mov	r0, r5
 8004b36:	f7fe f827 	bl	8002b88 <HAL_TIM_PWM_ConfigChannel>
 8004b3a:	b100      	cbz	r0, 8004b3e <main+0x12e>
 8004b3c:	e7fe      	b.n	8004b3c <main+0x12c>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004b3e:	220c      	movs	r2, #12
 8004b40:	a907      	add	r1, sp, #28
 8004b42:	4628      	mov	r0, r5
 8004b44:	f7fe f820 	bl	8002b88 <HAL_TIM_PWM_ConfigChannel>
 8004b48:	4680      	mov	r8, r0
 8004b4a:	b100      	cbz	r0, 8004b4e <main+0x13e>
 8004b4c:	e7fe      	b.n	8004b4c <main+0x13c>
  htim13.Instance = TIM13;
 8004b4e:	4c50      	ldr	r4, [pc, #320]	; (8004c90 <main+0x280>)
  HAL_TIM_MspPostInit(&htim2);
 8004b50:	4628      	mov	r0, r5
 8004b52:	f000 fe13 	bl	800577c <HAL_TIM_MspPostInit>
  htim13.Instance = TIM13;
 8004b56:	4b4f      	ldr	r3, [pc, #316]	; (8004c94 <main+0x284>)
  htim13.Init.Period = 3000;
 8004b58:	60e6      	str	r6, [r4, #12]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004b5a:	4620      	mov	r0, r4
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b5c:	e884 0188 	stmia.w	r4, {r3, r7, r8}
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b60:	f8c4 8010 	str.w	r8, [r4, #16]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004b64:	f7fd ffac 	bl	8002ac0 <HAL_TIM_Base_Init>
 8004b68:	b100      	cbz	r0, 8004b6c <main+0x15c>
 8004b6a:	e7fe      	b.n	8004b6a <main+0x15a>
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f7fd ffc1 	bl	8002af4 <HAL_TIM_PWM_Init>
 8004b72:	4602      	mov	r2, r0
 8004b74:	b100      	cbz	r0, 8004b78 <main+0x168>
 8004b76:	e7fe      	b.n	8004b76 <main+0x166>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b78:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b7a:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b7c:	a907      	add	r1, sp, #28
 8004b7e:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b80:	f8cd a01c 	str.w	sl, [sp, #28]
  sConfigOC.Pulse = 1500;
 8004b84:	f8cd 9020 	str.w	r9, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b88:	f7fd fffe 	bl	8002b88 <HAL_TIM_PWM_ConfigChannel>
 8004b8c:	4605      	mov	r5, r0
 8004b8e:	b100      	cbz	r0, 8004b92 <main+0x182>
 8004b90:	e7fe      	b.n	8004b90 <main+0x180>
  HAL_TIM_MspPostInit(&htim13);
 8004b92:	4620      	mov	r0, r4
  htim14.Instance = TIM14;
 8004b94:	4c40      	ldr	r4, [pc, #256]	; (8004c98 <main+0x288>)
  HAL_TIM_MspPostInit(&htim13);
 8004b96:	f000 fdf1 	bl	800577c <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 8004b9a:	4b40      	ldr	r3, [pc, #256]	; (8004c9c <main+0x28c>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b9c:	60a5      	str	r5, [r4, #8]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004b9e:	4620      	mov	r0, r4
  htim14.Init.Prescaler = 71;
 8004ba0:	e884 0088 	stmia.w	r4, {r3, r7}
  htim14.Init.Period = 3000;
 8004ba4:	60e6      	str	r6, [r4, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ba6:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004ba8:	f7fd ff8a 	bl	8002ac0 <HAL_TIM_Base_Init>
 8004bac:	b100      	cbz	r0, 8004bb0 <main+0x1a0>
 8004bae:	e7fe      	b.n	8004bae <main+0x19e>
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f7fd ff9f 	bl	8002af4 <HAL_TIM_PWM_Init>
 8004bb6:	b100      	cbz	r0, 8004bba <main+0x1aa>
 8004bb8:	e7fe      	b.n	8004bb8 <main+0x1a8>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004bba:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004bbc:	2660      	movs	r6, #96	; 0x60
  sConfigOC.Pulse = 1500;
 8004bbe:	f240 55dc 	movw	r5, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004bc2:	a907      	add	r1, sp, #28
 8004bc4:	4834      	ldr	r0, [pc, #208]	; (8004c98 <main+0x288>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004bc6:	9607      	str	r6, [sp, #28]
  sConfigOC.Pulse = 1500;
 8004bc8:	9508      	str	r5, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004bca:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004bcc:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004bce:	f7fd ffdb 	bl	8002b88 <HAL_TIM_PWM_ConfigChannel>
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	b100      	cbz	r0, 8004bd8 <main+0x1c8>
 8004bd6:	e7fe      	b.n	8004bd6 <main+0x1c6>
  HAL_TIM_MspPostInit(&htim14);
 8004bd8:	482f      	ldr	r0, [pc, #188]	; (8004c98 <main+0x288>)
  hi2c3.Init.ClockSpeed = 100000;
 8004bda:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8004cb8 <main+0x2a8>
  HAL_TIM_MspPostInit(&htim14);
 8004bde:	f000 fdcd 	bl	800577c <HAL_TIM_MspPostInit>
  hi2c3.Instance = I2C3;
 8004be2:	482f      	ldr	r0, [pc, #188]	; (8004ca0 <main+0x290>)
  hi2c3.Init.ClockSpeed = 100000;
 8004be4:	4b2f      	ldr	r3, [pc, #188]	; (8004ca4 <main+0x294>)
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004be6:	6084      	str	r4, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004be8:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  hi2c3.Init.ClockSpeed = 100000;
 8004bec:	e880 0108 	stmia.w	r0, {r3, r8}
  hi2c3.Init.OwnAddress1 = 0;
 8004bf0:	60c4      	str	r4, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004bf2:	6107      	str	r7, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004bf4:	6144      	str	r4, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004bf6:	6184      	str	r4, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004bf8:	61c4      	str	r4, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004bfa:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004bfc:	f7fc fc32 	bl	8001464 <HAL_I2C_Init>
 8004c00:	b100      	cbz	r0, 8004c04 <main+0x1f4>
 8004c02:	e7fe      	b.n	8004c02 <main+0x1f2>
  hi2c1.Instance = I2C1;
 8004c04:	4b28      	ldr	r3, [pc, #160]	; (8004ca8 <main+0x298>)
 8004c06:	4a29      	ldr	r2, [pc, #164]	; (8004cac <main+0x29c>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c08:	6098      	str	r0, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004c0a:	60d8      	str	r0, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c0c:	6158      	str	r0, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004c0e:	6198      	str	r0, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c10:	61d8      	str	r0, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c12:	6218      	str	r0, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c14:	4618      	mov	r0, r3
  hi2c1.Init.ClockSpeed = 100000;
 8004c16:	e883 0104 	stmia.w	r3, {r2, r8}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c1a:	611f      	str	r7, [r3, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c1c:	f7fc fc22 	bl	8001464 <HAL_I2C_Init>
 8004c20:	b100      	cbz	r0, 8004c24 <main+0x214>
 8004c22:	e7fe      	b.n	8004c22 <main+0x212>
  htim3.Instance = TIM3;
 8004c24:	4c22      	ldr	r4, [pc, #136]	; (8004cb0 <main+0x2a0>)
  htim3.Init.Prescaler = 71;
 8004c26:	4b23      	ldr	r3, [pc, #140]	; (8004cb4 <main+0x2a4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c28:	60a0      	str	r0, [r4, #8]
  htim3.Init.Prescaler = 71;
 8004c2a:	f04f 0947 	mov.w	r9, #71	; 0x47
  htim3.Init.Period = 3000;
 8004c2e:	f640 38b8 	movw	r8, #3000	; 0xbb8
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c32:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004c34:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 71;
 8004c36:	e884 0208 	stmia.w	r4, {r3, r9}
  htim3.Init.Period = 3000;
 8004c3a:	f8c4 800c 	str.w	r8, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004c3e:	f7fd ff59 	bl	8002af4 <HAL_TIM_PWM_Init>
 8004c42:	b100      	cbz	r0, 8004c46 <main+0x236>
 8004c44:	e7fe      	b.n	8004c44 <main+0x234>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c46:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c48:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c4a:	a905      	add	r1, sp, #20
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f7fe f823 	bl	8002c98 <HAL_TIMEx_MasterConfigSynchronization>
 8004c52:	b100      	cbz	r0, 8004c56 <main+0x246>
 8004c54:	e7fe      	b.n	8004c54 <main+0x244>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c56:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c58:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	a907      	add	r1, sp, #28
 8004c5e:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c60:	9607      	str	r6, [sp, #28]
  sConfigOC.Pulse = 1500;
 8004c62:	9508      	str	r5, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c64:	f7fd ff90 	bl	8002b88 <HAL_TIM_PWM_ConfigChannel>
 8004c68:	b100      	cbz	r0, 8004c6c <main+0x25c>
 8004c6a:	e7fe      	b.n	8004c6a <main+0x25a>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c6c:	220c      	movs	r2, #12
 8004c6e:	a907      	add	r1, sp, #28
 8004c70:	4620      	mov	r0, r4
 8004c72:	f7fd ff89 	bl	8002b88 <HAL_TIM_PWM_ConfigChannel>
 8004c76:	4607      	mov	r7, r0
 8004c78:	b300      	cbz	r0, 8004cbc <main+0x2ac>
 8004c7a:	e7fe      	b.n	8004c7a <main+0x26a>
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40020000 	.word	0x40020000
 8004c84:	40020800 	.word	0x40020800
 8004c88:	20004208 	.word	0x20004208
 8004c8c:	40020400 	.word	0x40020400
 8004c90:	200041cc 	.word	0x200041cc
 8004c94:	40001c00 	.word	0x40001c00
 8004c98:	20004244 	.word	0x20004244
 8004c9c:	40002000 	.word	0x40002000
 8004ca0:	200040ac 	.word	0x200040ac
 8004ca4:	40005c00 	.word	0x40005c00
 8004ca8:	20004100 	.word	0x20004100
 8004cac:	40005400 	.word	0x40005400
 8004cb0:	20004190 	.word	0x20004190
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	000186a0 	.word	0x000186a0
  HAL_TIM_MspPostInit(&htim3);
 8004cbc:	4620      	mov	r0, r4
  htim5.Instance = TIM5;
 8004cbe:	4c2f      	ldr	r4, [pc, #188]	; (8004d7c <main+0x36c>)
  HAL_TIM_MspPostInit(&htim3);
 8004cc0:	f000 fd5c 	bl	800577c <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8004cc4:	4b2e      	ldr	r3, [pc, #184]	; (8004d80 <main+0x370>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cc6:	60a7      	str	r7, [r4, #8]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004cc8:	4620      	mov	r0, r4
  htim5.Init.Prescaler = 71;
 8004cca:	e884 0208 	stmia.w	r4, {r3, r9}
  htim5.Init.Period = 3000;
 8004cce:	f8c4 800c 	str.w	r8, [r4, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cd2:	6127      	str	r7, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004cd4:	f7fd ff0e 	bl	8002af4 <HAL_TIM_PWM_Init>
 8004cd8:	b100      	cbz	r0, 8004cdc <main+0x2cc>
 8004cda:	e7fe      	b.n	8004cda <main+0x2ca>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cdc:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cde:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004ce0:	a905      	add	r1, sp, #20
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f7fd ffd8 	bl	8002c98 <HAL_TIMEx_MasterConfigSynchronization>
 8004ce8:	b100      	cbz	r0, 8004cec <main+0x2dc>
 8004cea:	e7fe      	b.n	8004cea <main+0x2da>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cec:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cee:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004cf0:	220c      	movs	r2, #12
 8004cf2:	a907      	add	r1, sp, #28
 8004cf4:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cf6:	9607      	str	r6, [sp, #28]
  sConfigOC.Pulse = 1500;
 8004cf8:	9508      	str	r5, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004cfa:	f7fd ff45 	bl	8002b88 <HAL_TIM_PWM_ConfigChannel>
 8004cfe:	b100      	cbz	r0, 8004d02 <main+0x2f2>
 8004d00:	e7fe      	b.n	8004d00 <main+0x2f0>
  HAL_TIM_MspPostInit(&htim5);
 8004d02:	481e      	ldr	r0, [pc, #120]	; (8004d7c <main+0x36c>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004d04:	4d1f      	ldr	r5, [pc, #124]	; (8004d84 <main+0x374>)
  HAL_TIM_MspPostInit(&htim5);
 8004d06:	f000 fd39 	bl	800577c <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	481e      	ldr	r0, [pc, #120]	; (8004d88 <main+0x378>)
 8004d0e:	f7fd ffa9 	bl	8002c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004d12:	2104      	movs	r1, #4
 8004d14:	481c      	ldr	r0, [pc, #112]	; (8004d88 <main+0x378>)
 8004d16:	f7fd ffa5 	bl	8002c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004d1a:	2108      	movs	r1, #8
 8004d1c:	481a      	ldr	r0, [pc, #104]	; (8004d88 <main+0x378>)
 8004d1e:	f7fd ffa1 	bl	8002c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004d22:	210c      	movs	r1, #12
 8004d24:	4818      	ldr	r0, [pc, #96]	; (8004d88 <main+0x378>)
 8004d26:	f7fd ff9d 	bl	8002c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8004d2a:	2108      	movs	r1, #8
 8004d2c:	4817      	ldr	r0, [pc, #92]	; (8004d8c <main+0x37c>)
 8004d2e:	f7fd ff99 	bl	8002c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004d32:	210c      	movs	r1, #12
 8004d34:	4815      	ldr	r0, [pc, #84]	; (8004d8c <main+0x37c>)
 8004d36:	f7fd ff95 	bl	8002c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8004d3a:	2108      	movs	r1, #8
 8004d3c:	480f      	ldr	r0, [pc, #60]	; (8004d7c <main+0x36c>)
 8004d3e:	f7fd ff91 	bl	8002c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8004d42:	210c      	movs	r1, #12
 8004d44:	480d      	ldr	r0, [pc, #52]	; (8004d7c <main+0x36c>)
 8004d46:	f7fd ff8d 	bl	8002c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	4810      	ldr	r0, [pc, #64]	; (8004d90 <main+0x380>)
 8004d4e:	f7fd ff89 	bl	8002c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8004d52:	2100      	movs	r1, #0
 8004d54:	480f      	ldr	r0, [pc, #60]	; (8004d94 <main+0x384>)
 8004d56:	f7fd ff85 	bl	8002c64 <HAL_TIM_PWM_Start>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004d5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d5c:	ac07      	add	r4, sp, #28
 8004d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004d64:	2100      	movs	r1, #0
 8004d66:	a807      	add	r0, sp, #28
 8004d68:	f7ff f81a 	bl	8003da0 <osThreadCreate>
 8004d6c:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <main+0x388>)
 8004d6e:	6018      	str	r0, [r3, #0]
  riptideMain();
 8004d70:	f000 fa00 	bl	8005174 <riptideMain>
  osKernelStart();
 8004d74:	f7ff f80f 	bl	8003d96 <osKernelStart>
 8004d78:	e7fe      	b.n	8004d78 <main+0x368>
 8004d7a:	bf00      	nop
 8004d7c:	20004154 	.word	0x20004154
 8004d80:	40000c00 	.word	0x40000c00
 8004d84:	080076a8 	.word	0x080076a8
 8004d88:	20004208 	.word	0x20004208
 8004d8c:	20004190 	.word	0x20004190
 8004d90:	200041cc 	.word	0x200041cc
 8004d94:	20004244 	.word	0x20004244
 8004d98:	200040a8 	.word	0x200040a8

08004d9c <writePWM>:
	  htim5.Instance->CCR4 = values[0];
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	; (8004dd4 <writePWM+0x38>)
 8004d9e:	8802      	ldrh	r2, [r0, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
	  htim14.Instance->CCR1 = values[5];
 8004da2:	8941      	ldrh	r1, [r0, #10]
	  htim5.Instance->CCR4 = values[0];
 8004da4:	641a      	str	r2, [r3, #64]	; 0x40
	  htim2.Instance->CCR2 = values[1];
 8004da6:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <writePWM+0x3c>)
 8004da8:	8842      	ldrh	r2, [r0, #2]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	639a      	str	r2, [r3, #56]	; 0x38
	  htim2.Instance->CCR4 = values[2];
 8004dae:	8882      	ldrh	r2, [r0, #4]
 8004db0:	641a      	str	r2, [r3, #64]	; 0x40
	  htim2.Instance->CCR3 = values[3];
 8004db2:	88c2      	ldrh	r2, [r0, #6]
 8004db4:	63da      	str	r2, [r3, #60]	; 0x3c
	  htim3.Instance->CCR4 = values[4];
 8004db6:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <writePWM+0x40>)
 8004db8:	8902      	ldrh	r2, [r0, #8]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40
	  htim14.Instance->CCR1 = values[5];
 8004dbe:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <writePWM+0x44>)
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	6351      	str	r1, [r2, #52]	; 0x34
	  htim13.Instance->CCR1 = values[6];
 8004dc4:	4a07      	ldr	r2, [pc, #28]	; (8004de4 <writePWM+0x48>)
 8004dc6:	8981      	ldrh	r1, [r0, #12]
 8004dc8:	6812      	ldr	r2, [r2, #0]
 8004dca:	6351      	str	r1, [r2, #52]	; 0x34
	  htim3.Instance->CCR3 = values[7];
 8004dcc:	89c2      	ldrh	r2, [r0, #14]
 8004dce:	63da      	str	r2, [r3, #60]	; 0x3c
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20004154 	.word	0x20004154
 8004dd8:	20004208 	.word	0x20004208
 8004ddc:	20004190 	.word	0x20004190
 8004de0:	20004244 	.word	0x20004244
 8004de4:	200041cc 	.word	0x200041cc

08004de8 <resetPWM>:
	  htim5.Instance->CCR4 = 1500;
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <resetPWM+0x2c>)
	  htim14.Instance->CCR1 = 1500;
 8004dea:	490b      	ldr	r1, [pc, #44]	; (8004e18 <resetPWM+0x30>)
	  htim5.Instance->CCR4 = 1500;
 8004dec:	681a      	ldr	r2, [r3, #0]
	  htim14.Instance->CCR1 = 1500;
 8004dee:	6809      	ldr	r1, [r1, #0]
	  htim5.Instance->CCR4 = 1500;
 8004df0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004df4:	6413      	str	r3, [r2, #64]	; 0x40
	  htim2.Instance->CCR2 = 1500;
 8004df6:	4a09      	ldr	r2, [pc, #36]	; (8004e1c <resetPWM+0x34>)
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	6393      	str	r3, [r2, #56]	; 0x38
	  htim2.Instance->CCR4 = 1500;
 8004dfc:	6413      	str	r3, [r2, #64]	; 0x40
	  htim2.Instance->CCR3 = 1500;
 8004dfe:	63d3      	str	r3, [r2, #60]	; 0x3c
	  htim3.Instance->CCR4 = 1500;
 8004e00:	4a07      	ldr	r2, [pc, #28]	; (8004e20 <resetPWM+0x38>)
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	6413      	str	r3, [r2, #64]	; 0x40
	  htim14.Instance->CCR1 = 1500;
 8004e06:	634b      	str	r3, [r1, #52]	; 0x34
	  htim13.Instance->CCR1 = 1500;
 8004e08:	4906      	ldr	r1, [pc, #24]	; (8004e24 <resetPWM+0x3c>)
 8004e0a:	6809      	ldr	r1, [r1, #0]
 8004e0c:	634b      	str	r3, [r1, #52]	; 0x34
	  htim3.Instance->CCR3 = 1500;
 8004e0e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20004154 	.word	0x20004154
 8004e18:	20004244 	.word	0x20004244
 8004e1c:	20004208 	.word	0x20004208
 8004e20:	20004190 	.word	0x20004190
 8004e24:	200041cc 	.word	0x200041cc

08004e28 <getI2CRef>:
}
 8004e28:	4800      	ldr	r0, [pc, #0]	; (8004e2c <getI2CRef+0x4>)
 8004e2a:	4770      	bx	lr
 8004e2c:	20004100 	.word	0x20004100

08004e30 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004e30:	6802      	ldr	r2, [r0, #0]
 8004e32:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d101      	bne.n	8004e3c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004e38:	f7fc b88e 	b.w	8000f58 <HAL_IncTick>
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40010000 	.word	0x40010000

08004e44 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004e44:	e7fe      	b.n	8004e44 <_Error_Handler>

08004e46 <MessageCheck>:
 *          char* end       -the characters that are the last
 *          int compNumber  -the number of characters that start and end the message
 *          uint8_t* Buf    -the message sent
 *          uint32_t *Len   -the length of the message
 */
bool MessageCheck(char* start, char* end, int compNumber,uint8_t* Buf, uint32_t *Len ){
 8004e46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e48:	9e05      	ldr	r6, [sp, #20]
    int i = 0;
 8004e4a:	2400      	movs	r4, #0
    while( i < compNumber ){
 8004e4c:	4294      	cmp	r4, r2
 8004e4e:	db01      	blt.n	8004e54 <MessageCheck+0xe>
        }
        else {
            return false;
        }
    }
    return true;
 8004e50:	2001      	movs	r0, #1
 8004e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (Buf[i] == *start && Buf[*Len - (1+i)] == *end){
 8004e54:	5d1f      	ldrb	r7, [r3, r4]
 8004e56:	7805      	ldrb	r5, [r0, #0]
 8004e58:	42af      	cmp	r7, r5
 8004e5a:	d108      	bne.n	8004e6e <MessageCheck+0x28>
 8004e5c:	6835      	ldr	r5, [r6, #0]
 8004e5e:	3d01      	subs	r5, #1
 8004e60:	1b2d      	subs	r5, r5, r4
 8004e62:	5d5f      	ldrb	r7, [r3, r5]
 8004e64:	780d      	ldrb	r5, [r1, #0]
 8004e66:	42af      	cmp	r7, r5
 8004e68:	d101      	bne.n	8004e6e <MessageCheck+0x28>
            i++;
 8004e6a:	3401      	adds	r4, #1
 8004e6c:	e7ee      	b.n	8004e4c <MessageCheck+0x6>
            return false;
 8004e6e:	2000      	movs	r0, #0

}
 8004e70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e72 <parse>:
    CDC_Transmit_HS(failmsg, sizeof(failmsg));
  }
    return (USBD_OK);
}

void parse(uint8_t * raw, uint16_t * values) {
 8004e72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e74:	4604      	mov	r4, r0
 8004e76:	1e8d      	subs	r5, r1, #2
 8004e78:	f100 0628 	add.w	r6, r0, #40	; 0x28
	uint8_t string[4];
	for (int i = 1; i <= 10; i++) {
		string[0] = raw[4 * i];
 8004e7c:	7923      	ldrb	r3, [r4, #4]
 8004e7e:	f88d 3004 	strb.w	r3, [sp, #4]
		string[1] = raw[4 * i + 1];
 8004e82:	7963      	ldrb	r3, [r4, #5]
 8004e84:	f88d 3005 	strb.w	r3, [sp, #5]
		string[2] = raw[4 * i + 2];
 8004e88:	79a3      	ldrb	r3, [r4, #6]
 8004e8a:	f88d 3006 	strb.w	r3, [sp, #6]
		string[3] = raw[4 * i + 3];
		values[i - 1] = atoi(string);
 8004e8e:	a801      	add	r0, sp, #4
		string[3] = raw[4 * i + 3];
 8004e90:	79e3      	ldrb	r3, [r4, #7]
 8004e92:	f88d 3007 	strb.w	r3, [sp, #7]
		values[i - 1] = atoi(string);
 8004e96:	f000 ff64 	bl	8005d62 <atoi>
 8004e9a:	3404      	adds	r4, #4
	for (int i = 1; i <= 10; i++) {
 8004e9c:	42a6      	cmp	r6, r4
		values[i - 1] = atoi(string);
 8004e9e:	f825 0f02 	strh.w	r0, [r5, #2]!
	for (int i = 1; i <= 10; i++) {
 8004ea2:	d1eb      	bne.n	8004e7c <parse+0xa>
	}
}
 8004ea4:	b002      	add	sp, #8
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}

08004ea8 <Riptide_CDC_Receive>:
int8_t Riptide_CDC_Receive(uint8_t* Buf, uint32_t *Len ){
 8004ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t Successmsg[] = "thrust hell yeah \r\n";
 8004eaa:	4b21      	ldr	r3, [pc, #132]	; (8004f30 <Riptide_CDC_Receive+0x88>)
int8_t Riptide_CDC_Receive(uint8_t* Buf, uint32_t *Len ){
 8004eac:	b093      	sub	sp, #76	; 0x4c
    uint8_t Successmsg[] = "thrust hell yeah \r\n";
 8004eae:	aa07      	add	r2, sp, #28
int8_t Riptide_CDC_Receive(uint8_t* Buf, uint32_t *Len ){
 8004eb0:	4605      	mov	r5, r0
 8004eb2:	468e      	mov	lr, r1
    uint8_t Successmsg[] = "thrust hell yeah \r\n";
 8004eb4:	f103 0710 	add.w	r7, r3, #16
 8004eb8:	4616      	mov	r6, r2
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	4614      	mov	r4, r2
 8004ec0:	c403      	stmia	r4!, {r0, r1}
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	42bb      	cmp	r3, r7
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	d1f7      	bne.n	8004eba <Riptide_CDC_Receive+0x12>
 8004eca:	6818      	ldr	r0, [r3, #0]
  uint8_t failmsg[] = "not good enough kid\r\n";
 8004ecc:	4b19      	ldr	r3, [pc, #100]	; (8004f34 <Riptide_CDC_Receive+0x8c>)
    uint8_t Successmsg[] = "thrust hell yeah \r\n";
 8004ece:	6020      	str	r0, [r4, #0]
  uint8_t failmsg[] = "not good enough kid\r\n";
 8004ed0:	aa0c      	add	r2, sp, #48	; 0x30
 8004ed2:	f103 0c10 	add.w	ip, r3, #16
 8004ed6:	4617      	mov	r7, r2
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	6859      	ldr	r1, [r3, #4]
 8004edc:	4614      	mov	r4, r2
 8004ede:	c403      	stmia	r4!, {r0, r1}
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	4563      	cmp	r3, ip
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	d1f7      	bne.n	8004ed8 <Riptide_CDC_Receive+0x30>
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	889b      	ldrh	r3, [r3, #4]
 8004eec:	6020      	str	r0, [r4, #0]
 8004eee:	80a3      	strh	r3, [r4, #4]
  thrustsuccess = MessageCheck(thrustst, thrustend, thrustComp, Buf, Len);
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	f8cd e000 	str.w	lr, [sp]
 8004ef6:	462b      	mov	r3, r5
 8004ef8:	490f      	ldr	r1, [pc, #60]	; (8004f38 <Riptide_CDC_Receive+0x90>)
 8004efa:	4810      	ldr	r0, [pc, #64]	; (8004f3c <Riptide_CDC_Receive+0x94>)
 8004efc:	f7ff ffa3 	bl	8004e46 <MessageCheck>
  if (thrustsuccess){
 8004f00:	b188      	cbz	r0, 8004f26 <Riptide_CDC_Receive+0x7e>
    HAL_GPIO_TogglePin(HeartBeat2_GPIO_Port, HeartBeat2_Pin);
 8004f02:	2180      	movs	r1, #128	; 0x80
 8004f04:	480e      	ldr	r0, [pc, #56]	; (8004f40 <Riptide_CDC_Receive+0x98>)
 8004f06:	f7fc f9ac 	bl	8001262 <HAL_GPIO_TogglePin>
    CDC_Transmit_HS(Successmsg, sizeof(Successmsg));
 8004f0a:	2114      	movs	r1, #20
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f000 fd49 	bl	80059a4 <CDC_Transmit_HS>
    parse(Buf, values);
 8004f12:	4628      	mov	r0, r5
 8004f14:	a903      	add	r1, sp, #12
 8004f16:	f7ff ffac 	bl	8004e72 <parse>
    writePWM(values);
 8004f1a:	a803      	add	r0, sp, #12
 8004f1c:	f7ff ff3e 	bl	8004d9c <writePWM>
}
 8004f20:	2000      	movs	r0, #0
 8004f22:	b013      	add	sp, #76	; 0x4c
 8004f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CDC_Transmit_HS(failmsg, sizeof(failmsg));
 8004f26:	2116      	movs	r1, #22
 8004f28:	4638      	mov	r0, r7
 8004f2a:	f000 fd3b 	bl	80059a4 <CDC_Transmit_HS>
    return (USBD_OK);
 8004f2e:	e7f7      	b.n	8004f20 <Riptide_CDC_Receive+0x78>
 8004f30:	080076e0 	.word	0x080076e0
 8004f34:	080076f4 	.word	0x080076f4
 8004f38:	080076dc 	.word	0x080076dc
 8004f3c:	080076de 	.word	0x080076de
 8004f40:	40020800 	.word	0x40020800

08004f44 <crc4>:

// From the Blue Robotics data sheet, cyclic redundancy check
uint8_t crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
 8004f44:	8803      	ldrh	r3, [r0, #0]
	n_prom[7] = 0;
 8004f46:	2200      	movs	r2, #0
	n_prom[0] = ((n_prom[0]) & 0x0FFF);
 8004f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f4c:	8003      	strh	r3, [r0, #0]
	n_prom[7] = 0;
 8004f4e:	81c2      	strh	r2, [r0, #14]
	uint16_t n_rem = 0;
 8004f50:	4613      	mov	r3, r2
 8004f52:	b2d1      	uxtb	r1, r2

	for ( uint8_t i = 0 ; i < 16; i++ ) {
		if ( i%2 == 1 ) {
 8004f54:	f011 0f01 	tst.w	r1, #1
 8004f58:	ea4f 0151 	mov.w	r1, r1, lsr #1
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
 8004f5c:	bf15      	itete	ne
 8004f5e:	f810 1011 	ldrbne.w	r1, [r0, r1, lsl #1]
		} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
 8004f62:	f830 1011 	ldrheq.w	r1, [r0, r1, lsl #1]
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
 8004f66:	404b      	eorne	r3, r1
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
 8004f68:	ea83 2311 	eoreq.w	r3, r3, r1, lsr #8
	uint16_t n_rem = 0;
 8004f6c:	2108      	movs	r1, #8
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
			if ( n_rem & 0x8000 ) {
 8004f6e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004f72:	ea4f 0343 	mov.w	r3, r3, lsl #1
				n_rem = (n_rem << 1) ^ 0x3000;
 8004f76:	bf18      	it	ne
 8004f78:	f483 5340 	eorne.w	r3, r3, #12288	; 0x3000
 8004f7c:	f101 31ff 	add.w	r1, r1, #4294967295
 8004f80:	bf18      	it	ne
 8004f82:	b21b      	sxthne	r3, r3
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
 8004f84:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
			} else {
				n_rem = (n_rem << 1);
 8004f88:	b29b      	uxth	r3, r3
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
 8004f8a:	d1f0      	bne.n	8004f6e <crc4+0x2a>
 8004f8c:	3201      	adds	r2, #1
	for ( uint8_t i = 0 ; i < 16; i++ ) {
 8004f8e:	2a10      	cmp	r2, #16
 8004f90:	d1df      	bne.n	8004f52 <crc4+0xe>
	}

	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
}
 8004f92:	0b18      	lsrs	r0, r3, #12
 8004f94:	4770      	bx	lr
	...

08004f98 <calculate>:

void calculate(uint32_t D1, uint32_t D2, uint16_t C[8], uint32_t * TEMP, uint32_t * P) {
 8004f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t Ti = 0;
	int64_t OFF2 = 0;
	int64_t SENS2 = 0;

	// Terms called
	dT = D2 - (uint32_t) (C[5])*256l;
 8004f9c:	8954      	ldrh	r4, [r2, #10]
	SENS = (int64_t) (C[1])*32768l+((int64_t) (C[3])*dT)/256l;
 8004f9e:	f8b2 e002 	ldrh.w	lr, [r2, #2]
	dT = D2 - (uint32_t) (C[5])*256l;
 8004fa2:	eba1 2104 	sub.w	r1, r1, r4, lsl #8
	SENS = (int64_t) (C[1])*32768l+((int64_t) (C[3])*dT)/256l;
 8004fa6:	88d4      	ldrh	r4, [r2, #6]
 8004fa8:	fb84 4501 	smull	r4, r5, r4, r1
 8004fac:	2c00      	cmp	r4, #0
 8004fae:	f175 0600 	sbcs.w	r6, r5, #0
 8004fb2:	ea4f 7be1 	mov.w	fp, r1, asr #31
 8004fb6:	da02      	bge.n	8004fbe <calculate+0x26>
 8004fb8:	34ff      	adds	r4, #255	; 0xff
 8004fba:	f145 0500 	adc.w	r5, r5, #0
 8004fbe:	0a26      	lsrs	r6, r4, #8
 8004fc0:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
 8004fc4:	122f      	asrs	r7, r5, #8
 8004fc6:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8004fca:	fbee 6704 	umlal	r6, r7, lr, r4
	OFF = (int64_t) (C[2])*65536l+((int64_t) (C[4])*dT)/128l;
 8004fce:	8914      	ldrh	r4, [r2, #8]
 8004fd0:	fb84 4501 	smull	r4, r5, r4, r1
 8004fd4:	2c00      	cmp	r4, #0
	SENS = (int64_t) (C[1])*32768l+((int64_t) (C[3])*dT)/256l;
 8004fd6:	e9cd 6700 	strd	r6, r7, [sp]
	OFF = (int64_t) (C[2])*65536l+((int64_t) (C[4])*dT)/128l;
 8004fda:	f175 0600 	sbcs.w	r6, r5, #0
 8004fde:	da02      	bge.n	8004fe6 <calculate+0x4e>
 8004fe0:	347f      	adds	r4, #127	; 0x7f
 8004fe2:	f145 0500 	adc.w	r5, r5, #0
 8004fe6:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8004fea:	09e6      	lsrs	r6, r4, #7
 8004fec:	ea46 6645 	orr.w	r6, r6, r5, lsl #25
 8004ff0:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8004ff4:	eb16 0804 	adds.w	r8, r6, r4
	*P = (D1*SENS/(2097152l)-OFF)/(8192l);

	// Temp conversion
	*TEMP = 2000l + (int64_t) (dT)*C[6]/8388608LL;
 8004ff8:	8994      	ldrh	r4, [r2, #12]
	OFF = (int64_t) (C[2])*65536l+((int64_t) (C[4])*dT)/128l;
 8004ffa:	ea4f 17e5 	mov.w	r7, r5, asr #7
 8004ffe:	f04f 0500 	mov.w	r5, #0
 8005002:	eb47 0905 	adc.w	r9, r7, r5
	*TEMP = 2000l + (int64_t) (dT)*C[6]/8388608LL;
 8005006:	fb84 4501 	smull	r4, r5, r4, r1
 800500a:	2c00      	cmp	r4, #0
 800500c:	f175 0200 	sbcs.w	r2, r5, #0
 8005010:	da03      	bge.n	800501a <calculate+0x82>
 8005012:	4e34      	ldr	r6, [pc, #208]	; (80050e4 <calculate+0x14c>)
 8005014:	2700      	movs	r7, #0
 8005016:	19a4      	adds	r4, r4, r6
 8005018:	417d      	adcs	r5, r7
 800501a:	0de2      	lsrs	r2, r4, #23
 800501c:	ea42 2245 	orr.w	r2, r2, r5, lsl #9

	//Second order compensation
	if((*TEMP/100)<20){         //Low temp
 8005020:	f512 66fa 	adds.w	r6, r2, #2000	; 0x7d0
 8005024:	d359      	bcc.n	80050da <calculate+0x142>
		Ti = (3*(int64_t)(dT)*(int64_t)(dT))/(8589934592LL);
 8005026:	2403      	movs	r4, #3
 8005028:	fb81 4504 	smull	r4, r5, r1, r4
 800502c:	fb04 f70b 	mul.w	r7, r4, fp
 8005030:	fb01 7705 	mla	r7, r1, r5, r7
 8005034:	fba4 4501 	umull	r4, r5, r4, r1
 8005038:	443d      	add	r5, r7
 800503a:	2c00      	cmp	r4, #0
 800503c:	f175 0100 	sbcs.w	r1, r5, #0
 8005040:	da03      	bge.n	800504a <calculate+0xb2>
 8005042:	f114 34ff 	adds.w	r4, r4, #4294967295
 8005046:	f145 0501 	adc.w	r5, r5, #1
		OFFi = (3*(*TEMP-2000)*(*TEMP-2000))/2;
 800504a:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800504e:	f5a1 51bb 	sub.w	r1, r1, #5984	; 0x1760
 8005052:	3910      	subs	r1, #16
 8005054:	fb02 f701 	mul.w	r7, r2, r1
		SENSi = (5*(*TEMP-2000)*(*TEMP-2000))/8;

		if((*TEMP/100)<-15){    //Very low temp
			OFFi = OFFi+7*(*TEMP+1500l)*(*TEMP+1500l);
 8005058:	ebc6 01c6 	rsb	r1, r6, r6, lsl #3
 800505c:	f501 5124 	add.w	r1, r1, #10496	; 0x2900
 8005060:	f602 54ac 	addw	r4, r2, #3500	; 0xdac
 8005064:	3104      	adds	r1, #4
 8005066:	4361      	muls	r1, r4
 8005068:	eb01 0157 	add.w	r1, r1, r7, lsr #1
		SENSi = (5*(*TEMP-2000)*(*TEMP-2000))/8;
 800506c:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8005070:	f5a7 571c 	sub.w	r7, r7, #9984	; 0x2700
 8005074:	3f10      	subs	r7, #16
			SENSi = SENSi+4*(*TEMP+1500l)*(*TEMP+1500l);
 8005076:	4364      	muls	r4, r4
		SENSi = (5*(*TEMP-2000)*(*TEMP-2000))/8;
 8005078:	4357      	muls	r7, r2
			SENSi = SENSi+4*(*TEMP+1500l)*(*TEMP+1500l);
 800507a:	00a2      	lsls	r2, r4, #2
		Ti = (3*(int64_t)(dT)*(int64_t)(dT))/(8589934592LL);
 800507c:	106d      	asrs	r5, r5, #1
			SENSi = SENSi+4*(*TEMP+1500l)*(*TEMP+1500l);
 800507e:	eb02 02d7 	add.w	r2, r2, r7, lsr #3
	}

	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
	SENS2 = SENS-SENSi;

	*TEMP = (*TEMP-Ti);
 8005082:	1b76      	subs	r6, r6, r5
 8005084:	601e      	str	r6, [r3, #0]
	SENS2 = SENS-SENSi;
 8005086:	e9dd 6700 	ldrd	r6, r7, [sp]
 800508a:	1ab6      	subs	r6, r6, r2
 800508c:	eb67 77e2 	sbc.w	r7, r7, r2, asr #31
	*P = (((D1*SENS2)/2097152l-OFF2)/8192l)/10;
 8005090:	fba6 2300 	umull	r2, r3, r6, r0
 8005094:	fb00 3307 	mla	r3, r0, r7, r3
 8005098:	2a00      	cmp	r2, #0
 800509a:	f173 0000 	sbcs.w	r0, r3, #0
 800509e:	da03      	bge.n	80050a8 <calculate+0x110>
 80050a0:	4c11      	ldr	r4, [pc, #68]	; (80050e8 <calculate+0x150>)
 80050a2:	2500      	movs	r5, #0
 80050a4:	1912      	adds	r2, r2, r4
 80050a6:	416b      	adcs	r3, r5
 80050a8:	ea4f 5a52 	mov.w	sl, r2, lsr #21
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
 80050ac:	ebb8 0801 	subs.w	r8, r8, r1
	*P = (((D1*SENS2)/2097152l-OFF2)/8192l)/10;
 80050b0:	ea4a 2ac3 	orr.w	sl, sl, r3, lsl #11
 80050b4:	ea4f 5b63 	mov.w	fp, r3, asr #21
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
 80050b8:	eb69 79e1 	sbc.w	r9, r9, r1, asr #31
	*P = (((D1*SENS2)/2097152l-OFF2)/8192l)/10;
 80050bc:	ebba 0008 	subs.w	r0, sl, r8
 80050c0:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	eb6b 0109 	sbc.w	r1, fp, r9
 80050cc:	f7fb fd52 	bl	8000b74 <__aeabi_ldivmod>
 80050d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050d2:	6018      	str	r0, [r3, #0]

}
 80050d4:	b003      	add	sp, #12
 80050d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		OFFi = (1*(*TEMP-2000)*(*TEMP-2000))/16;
 80050da:	4352      	muls	r2, r2
		Ti = 2*(dT*dT)/(137438953472LL);
 80050dc:	2500      	movs	r5, #0
		OFFi = (1*(*TEMP-2000)*(*TEMP-2000))/16;
 80050de:	0911      	lsrs	r1, r2, #4
		SENSi = 0;
 80050e0:	462a      	mov	r2, r5
 80050e2:	e7ce      	b.n	8005082 <calculate+0xea>
 80050e4:	007fffff 	.word	0x007fffff
 80050e8:	001fffff 	.word	0x001fffff
 80050ec:	00000000 	.word	0x00000000

080050f0 <convert>:

void convert(uint32_t * temp, uint32_t * press, float * temperature, float * pressure, float * depth, uint16_t fluidDensity) {
 80050f0:	b570      	push	{r4, r5, r6, lr}
	*temperature = *temp / 100.0;
 80050f2:	6800      	ldr	r0, [r0, #0]
void convert(uint32_t * temp, uint32_t * press, float * temperature, float * pressure, float * depth, uint16_t fluidDensity) {
 80050f4:	461c      	mov	r4, r3
 80050f6:	460d      	mov	r5, r1
 80050f8:	4616      	mov	r6, r2
	*temperature = *temp / 100.0;
 80050fa:	f7fb f9b3 	bl	8000464 <__aeabi_ui2d>
 80050fe:	2200      	movs	r2, #0
 8005100:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <convert+0x80>)
 8005102:	f7fb fb4f 	bl	80007a4 <__aeabi_ddiv>
 8005106:	f7fb fce5 	bl	8000ad4 <__aeabi_d2f>
 800510a:	6030      	str	r0, [r6, #0]
	*pressure = *press * 1.0;
 800510c:	6828      	ldr	r0, [r5, #0]
 800510e:	f7fb f9a9 	bl	8000464 <__aeabi_ui2d>
 8005112:	f7fb fcdf 	bl	8000ad4 <__aeabi_d2f>
 8005116:	6020      	str	r0, [r4, #0]
	*depth = ((100.0 * *pressure) - 101300)/(fluidDensity * 9.80665);
 8005118:	f7fb f9c6 	bl	80004a8 <__aeabi_f2d>
 800511c:	2200      	movs	r2, #0
 800511e:	4b14      	ldr	r3, [pc, #80]	; (8005170 <convert+0x80>)
 8005120:	f7fb fa16 	bl	8000550 <__aeabi_dmul>
 8005124:	a30e      	add	r3, pc, #56	; (adr r3, 8005160 <convert+0x70>)
 8005126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512a:	f7fb f85d 	bl	80001e8 <__aeabi_dsub>
 800512e:	4604      	mov	r4, r0
 8005130:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8005134:	460d      	mov	r5, r1
 8005136:	f7fb f9a5 	bl	8000484 <__aeabi_i2d>
 800513a:	a30b      	add	r3, pc, #44	; (adr r3, 8005168 <convert+0x78>)
 800513c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005140:	f7fb fa06 	bl	8000550 <__aeabi_dmul>
 8005144:	460b      	mov	r3, r1
 8005146:	4602      	mov	r2, r0
 8005148:	4629      	mov	r1, r5
 800514a:	4620      	mov	r0, r4
 800514c:	f7fb fb2a 	bl	80007a4 <__aeabi_ddiv>
 8005150:	f7fb fcc0 	bl	8000ad4 <__aeabi_d2f>
 8005154:	9b04      	ldr	r3, [sp, #16]
 8005156:	6018      	str	r0, [r3, #0]
 8005158:	bd70      	pop	{r4, r5, r6, pc}
 800515a:	bf00      	nop
 800515c:	f3af 8000 	nop.w
 8005160:	00000000 	.word	0x00000000
 8005164:	40f8bb40 	.word	0x40f8bb40
 8005168:	3a92a305 	.word	0x3a92a305
 800516c:	40239d01 	.word	0x40239d01
 8005170:	40590000 	.word	0x40590000

08005174 <riptideMain>:

#include "riptideMain.h"
#include "riptideFunctions.h"
#include "riptidethreads.h"

void riptideMain(){
 8005174:	b510      	push	{r4, lr}
 8005176:	b086      	sub	sp, #24
    xTaskHandle xHeartbeat;
    xTaskHandle xSwitchMonitor;
    xTaskHandle xKillSwitch;
    xTaskHandle xDepthSensor;
    //create tasks here
    xTaskCreate( vHeartbeat, "Heartbeat", configMINIMAL_STACK_SIZE, NULL, 1, &xHeartbeat);
 8005178:	2401      	movs	r4, #1
 800517a:	ab02      	add	r3, sp, #8
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	9400      	str	r4, [sp, #0]
 8005180:	2300      	movs	r3, #0
 8005182:	2280      	movs	r2, #128	; 0x80
 8005184:	4910      	ldr	r1, [pc, #64]	; (80051c8 <riptideMain+0x54>)
 8005186:	4811      	ldr	r0, [pc, #68]	; (80051cc <riptideMain+0x58>)
 8005188:	f7ff f91e 	bl	80043c8 <xTaskCreate>
    xTaskCreate( vSwitchMonitor, "SwitchMonitor", configMINIMAL_STACK_SIZE, NULL, 1, &xSwitchMonitor);
 800518c:	ab03      	add	r3, sp, #12
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	9400      	str	r4, [sp, #0]
 8005192:	2300      	movs	r3, #0
 8005194:	2280      	movs	r2, #128	; 0x80
 8005196:	490e      	ldr	r1, [pc, #56]	; (80051d0 <riptideMain+0x5c>)
 8005198:	480e      	ldr	r0, [pc, #56]	; (80051d4 <riptideMain+0x60>)
 800519a:	f7ff f915 	bl	80043c8 <xTaskCreate>
    xTaskCreate( vKillSwitch, "KillSwitch", configMINIMAL_STACK_SIZE, NULL, 1, &xKillSwitch);
 800519e:	ab04      	add	r3, sp, #16
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	9400      	str	r4, [sp, #0]
 80051a4:	2300      	movs	r3, #0
 80051a6:	2280      	movs	r2, #128	; 0x80
 80051a8:	490b      	ldr	r1, [pc, #44]	; (80051d8 <riptideMain+0x64>)
 80051aa:	480c      	ldr	r0, [pc, #48]	; (80051dc <riptideMain+0x68>)
 80051ac:	f7ff f90c 	bl	80043c8 <xTaskCreate>
    xTaskCreate( vDepthSensor, "DepthSensor", configMINIMAL_STACK_SIZE, NULL, 1, &xDepthSensor);
 80051b0:	ab05      	add	r3, sp, #20
 80051b2:	9301      	str	r3, [sp, #4]
 80051b4:	9400      	str	r4, [sp, #0]
 80051b6:	2300      	movs	r3, #0
 80051b8:	2280      	movs	r2, #128	; 0x80
 80051ba:	4909      	ldr	r1, [pc, #36]	; (80051e0 <riptideMain+0x6c>)
 80051bc:	4809      	ldr	r0, [pc, #36]	; (80051e4 <riptideMain+0x70>)
 80051be:	f7ff f903 	bl	80043c8 <xTaskCreate>
    //create queues here
    //create mutexes here
    //create semaphores here
    return;
}
 80051c2:	b006      	add	sp, #24
 80051c4:	bd10      	pop	{r4, pc}
 80051c6:	bf00      	nop
 80051c8:	0800770a 	.word	0x0800770a
 80051cc:	080051e9 	.word	0x080051e9
 80051d0:	08007714 	.word	0x08007714
 80051d4:	08005225 	.word	0x08005225
 80051d8:	08007722 	.word	0x08007722
 80051dc:	080052e1 	.word	0x080052e1
 80051e0:	0800772d 	.word	0x0800772d
 80051e4:	08005311 	.word	0x08005311

080051e8 <vHeartbeat>:
#include "riptideFunctions.h"
#include "riptidethreads.h"
//#include "../../Inc/main.h"
//#include "../../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"

void vHeartbeat(void *pvParameters ){
 80051e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    uint8_t HiMsg[] = "heartbeat\r\n";
 80051ea:	4a0c      	ldr	r2, [pc, #48]	; (800521c <vHeartbeat+0x34>)
    /* Infinite loop */
    for(;;) {
        HAL_GPIO_TogglePin(HeartBeat1_GPIO_Port, HeartBeat1_Pin);
 80051ec:	4c0c      	ldr	r4, [pc, #48]	; (8005220 <vHeartbeat+0x38>)
    uint8_t HiMsg[] = "heartbeat\r\n";
 80051ee:	6810      	ldr	r0, [r2, #0]
 80051f0:	6851      	ldr	r1, [r2, #4]
 80051f2:	ab01      	add	r3, sp, #4
 80051f4:	c303      	stmia	r3!, {r0, r1}
 80051f6:	6890      	ldr	r0, [r2, #8]
 80051f8:	6018      	str	r0, [r3, #0]
        HAL_GPIO_TogglePin(HeartBeat1_GPIO_Port, HeartBeat1_Pin);
 80051fa:	4620      	mov	r0, r4
 80051fc:	2140      	movs	r1, #64	; 0x40
 80051fe:	f7fc f830 	bl	8001262 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(PC4_LED_GPIO_Port, PC4_LED_Pin);
 8005202:	4620      	mov	r0, r4
 8005204:	2110      	movs	r1, #16
 8005206:	f7fc f82c 	bl	8001262 <HAL_GPIO_TogglePin>
        //to note here, we do not nead the sizeof(msg)/sizeof(uint8_t)
        CDC_Transmit_HS(HiMsg, sizeof(HiMsg));
 800520a:	210c      	movs	r1, #12
 800520c:	a801      	add	r0, sp, #4
 800520e:	f000 fbc9 	bl	80059a4 <CDC_Transmit_HS>
        vTaskDelay(1000);
 8005212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005216:	f7ff faf5 	bl	8004804 <vTaskDelay>
 800521a:	e7ee      	b.n	80051fa <vHeartbeat+0x12>
 800521c:	0800776c 	.word	0x0800776c
 8005220:	40020800 	.word	0x40020800

08005224 <vSwitchMonitor>:

    }

}

void vSwitchMonitor(void *pvParameters){
 8005224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t switchMessage[14] = "$$$$nnnnnn@@@@";
 8005226:	4b2c      	ldr	r3, [pc, #176]	; (80052d8 <vSwitchMonitor+0xb4>)
 8005228:	466a      	mov	r2, sp
 800522a:	f103 0608 	add.w	r6, r3, #8
 800522e:	466d      	mov	r5, sp
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	6859      	ldr	r1, [r3, #4]
 8005234:	4614      	mov	r4, r2
 8005236:	c403      	stmia	r4!, {r0, r1}
 8005238:	3308      	adds	r3, #8
 800523a:	42b3      	cmp	r3, r6
 800523c:	4622      	mov	r2, r4
 800523e:	d1f7      	bne.n	8005230 <vSwitchMonitor+0xc>
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	889b      	ldrh	r3, [r3, #4]
 8005244:	6020      	str	r0, [r4, #0]
 8005246:	80a3      	strh	r3, [r4, #4]
    //uint8_t switchMessage = "";
    for(;;){
        //You can read directly in to the the message without forcing a 1 or 0 but that returns
        //a weird block character when switch is closed which may be hard to parse later
        switchMessage [4] = HAL_GPIO_ReadPin(KillSwitch_GPIO_Port, KillSwitch_Pin)      ? '1' : '0';
 8005248:	4c24      	ldr	r4, [pc, #144]	; (80052dc <vSwitchMonitor+0xb8>)
 800524a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800524e:	4620      	mov	r0, r4
 8005250:	f7fb fffc 	bl	800124c <HAL_GPIO_ReadPin>
 8005254:	2800      	cmp	r0, #0
 8005256:	bf14      	ite	ne
 8005258:	2331      	movne	r3, #49	; 0x31
 800525a:	2330      	moveq	r3, #48	; 0x30
        switchMessage [5] = HAL_GPIO_ReadPin(MissionStart_GPIO_Port, MissionStart_Pin)  ? '1' : '0';
 800525c:	2101      	movs	r1, #1
 800525e:	4620      	mov	r0, r4
        switchMessage [4] = HAL_GPIO_ReadPin(KillSwitch_GPIO_Port, KillSwitch_Pin)      ? '1' : '0';
 8005260:	f88d 3004 	strb.w	r3, [sp, #4]
        switchMessage [5] = HAL_GPIO_ReadPin(MissionStart_GPIO_Port, MissionStart_Pin)  ? '1' : '0';
 8005264:	f7fb fff2 	bl	800124c <HAL_GPIO_ReadPin>
 8005268:	2800      	cmp	r0, #0
 800526a:	bf14      	ite	ne
 800526c:	2331      	movne	r3, #49	; 0x31
 800526e:	2330      	moveq	r3, #48	; 0x30
        switchMessage [6] = HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin)            ? '1' : '0';
 8005270:	2102      	movs	r1, #2
 8005272:	4620      	mov	r0, r4
        switchMessage [5] = HAL_GPIO_ReadPin(MissionStart_GPIO_Port, MissionStart_Pin)  ? '1' : '0';
 8005274:	f88d 3005 	strb.w	r3, [sp, #5]
        switchMessage [6] = HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin)            ? '1' : '0';
 8005278:	f7fb ffe8 	bl	800124c <HAL_GPIO_ReadPin>
 800527c:	2800      	cmp	r0, #0
 800527e:	bf14      	ite	ne
 8005280:	2331      	movne	r3, #49	; 0x31
 8005282:	2330      	moveq	r3, #48	; 0x30
        switchMessage [7] = HAL_GPIO_ReadPin(Switch4_GPIO_Port, Switch4_Pin)            ? '1' : '0';
 8005284:	2104      	movs	r1, #4
 8005286:	4620      	mov	r0, r4
        switchMessage [6] = HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin)            ? '1' : '0';
 8005288:	f88d 3006 	strb.w	r3, [sp, #6]
        switchMessage [7] = HAL_GPIO_ReadPin(Switch4_GPIO_Port, Switch4_Pin)            ? '1' : '0';
 800528c:	f7fb ffde 	bl	800124c <HAL_GPIO_ReadPin>
 8005290:	2800      	cmp	r0, #0
 8005292:	bf14      	ite	ne
 8005294:	2331      	movne	r3, #49	; 0x31
 8005296:	2330      	moveq	r3, #48	; 0x30
        switchMessage [8] = HAL_GPIO_ReadPin(Switch5_GPIO_Port, Switch5_Pin)            ? '1' : '0';
 8005298:	2108      	movs	r1, #8
 800529a:	4620      	mov	r0, r4
        switchMessage [7] = HAL_GPIO_ReadPin(Switch4_GPIO_Port, Switch4_Pin)            ? '1' : '0';
 800529c:	f88d 3007 	strb.w	r3, [sp, #7]
        switchMessage [8] = HAL_GPIO_ReadPin(Switch5_GPIO_Port, Switch5_Pin)            ? '1' : '0';
 80052a0:	f7fb ffd4 	bl	800124c <HAL_GPIO_ReadPin>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	bf14      	ite	ne
 80052a8:	2331      	movne	r3, #49	; 0x31
 80052aa:	2330      	moveq	r3, #48	; 0x30
        switchMessage [9] = HAL_GPIO_ReadPin(Switch6_GPIO_Port, Switch6_Pin)            ? '1' : '0';
 80052ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052b0:	4620      	mov	r0, r4
        switchMessage [8] = HAL_GPIO_ReadPin(Switch5_GPIO_Port, Switch5_Pin)            ? '1' : '0';
 80052b2:	f88d 3008 	strb.w	r3, [sp, #8]
        switchMessage [9] = HAL_GPIO_ReadPin(Switch6_GPIO_Port, Switch6_Pin)            ? '1' : '0';
 80052b6:	f7fb ffc9 	bl	800124c <HAL_GPIO_ReadPin>
 80052ba:	2800      	cmp	r0, #0
 80052bc:	bf14      	ite	ne
 80052be:	2331      	movne	r3, #49	; 0x31
 80052c0:	2330      	moveq	r3, #48	; 0x30
        CDC_Transmit_HS(switchMessage, sizeof(switchMessage));
 80052c2:	210e      	movs	r1, #14
 80052c4:	4628      	mov	r0, r5
        switchMessage [9] = HAL_GPIO_ReadPin(Switch6_GPIO_Port, Switch6_Pin)            ? '1' : '0';
 80052c6:	f88d 3009 	strb.w	r3, [sp, #9]
        CDC_Transmit_HS(switchMessage, sizeof(switchMessage));
 80052ca:	f000 fb6b 	bl	80059a4 <CDC_Transmit_HS>
        vTaskDelay(900);
 80052ce:	f44f 7061 	mov.w	r0, #900	; 0x384
 80052d2:	f7ff fa97 	bl	8004804 <vTaskDelay>
        switchMessage [4] = HAL_GPIO_ReadPin(KillSwitch_GPIO_Port, KillSwitch_Pin)      ? '1' : '0';
 80052d6:	e7b8      	b.n	800524a <vSwitchMonitor+0x26>
 80052d8:	080076bc 	.word	0x080076bc
 80052dc:	40020800 	.word	0x40020800

080052e0 <vKillSwitch>:
    }
}

void vKillSwitch ( void *pvParameters ){
 80052e0:	b508      	push	{r3, lr}
  //variables ?
  for(;;){
    if( HAL_GPIO_ReadPin(KillSwitch_GPIO_Port,KillSwitch_Pin) == GPIO_PIN_RESET){
 80052e2:	4c0a      	ldr	r4, [pc, #40]	; (800530c <vKillSwitch+0x2c>)
 80052e4:	4809      	ldr	r0, [pc, #36]	; (800530c <vKillSwitch+0x2c>)
 80052e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052ea:	f7fb ffaf 	bl	800124c <HAL_GPIO_ReadPin>
 80052ee:	4605      	mov	r5, r0
 80052f0:	b950      	cbnz	r0, 8005308 <vKillSwitch+0x28>
      resetPWM();
 80052f2:	f7ff fd79 	bl	8004de8 <resetPWM>
      HAL_GPIO_WritePin(PC4_LED_GPIO_Port, PC4_LED_Pin, GPIO_PIN_RESET);
 80052f6:	462a      	mov	r2, r5
		} else {
			HAL_GPIO_WritePin(PC4_LED_GPIO_Port, PC4_LED_Pin, GPIO_PIN_SET);
 80052f8:	4620      	mov	r0, r4
 80052fa:	2110      	movs	r1, #16
 80052fc:	f7fb ffac 	bl	8001258 <HAL_GPIO_WritePin>
    }
    vTaskDelay(100);
 8005300:	2064      	movs	r0, #100	; 0x64
 8005302:	f7ff fa7f 	bl	8004804 <vTaskDelay>
    if( HAL_GPIO_ReadPin(KillSwitch_GPIO_Port,KillSwitch_Pin) == GPIO_PIN_RESET){
 8005306:	e7ed      	b.n	80052e4 <vKillSwitch+0x4>
			HAL_GPIO_WritePin(PC4_LED_GPIO_Port, PC4_LED_Pin, GPIO_PIN_SET);
 8005308:	2201      	movs	r2, #1
 800530a:	e7f5      	b.n	80052f8 <vKillSwitch+0x18>
 800530c:	40020800 	.word	0x40020800

08005310 <vDepthSensor>:
  }
}

void vDepthSensor(void *pvParameters) {
 8005310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005314:	b0a0      	sub	sp, #128	; 0x80
	float altitude;
	uint16_t fluidDensity = 1029;

	I2C_HandleTypeDef *i2c = getI2CRef();

	HAL_I2C_Master_Transmit(i2c, address_write, &reset, 1, 20);
 8005316:	2714      	movs	r7, #20
	for (uint8_t i = 0; i < 7; i++) {

		HAL_I2C_Master_Transmit(i2c, address_write, &prom_val, 1, 20);
		vTaskDelay(20);
		HAL_I2C_Master_Receive(i2c, address_read, buffer, 2, 20);
		calibration[i] = (buffer[0] << 8) | buffer[1];
 8005318:	ae0a      	add	r6, sp, #40	; 0x28
	resetI2C: vTaskDelay(100);
 800531a:	2064      	movs	r0, #100	; 0x64
 800531c:	f7ff fa72 	bl	8004804 <vTaskDelay>
	uint8_t reset = 0x1E;
 8005320:	231e      	movs	r3, #30
 8005322:	f88d 300b 	strb.w	r3, [sp, #11]
	uint8_t prom_val = prom_read;
 8005326:	23a0      	movs	r3, #160	; 0xa0
 8005328:	f88d 300c 	strb.w	r3, [sp, #12]
	uint8_t read_d1 = 0x4A;
 800532c:	234a      	movs	r3, #74	; 0x4a
 800532e:	f88d 300d 	strb.w	r3, [sp, #13]
	uint8_t read_adc = 0x00;
 8005332:	2400      	movs	r4, #0
	uint8_t read_d2 = 0x5A;
 8005334:	235a      	movs	r3, #90	; 0x5a
 8005336:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t read_adc = 0x00;
 800533a:	f88d 400f 	strb.w	r4, [sp, #15]
	I2C_HandleTypeDef *i2c = getI2CRef();
 800533e:	f7ff fd73 	bl	8004e28 <getI2CRef>
	HAL_I2C_Master_Transmit(i2c, address_write, &reset, 1, 20);
 8005342:	9700      	str	r7, [sp, #0]
 8005344:	2301      	movs	r3, #1
 8005346:	f10d 020b 	add.w	r2, sp, #11
 800534a:	21ec      	movs	r1, #236	; 0xec
	I2C_HandleTypeDef *i2c = getI2CRef();
 800534c:	4605      	mov	r5, r0
	HAL_I2C_Master_Transmit(i2c, address_write, &reset, 1, 20);
 800534e:	f7fc f8f7 	bl	8001540 <HAL_I2C_Master_Transmit>
	vTaskDelay(50);
 8005352:	2032      	movs	r0, #50	; 0x32
 8005354:	f7ff fa56 	bl	8004804 <vTaskDelay>
		HAL_I2C_Master_Transmit(i2c, address_write, &prom_val, 1, 20);
 8005358:	2301      	movs	r3, #1
 800535a:	aa03      	add	r2, sp, #12
 800535c:	21ec      	movs	r1, #236	; 0xec
 800535e:	9700      	str	r7, [sp, #0]
 8005360:	4628      	mov	r0, r5
 8005362:	f7fc f8ed 	bl	8001540 <HAL_I2C_Master_Transmit>
		vTaskDelay(20);
 8005366:	2014      	movs	r0, #20
 8005368:	f7ff fa4c 	bl	8004804 <vTaskDelay>
		HAL_I2C_Master_Receive(i2c, address_read, buffer, 2, 20);
 800536c:	2302      	movs	r3, #2
 800536e:	aa04      	add	r2, sp, #16
 8005370:	9700      	str	r7, [sp, #0]
 8005372:	21ed      	movs	r1, #237	; 0xed
 8005374:	4628      	mov	r0, r5
 8005376:	f7fc f9b9 	bl	80016ec <HAL_I2C_Master_Receive>
		calibration[i] = (buffer[0] << 8) | buffer[1];
 800537a:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800537e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8005382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005386:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]

		prom_val += 2;
 800538a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800538e:	3401      	adds	r4, #1
 8005390:	3302      	adds	r3, #2
	for (uint8_t i = 0; i < 7; i++) {
 8005392:	2c07      	cmp	r4, #7
		prom_val += 2;
 8005394:	f88d 300c 	strb.w	r3, [sp, #12]
	for (uint8_t i = 0; i < 7; i++) {
 8005398:	d1de      	bne.n	8005358 <vDepthSensor+0x48>

	}

	uint8_t crcRead = calibration[0] >> 12;
	uint8_t crcCalc = crc4(calibration);
 800539a:	4630      	mov	r0, r6
	uint8_t crcRead = calibration[0] >> 12;
 800539c:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
	uint8_t crcCalc = crc4(calibration);
 80053a0:	f7ff fdd0 	bl	8004f44 <crc4>

	uint8_t success[] = "initialization succeeded\r\n";
 80053a4:	4b7c      	ldr	r3, [pc, #496]	; (8005598 <vDepthSensor+0x288>)
 80053a6:	aa19      	add	r2, sp, #100	; 0x64
	uint8_t crcRead = calibration[0] >> 12;
 80053a8:	ea4f 3818 	mov.w	r8, r8, lsr #12
	uint8_t crcCalc = crc4(calibration);
 80053ac:	4686      	mov	lr, r0
	uint8_t success[] = "initialization succeeded\r\n";
 80053ae:	f103 0c18 	add.w	ip, r3, #24
 80053b2:	4691      	mov	r9, r2
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	6859      	ldr	r1, [r3, #4]
 80053b8:	4614      	mov	r4, r2
 80053ba:	c403      	stmia	r4!, {r0, r1}
 80053bc:	3308      	adds	r3, #8
 80053be:	4563      	cmp	r3, ip
 80053c0:	4622      	mov	r2, r4
 80053c2:	d1f7      	bne.n	80053b4 <vDepthSensor+0xa4>
 80053c4:	8819      	ldrh	r1, [r3, #0]
 80053c6:	789b      	ldrb	r3, [r3, #2]
 80053c8:	70a3      	strb	r3, [r4, #2]
	uint8_t failure[] = "initialization failed\r\n";
 80053ca:	4b74      	ldr	r3, [pc, #464]	; (800559c <vDepthSensor+0x28c>)
	uint8_t success[] = "initialization succeeded\r\n";
 80053cc:	8021      	strh	r1, [r4, #0]
	uint8_t failure[] = "initialization failed\r\n";
 80053ce:	aa13      	add	r2, sp, #76	; 0x4c
 80053d0:	f103 0c18 	add.w	ip, r3, #24
 80053d4:	4692      	mov	sl, r2
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	6859      	ldr	r1, [r3, #4]
 80053da:	4614      	mov	r4, r2
 80053dc:	c403      	stmia	r4!, {r0, r1}
 80053de:	3308      	adds	r3, #8
 80053e0:	4563      	cmp	r3, ip
 80053e2:	4622      	mov	r2, r4
 80053e4:	d1f7      	bne.n	80053d6 <vDepthSensor+0xc6>

	if (crcRead == crcCalc) {
 80053e6:	fa5f fe8e 	uxtb.w	lr, lr
 80053ea:	45f0      	cmp	r8, lr
 80053ec:	f040 80cc 	bne.w	8005588 <vDepthSensor+0x278>
		CDC_Transmit_HS(success, strlen(success));
 80053f0:	4648      	mov	r0, r9
 80053f2:	f7fa feed 	bl	80001d0 <strlen>
 80053f6:	b281      	uxth	r1, r0
 80053f8:	4648      	mov	r0, r9
 80053fa:	f000 fad3 	bl	80059a4 <CDC_Transmit_HS>

		memset(values, 0, sizeof(values));
		gcvt(temperature, 20, values);
		CDC_Transmit_HS(values, strlen(values));
		vTaskDelay(5);
		CDC_Transmit_HS("\r\n", 2);
 80053fe:	4f68      	ldr	r7, [pc, #416]	; (80055a0 <vDepthSensor+0x290>)
		HAL_I2C_Master_Transmit(i2c, address_write, &read_d1, 1, 20);
 8005400:	2414      	movs	r4, #20
 8005402:	f10d 020d 	add.w	r2, sp, #13
 8005406:	2301      	movs	r3, #1
 8005408:	21ec      	movs	r1, #236	; 0xec
 800540a:	9400      	str	r4, [sp, #0]
 800540c:	4628      	mov	r0, r5
 800540e:	f7fc f897 	bl	8001540 <HAL_I2C_Master_Transmit>
		vTaskDelay(20);
 8005412:	4620      	mov	r0, r4
 8005414:	f7ff f9f6 	bl	8004804 <vTaskDelay>
		HAL_I2C_Master_Transmit(i2c, address_write, &read_adc, 1, 20);
 8005418:	f10d 020f 	add.w	r2, sp, #15
 800541c:	2301      	movs	r3, #1
 800541e:	21ec      	movs	r1, #236	; 0xec
 8005420:	9400      	str	r4, [sp, #0]
 8005422:	4628      	mov	r0, r5
 8005424:	f7fc f88c 	bl	8001540 <HAL_I2C_Master_Transmit>
		vTaskDelay(20);
 8005428:	4620      	mov	r0, r4
 800542a:	f7ff f9eb 	bl	8004804 <vTaskDelay>
		HAL_I2C_Master_Receive(i2c, address_read, buffer, 3, 20);
 800542e:	aa04      	add	r2, sp, #16
 8005430:	9400      	str	r4, [sp, #0]
 8005432:	2303      	movs	r3, #3
 8005434:	21ed      	movs	r1, #237	; 0xed
 8005436:	4628      	mov	r0, r5
 8005438:	f7fc f958 	bl	80016ec <HAL_I2C_Master_Receive>
		d1 = d1 << 8 | buffer[2];
 800543c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8005440:	f89d 8012 	ldrb.w	r8, [sp, #18]
 8005444:	ba5b      	rev16	r3, r3
		HAL_I2C_Master_Transmit(i2c, address_write, &read_d2, 1, 30);
 8005446:	f04f 091e 	mov.w	r9, #30
		d1 = d1 << 8 | buffer[2];
 800544a:	b29b      	uxth	r3, r3
		HAL_I2C_Master_Transmit(i2c, address_write, &read_d2, 1, 30);
 800544c:	f10d 020e 	add.w	r2, sp, #14
		d1 = d1 << 8 | buffer[2];
 8005450:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		HAL_I2C_Master_Transmit(i2c, address_write, &read_d2, 1, 30);
 8005454:	f8cd 9000 	str.w	r9, [sp]
 8005458:	2301      	movs	r3, #1
 800545a:	21ec      	movs	r1, #236	; 0xec
 800545c:	4628      	mov	r0, r5
 800545e:	f7fc f86f 	bl	8001540 <HAL_I2C_Master_Transmit>
		vTaskDelay(20);
 8005462:	4620      	mov	r0, r4
 8005464:	f7ff f9ce 	bl	8004804 <vTaskDelay>
		HAL_I2C_Master_Transmit(i2c, address_write, &read_adc, 1, 30);
 8005468:	f10d 020f 	add.w	r2, sp, #15
 800546c:	f8cd 9000 	str.w	r9, [sp]
 8005470:	2301      	movs	r3, #1
 8005472:	21ec      	movs	r1, #236	; 0xec
 8005474:	4628      	mov	r0, r5
 8005476:	f7fc f863 	bl	8001540 <HAL_I2C_Master_Transmit>
		vTaskDelay(20);
 800547a:	4620      	mov	r0, r4
 800547c:	f7ff f9c2 	bl	8004804 <vTaskDelay>
		HAL_I2C_Master_Receive(i2c, address_read, buffer, 3, 30);
 8005480:	f8cd 9000 	str.w	r9, [sp]
 8005484:	aa04      	add	r2, sp, #16
 8005486:	2303      	movs	r3, #3
 8005488:	21ed      	movs	r1, #237	; 0xed
 800548a:	4628      	mov	r0, r5
 800548c:	f7fc f92e 	bl	80016ec <HAL_I2C_Master_Receive>
		d2 = d2 << 8 | buffer[2];
 8005490:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8005494:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8005498:	ba49      	rev16	r1, r1
		calculate(d1, d2, calibration, &temp, &press);
 800549a:	f10d 0918 	add.w	r9, sp, #24
		d2 = d2 << 8 | buffer[2];
 800549e:	b289      	uxth	r1, r1
		calculate(d1, d2, calibration, &temp, &press);
 80054a0:	eb0d 0304 	add.w	r3, sp, r4
 80054a4:	4632      	mov	r2, r6
 80054a6:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
 80054aa:	f8cd 9000 	str.w	r9, [sp]
 80054ae:	4640      	mov	r0, r8
 80054b0:	f7ff fd72 	bl	8004f98 <calculate>
		convert(&temp, &press, &temperature, &pressure, &depth, fluidDensity);
 80054b4:	f240 4305 	movw	r3, #1029	; 0x405
 80054b8:	9301      	str	r3, [sp, #4]
 80054ba:	ab09      	add	r3, sp, #36	; 0x24
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	aa08      	add	r2, sp, #32
 80054c0:	ab07      	add	r3, sp, #28
 80054c2:	4649      	mov	r1, r9
 80054c4:	eb0d 0004 	add.w	r0, sp, r4
 80054c8:	f7ff fe12 	bl	80050f0 <convert>
		memset(values, 0, sizeof(values));
 80054cc:	4622      	mov	r2, r4
 80054ce:	2100      	movs	r1, #0
 80054d0:	a80e      	add	r0, sp, #56	; 0x38
 80054d2:	f000 fcb6 	bl	8005e42 <memset>
		gcvt(temperature, 20, values);
 80054d6:	9808      	ldr	r0, [sp, #32]
 80054d8:	f7fa ffe6 	bl	80004a8 <__aeabi_f2d>
 80054dc:	ec41 0b10 	vmov	d0, r0, r1
 80054e0:	a90e      	add	r1, sp, #56	; 0x38
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 fc42 	bl	8005d6c <gcvt>
		CDC_Transmit_HS(values, strlen(values));
 80054e8:	a80e      	add	r0, sp, #56	; 0x38
 80054ea:	f7fa fe71 	bl	80001d0 <strlen>
 80054ee:	b281      	uxth	r1, r0
 80054f0:	a80e      	add	r0, sp, #56	; 0x38
 80054f2:	f000 fa57 	bl	80059a4 <CDC_Transmit_HS>
		vTaskDelay(5);
 80054f6:	2005      	movs	r0, #5
 80054f8:	f7ff f984 	bl	8004804 <vTaskDelay>
		CDC_Transmit_HS("\r\n", 2);
 80054fc:	2102      	movs	r1, #2
 80054fe:	4638      	mov	r0, r7
 8005500:	f000 fa50 	bl	80059a4 <CDC_Transmit_HS>

		vTaskDelay(10);
 8005504:	200a      	movs	r0, #10
 8005506:	f7ff f97d 	bl	8004804 <vTaskDelay>

		memset(values, 0, sizeof(values));
 800550a:	4622      	mov	r2, r4
 800550c:	2100      	movs	r1, #0
 800550e:	a80e      	add	r0, sp, #56	; 0x38
 8005510:	f000 fc97 	bl	8005e42 <memset>
		gcvt(pressure, 20, values);
 8005514:	9807      	ldr	r0, [sp, #28]
 8005516:	f7fa ffc7 	bl	80004a8 <__aeabi_f2d>
 800551a:	ec41 0b10 	vmov	d0, r0, r1
 800551e:	a90e      	add	r1, sp, #56	; 0x38
 8005520:	4620      	mov	r0, r4
 8005522:	f000 fc23 	bl	8005d6c <gcvt>
		CDC_Transmit_HS(values, strlen(values));
 8005526:	a80e      	add	r0, sp, #56	; 0x38
 8005528:	f7fa fe52 	bl	80001d0 <strlen>
 800552c:	b281      	uxth	r1, r0
 800552e:	a80e      	add	r0, sp, #56	; 0x38
 8005530:	f000 fa38 	bl	80059a4 <CDC_Transmit_HS>
		vTaskDelay(5);
 8005534:	2005      	movs	r0, #5
 8005536:	f7ff f965 	bl	8004804 <vTaskDelay>
		CDC_Transmit_HS("\r\n", 2);
 800553a:	2102      	movs	r1, #2
 800553c:	4638      	mov	r0, r7
 800553e:	f000 fa31 	bl	80059a4 <CDC_Transmit_HS>

		vTaskDelay(10);
 8005542:	200a      	movs	r0, #10
 8005544:	f7ff f95e 	bl	8004804 <vTaskDelay>

		memset(values, 0, sizeof(values));
 8005548:	4622      	mov	r2, r4
 800554a:	2100      	movs	r1, #0
 800554c:	a80e      	add	r0, sp, #56	; 0x38
 800554e:	f000 fc78 	bl	8005e42 <memset>
		gcvt(depth, 20, values);
 8005552:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005554:	f7fa ffa8 	bl	80004a8 <__aeabi_f2d>
 8005558:	ec41 0b10 	vmov	d0, r0, r1
 800555c:	a90e      	add	r1, sp, #56	; 0x38
 800555e:	4620      	mov	r0, r4
 8005560:	f000 fc04 	bl	8005d6c <gcvt>
		CDC_Transmit_HS(values, strlen(values));
 8005564:	a80e      	add	r0, sp, #56	; 0x38
 8005566:	f7fa fe33 	bl	80001d0 <strlen>
 800556a:	b281      	uxth	r1, r0
 800556c:	a80e      	add	r0, sp, #56	; 0x38
 800556e:	f000 fa19 	bl	80059a4 <CDC_Transmit_HS>
		vTaskDelay(5);
 8005572:	2005      	movs	r0, #5
 8005574:	f7ff f946 	bl	8004804 <vTaskDelay>
		CDC_Transmit_HS("\r\n", 2);
 8005578:	2102      	movs	r1, #2
 800557a:	4638      	mov	r0, r7
 800557c:	f000 fa12 	bl	80059a4 <CDC_Transmit_HS>


		vTaskDelay(200);
 8005580:	20c8      	movs	r0, #200	; 0xc8
 8005582:	f7ff f93f 	bl	8004804 <vTaskDelay>
 8005586:	e73b      	b.n	8005400 <vDepthSensor+0xf0>
		CDC_Transmit_HS(failure, strlen(failure));
 8005588:	4650      	mov	r0, sl
 800558a:	f7fa fe21 	bl	80001d0 <strlen>
 800558e:	b281      	uxth	r1, r0
 8005590:	4650      	mov	r0, sl
 8005592:	f000 fa07 	bl	80059a4 <CDC_Transmit_HS>
		goto resetI2C;
 8005596:	e6c0      	b.n	800531a <vDepthSensor+0xa>
 8005598:	08007739 	.word	0x08007739
 800559c:	08007754 	.word	0x08007754
 80055a0:	080076f1 	.word	0x080076f1

080055a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055a6:	2003      	movs	r0, #3
 80055a8:	f7fb fcfc 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80055ac:	2200      	movs	r2, #0
 80055ae:	4611      	mov	r1, r2
 80055b0:	f06f 000b 	mvn.w	r0, #11
 80055b4:	f7fb fd08 	bl	8000fc8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80055b8:	2200      	movs	r2, #0
 80055ba:	4611      	mov	r1, r2
 80055bc:	f06f 000a 	mvn.w	r0, #10
 80055c0:	f7fb fd02 	bl	8000fc8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80055c4:	2200      	movs	r2, #0
 80055c6:	4611      	mov	r1, r2
 80055c8:	f06f 0009 	mvn.w	r0, #9
 80055cc:	f7fb fcfc 	bl	8000fc8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80055d0:	2200      	movs	r2, #0
 80055d2:	4611      	mov	r1, r2
 80055d4:	f06f 0004 	mvn.w	r0, #4
 80055d8:	f7fb fcf6 	bl	8000fc8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80055dc:	2200      	movs	r2, #0
 80055de:	4611      	mov	r1, r2
 80055e0:	f06f 0003 	mvn.w	r0, #3
 80055e4:	f7fb fcf0 	bl	8000fc8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80055e8:	2200      	movs	r2, #0
 80055ea:	210f      	movs	r1, #15
 80055ec:	f06f 0001 	mvn.w	r0, #1
 80055f0:	f7fb fcea 	bl	8000fc8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80055f4:	2200      	movs	r2, #0
 80055f6:	210f      	movs	r1, #15
 80055f8:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8005600:	f7fb bce2 	b.w	8000fc8 <HAL_NVIC_SetPriority>

08005604 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005604:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8005606:	6803      	ldr	r3, [r0, #0]
 8005608:	4a24      	ldr	r2, [pc, #144]	; (800569c <HAL_I2C_MspInit+0x98>)
 800560a:	4293      	cmp	r3, r2
{
 800560c:	b089      	sub	sp, #36	; 0x24
  if(hi2c->Instance==I2C1)
 800560e:	d11b      	bne.n	8005648 <HAL_I2C_MspInit+0x44>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Depth_Pin|SDA_Depth_Pin;
 8005610:	23c0      	movs	r3, #192	; 0xc0
 8005612:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005614:	2312      	movs	r3, #18
 8005616:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005618:	2301      	movs	r3, #1
 800561a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800561c:	2303      	movs	r3, #3
 800561e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005620:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005622:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005624:	481e      	ldr	r0, [pc, #120]	; (80056a0 <HAL_I2C_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005626:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005628:	f7fb fd30 	bl	800108c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800562c:	2300      	movs	r3, #0
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	4b1c      	ldr	r3, [pc, #112]	; (80056a4 <HAL_I2C_MspInit+0xa0>)
 8005632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005634:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005638:	641a      	str	r2, [r3, #64]	; 0x40
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005644:	b009      	add	sp, #36	; 0x24
 8005646:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hi2c->Instance==I2C3)
 8005648:	4a17      	ldr	r2, [pc, #92]	; (80056a8 <HAL_I2C_MspInit+0xa4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d1fa      	bne.n	8005644 <HAL_I2C_MspInit+0x40>
    GPIO_InitStruct.Pin = SDA_Bkpln_Pin;
 800564e:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005652:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005654:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005656:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005658:	2404      	movs	r4, #4
    HAL_GPIO_Init(SDA_Bkpln_GPIO_Port, &GPIO_InitStruct);
 800565a:	a903      	add	r1, sp, #12
 800565c:	4813      	ldr	r0, [pc, #76]	; (80056ac <HAL_I2C_MspInit+0xa8>)
    GPIO_InitStruct.Pin = SDA_Bkpln_Pin;
 800565e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005660:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005662:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005664:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005666:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SDA_Bkpln_GPIO_Port, &GPIO_InitStruct);
 8005668:	f7fb fd10 	bl	800108c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCL_Bkpln_Pin;
 800566c:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(SCL_Bkpln_GPIO_Port, &GPIO_InitStruct);
 8005670:	a903      	add	r1, sp, #12
 8005672:	480f      	ldr	r0, [pc, #60]	; (80056b0 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pin = SCL_Bkpln_Pin;
 8005674:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005676:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005678:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800567a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800567c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SCL_Bkpln_GPIO_Port, &GPIO_InitStruct);
 800567e:	f7fb fd05 	bl	800108c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005682:	2300      	movs	r3, #0
 8005684:	9302      	str	r3, [sp, #8]
 8005686:	4b07      	ldr	r3, [pc, #28]	; (80056a4 <HAL_I2C_MspInit+0xa0>)
 8005688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800568a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800568e:	641a      	str	r2, [r3, #64]	; 0x40
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005696:	9302      	str	r3, [sp, #8]
 8005698:	9b02      	ldr	r3, [sp, #8]
}
 800569a:	e7d3      	b.n	8005644 <HAL_I2C_MspInit+0x40>
 800569c:	40005400 	.word	0x40005400
 80056a0:	40020400 	.word	0x40020400
 80056a4:	40023800 	.word	0x40023800
 80056a8:	40005c00 	.word	0x40005c00
 80056ac:	40020800 	.word	0x40020800
 80056b0:	40020000 	.word	0x40020000

080056b4 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 80056b4:	6803      	ldr	r3, [r0, #0]
 80056b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80056ba:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM2)
 80056bc:	d10d      	bne.n	80056da <HAL_TIM_PWM_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80056be:	2300      	movs	r3, #0
 80056c0:	9301      	str	r3, [sp, #4]
 80056c2:	4b16      	ldr	r3, [pc, #88]	; (800571c <HAL_TIM_PWM_MspInit+0x68>)
 80056c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056c6:	f042 0201 	orr.w	r2, r2, #1
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80056d6:	b004      	add	sp, #16
 80056d8:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM3)
 80056da:	4a11      	ldr	r2, [pc, #68]	; (8005720 <HAL_TIM_PWM_MspInit+0x6c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d10c      	bne.n	80056fa <HAL_TIM_PWM_MspInit+0x46>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80056e0:	2300      	movs	r3, #0
 80056e2:	9302      	str	r3, [sp, #8]
 80056e4:	4b0d      	ldr	r3, [pc, #52]	; (800571c <HAL_TIM_PWM_MspInit+0x68>)
 80056e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056e8:	f042 0202 	orr.w	r2, r2, #2
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	9302      	str	r3, [sp, #8]
 80056f6:	9b02      	ldr	r3, [sp, #8]
 80056f8:	e7ed      	b.n	80056d6 <HAL_TIM_PWM_MspInit+0x22>
  else if(htim_pwm->Instance==TIM5)
 80056fa:	4a0a      	ldr	r2, [pc, #40]	; (8005724 <HAL_TIM_PWM_MspInit+0x70>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d1ea      	bne.n	80056d6 <HAL_TIM_PWM_MspInit+0x22>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005700:	2300      	movs	r3, #0
 8005702:	9303      	str	r3, [sp, #12]
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <HAL_TIM_PWM_MspInit+0x68>)
 8005706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005708:	f042 0208 	orr.w	r2, r2, #8
 800570c:	641a      	str	r2, [r3, #64]	; 0x40
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	9303      	str	r3, [sp, #12]
 8005716:	9b03      	ldr	r3, [sp, #12]
}
 8005718:	e7dd      	b.n	80056d6 <HAL_TIM_PWM_MspInit+0x22>
 800571a:	bf00      	nop
 800571c:	40023800 	.word	0x40023800
 8005720:	40000400 	.word	0x40000400
 8005724:	40000c00 	.word	0x40000c00

08005728 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM13)
 8005728:	6803      	ldr	r3, [r0, #0]
 800572a:	4a11      	ldr	r2, [pc, #68]	; (8005770 <HAL_TIM_Base_MspInit+0x48>)
 800572c:	4293      	cmp	r3, r2
{
 800572e:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM13)
 8005730:	d10d      	bne.n	800574e <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005732:	2300      	movs	r3, #0
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <HAL_TIM_Base_MspInit+0x4c>)
 8005738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800573a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800573e:	641a      	str	r2, [r3, #64]	; 0x40
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800574a:	b002      	add	sp, #8
 800574c:	4770      	bx	lr
  else if(htim_base->Instance==TIM14)
 800574e:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <HAL_TIM_Base_MspInit+0x50>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d1fa      	bne.n	800574a <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005754:	2300      	movs	r3, #0
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <HAL_TIM_Base_MspInit+0x4c>)
 800575a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800575c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005760:	641a      	str	r2, [r3, #64]	; 0x40
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005768:	9301      	str	r3, [sp, #4]
 800576a:	9b01      	ldr	r3, [sp, #4]
}
 800576c:	e7ed      	b.n	800574a <HAL_TIM_Base_MspInit+0x22>
 800576e:	bf00      	nop
 8005770:	40001c00 	.word	0x40001c00
 8005774:	40023800 	.word	0x40023800
 8005778:	40002000 	.word	0x40002000

0800577c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800577c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 800577e:	6803      	ldr	r3, [r0, #0]
 8005780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8005784:	b086      	sub	sp, #24
  if(htim->Instance==TIM2)
 8005786:	d118      	bne.n	80057ba <HAL_TIM_MspPostInit+0x3e>
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005788:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800578a:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800578c:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800578e:	a901      	add	r1, sp, #4
 8005790:	481f      	ldr	r0, [pc, #124]	; (8005810 <HAL_TIM_MspPostInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005792:	9501      	str	r5, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005794:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005796:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005798:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800579a:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800579c:	f7fb fc76 	bl	800108c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SwAft_Pin|SwFwd_Pin;
 80057a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80057a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057a6:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057aa:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80057ac:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057ae:	4819      	ldr	r0, [pc, #100]	; (8005814 <HAL_TIM_MspPostInit+0x98>)
 80057b0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057b2:	f7fb fc6b 	bl	800108c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80057b6:	b006      	add	sp, #24
 80057b8:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim->Instance==TIM3)
 80057ba:	4a17      	ldr	r2, [pc, #92]	; (8005818 <HAL_TIM_MspPostInit+0x9c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d108      	bne.n	80057d2 <HAL_TIM_MspPostInit+0x56>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80057c0:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c2:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80057c4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c6:	2302      	movs	r3, #2
 80057c8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ca:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057cc:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80057ce:	9305      	str	r3, [sp, #20]
 80057d0:	e7ed      	b.n	80057ae <HAL_TIM_MspPostInit+0x32>
  else if(htim->Instance==TIM5)
 80057d2:	4a12      	ldr	r2, [pc, #72]	; (800581c <HAL_TIM_MspPostInit+0xa0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d10a      	bne.n	80057ee <HAL_TIM_MspPostInit+0x72>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80057d8:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057da:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80057dc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057de:	2302      	movs	r3, #2
 80057e0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e2:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057e4:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80057e6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057e8:	a901      	add	r1, sp, #4
 80057ea:	4809      	ldr	r0, [pc, #36]	; (8005810 <HAL_TIM_MspPostInit+0x94>)
 80057ec:	e7e1      	b.n	80057b2 <HAL_TIM_MspPostInit+0x36>
  else if(htim->Instance==TIM13)
 80057ee:	4a0c      	ldr	r2, [pc, #48]	; (8005820 <HAL_TIM_MspPostInit+0xa4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d108      	bne.n	8005806 <HAL_TIM_MspPostInit+0x8a>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80057f4:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80057f6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057f8:	2302      	movs	r3, #2
 80057fa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057fc:	2300      	movs	r3, #0
 80057fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005800:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8005802:	2309      	movs	r3, #9
 8005804:	e7ef      	b.n	80057e6 <HAL_TIM_MspPostInit+0x6a>
  else if(htim->Instance==TIM14)
 8005806:	4a07      	ldr	r2, [pc, #28]	; (8005824 <HAL_TIM_MspPostInit+0xa8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d1d4      	bne.n	80057b6 <HAL_TIM_MspPostInit+0x3a>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800580c:	2380      	movs	r3, #128	; 0x80
 800580e:	e7f2      	b.n	80057f6 <HAL_TIM_MspPostInit+0x7a>
 8005810:	40020000 	.word	0x40020000
 8005814:	40020400 	.word	0x40020400
 8005818:	40000400 	.word	0x40000400
 800581c:	40000c00 	.word	0x40000c00
 8005820:	40001c00 	.word	0x40001c00
 8005824:	40002000 	.word	0x40002000

08005828 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005828:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800582a:	4601      	mov	r1, r0
{
 800582c:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800582e:	2200      	movs	r2, #0
 8005830:	2019      	movs	r0, #25
 8005832:	f7fb fbc9 	bl	8000fc8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8005836:	2019      	movs	r0, #25
 8005838:	f7fb fbfa 	bl	8001030 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800583c:	2500      	movs	r5, #0
 800583e:	4b14      	ldr	r3, [pc, #80]	; (8005890 <HAL_InitTick+0x68>)
 8005840:	9502      	str	r5, [sp, #8]
 8005842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005844:	4c13      	ldr	r4, [pc, #76]	; (8005894 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005846:	f042 0201 	orr.w	r2, r2, #1
 800584a:	645a      	str	r2, [r3, #68]	; 0x44
 800584c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005854:	a901      	add	r1, sp, #4
 8005856:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005858:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800585a:	f7fc ff79 	bl	8002750 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800585e:	f7fc ff67 	bl	8002730 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8005862:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <HAL_InitTick+0x70>)
 8005864:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005866:	f240 33e7 	movw	r3, #999	; 0x3e7
 800586a:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800586c:	4b0b      	ldr	r3, [pc, #44]	; (800589c <HAL_InitTick+0x74>)
 800586e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005872:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8005874:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005876:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8005878:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800587a:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800587c:	f7fd f920 	bl	8002ac0 <HAL_TIM_Base_Init>
 8005880:	b920      	cbnz	r0, 800588c <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005882:	4620      	mov	r0, r4
 8005884:	f7fd f806 	bl	8002894 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8005888:	b009      	add	sp, #36	; 0x24
 800588a:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800588c:	2001      	movs	r0, #1
 800588e:	e7fb      	b.n	8005888 <HAL_InitTick+0x60>
 8005890:	40023800 	.word	0x40023800
 8005894:	20004280 	.word	0x20004280
 8005898:	40010000 	.word	0x40010000
 800589c:	000f4240 	.word	0x000f4240

080058a0 <NMI_Handler>:
 80058a0:	4770      	bx	lr

080058a2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80058a2:	e7fe      	b.n	80058a2 <HardFault_Handler>

080058a4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80058a4:	e7fe      	b.n	80058a4 <MemManage_Handler>

080058a6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80058a6:	e7fe      	b.n	80058a6 <BusFault_Handler>

080058a8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80058a8:	e7fe      	b.n	80058a8 <UsageFault_Handler>

080058aa <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80058aa:	4770      	bx	lr

080058ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80058ac:	f7fe ba98 	b.w	8003de0 <osSystickHandler>

080058b0 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058b0:	4801      	ldr	r0, [pc, #4]	; (80058b8 <TIM1_UP_TIM10_IRQHandler+0x8>)
 80058b2:	f7fc bffe 	b.w	80028b2 <HAL_TIM_IRQHandler>
 80058b6:	bf00      	nop
 80058b8:	20004280 	.word	0x20004280

080058bc <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80058bc:	4801      	ldr	r0, [pc, #4]	; (80058c4 <OTG_HS_IRQHandler+0x8>)
 80058be:	f7fc b90d 	b.w	8001adc <HAL_PCD_IRQHandler>
 80058c2:	bf00      	nop
 80058c4:	200054e0 	.word	0x200054e0

080058c8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058c8:	490f      	ldr	r1, [pc, #60]	; (8005908 <SystemInit+0x40>)
 80058ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80058ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80058d6:	4b0d      	ldr	r3, [pc, #52]	; (800590c <SystemInit+0x44>)
 80058d8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80058da:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80058dc:	f042 0201 	orr.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80058e2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80058ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80058ee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80058f0:	4a07      	ldr	r2, [pc, #28]	; (8005910 <SystemInit+0x48>)
 80058f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80058fc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80058fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005902:	608b      	str	r3, [r1, #8]
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	e000ed00 	.word	0xe000ed00
 800590c:	40023800 	.word	0x40023800
 8005910:	24003010 	.word	0x24003010

08005914 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005914:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS);
 8005916:	4c09      	ldr	r4, [pc, #36]	; (800593c <MX_USB_DEVICE_Init+0x28>)
 8005918:	4909      	ldr	r1, [pc, #36]	; (8005940 <MX_USB_DEVICE_Init+0x2c>)
 800591a:	2201      	movs	r2, #1
 800591c:	4620      	mov	r0, r4
 800591e:	f7fd ff19 	bl	8003754 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC);
 8005922:	4908      	ldr	r1, [pc, #32]	; (8005944 <MX_USB_DEVICE_Init+0x30>)
 8005924:	4620      	mov	r0, r4
 8005926:	f7fd ff2a 	bl	800377e <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS);
 800592a:	4620      	mov	r0, r4
 800592c:	4906      	ldr	r1, [pc, #24]	; (8005948 <MX_USB_DEVICE_Init+0x34>)
 800592e:	f7fd fed2 	bl	80036d6 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceHS);
 8005932:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceHS);
 8005938:	f7fd bf28 	b.w	800378c <USBD_Start>
 800593c:	200042bc 	.word	0x200042bc
 8005940:	2000012c 	.word	0x2000012c
 8005944:	20000004 	.word	0x20000004
 8005948:	2000011c 	.word	0x2000011c

0800594c <CDC_DeInit_HS>:
static int8_t CDC_DeInit_HS(void)
{
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
  /* USER CODE END 9 */
}
 800594c:	2000      	movs	r0, #0
 800594e:	4770      	bx	lr

08005950 <CDC_Control_HS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 10 */
}
 8005950:	2000      	movs	r0, #0
 8005952:	4770      	bx	lr

08005954 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8005954:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8005956:	4d08      	ldr	r5, [pc, #32]	; (8005978 <CDC_Receive_HS+0x24>)
{
 8005958:	4604      	mov	r4, r0
 800595a:	460e      	mov	r6, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800595c:	4601      	mov	r1, r0
 800595e:	4628      	mov	r0, r5
 8005960:	f7fd fec8 	bl	80036f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8005964:	4628      	mov	r0, r5
 8005966:	f7fd fee2 	bl	800372e <USBD_CDC_ReceivePacket>
  Riptide_CDC_Receive(Buf, Len);
 800596a:	4631      	mov	r1, r6
 800596c:	4620      	mov	r0, r4
 800596e:	f7ff fa9b 	bl	8004ea8 <Riptide_CDC_Receive>
  return (USBD_OK);
  /* USER CODE END 11 */
}
 8005972:	2000      	movs	r0, #0
 8005974:	bd70      	pop	{r4, r5, r6, pc}
 8005976:	bf00      	nop
 8005978:	200042bc 	.word	0x200042bc

0800597c <CDC_Init_HS>:
{
 800597c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800597e:	4c06      	ldr	r4, [pc, #24]	; (8005998 <CDC_Init_HS+0x1c>)
 8005980:	4906      	ldr	r1, [pc, #24]	; (800599c <CDC_Init_HS+0x20>)
 8005982:	2200      	movs	r2, #0
 8005984:	4620      	mov	r0, r4
 8005986:	f7fd fead 	bl	80036e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800598a:	4905      	ldr	r1, [pc, #20]	; (80059a0 <CDC_Init_HS+0x24>)
 800598c:	4620      	mov	r0, r4
 800598e:	f7fd feb1 	bl	80036f4 <USBD_CDC_SetRxBuffer>
}
 8005992:	2000      	movs	r0, #0
 8005994:	bd10      	pop	{r4, pc}
 8005996:	bf00      	nop
 8005998:	200042bc 	.word	0x200042bc
 800599c:	20004ce0 	.word	0x20004ce0
 80059a0:	200044e0 	.word	0x200044e0

080059a4 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80059a4:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80059a6:	4c09      	ldr	r4, [pc, #36]	; (80059cc <CDC_Transmit_HS+0x28>)
 80059a8:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 80059ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 80059b0:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 80059b2:	b943      	cbnz	r3, 80059c6 <CDC_Transmit_HS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80059b4:	4601      	mov	r1, r0
 80059b6:	4620      	mov	r0, r4
 80059b8:	f7fd fe94 	bl	80036e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80059bc:	4620      	mov	r0, r4

  /* USER CODE END 12 */
  return result;
}
 80059be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80059c2:	f7fd be9d 	b.w	8003700 <USBD_CDC_TransmitPacket>
}
 80059c6:	2001      	movs	r0, #1
 80059c8:	bd10      	pop	{r4, pc}
 80059ca:	bf00      	nop
 80059cc:	200042bc 	.word	0x200042bc

080059d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80059d0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 80059d2:	6802      	ldr	r2, [r0, #0]
 80059d4:	4b13      	ldr	r3, [pc, #76]	; (8005a24 <HAL_PCD_MspInit+0x54>)
 80059d6:	429a      	cmp	r2, r3
{
 80059d8:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_HS)
 80059da:	d121      	bne.n	8005a20 <HAL_PCD_MspInit+0x50>
  
    /**USB_OTG_HS GPIO Configuration    
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80059dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80059e0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e2:	2302      	movs	r3, #2
 80059e4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059e6:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e8:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059ec:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80059ee:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059f0:	480d      	ldr	r0, [pc, #52]	; (8005a28 <HAL_PCD_MspInit+0x58>)
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80059f2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f4:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059f6:	f7fb fb49 	bl	800108c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80059fa:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <HAL_PCD_MspInit+0x5c>)
 80059fc:	9400      	str	r4, [sp, #0]
 80059fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a00:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005a04:	631a      	str	r2, [r3, #48]	; 0x30
 8005a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a0c:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8005a0e:	204d      	movs	r0, #77	; 0x4d
 8005a10:	4622      	mov	r2, r4
 8005a12:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8005a14:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8005a16:	f7fb fad7 	bl	8000fc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8005a1a:	204d      	movs	r0, #77	; 0x4d
 8005a1c:	f7fb fb08 	bl	8001030 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8005a20:	b006      	add	sp, #24
 8005a22:	bd10      	pop	{r4, pc}
 8005a24:	40040000 	.word	0x40040000
 8005a28:	40020400 	.word	0x40020400
 8005a2c:	40023800 	.word	0x40023800

08005a30 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005a30:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8005a34:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005a38:	f7fd bebf 	b.w	80037ba <USBD_LL_SetupStage>

08005a3c <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005a3c:	231c      	movs	r3, #28
 8005a3e:	fb03 0301 	mla	r3, r3, r1, r0
 8005a42:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005a46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a4a:	f7fd bee3 	b.w	8003814 <USBD_LL_DataOutStage>

08005a4e <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005a4e:	231c      	movs	r3, #28
 8005a50:	fb03 0301 	mla	r3, r3, r1, r0
 8005a54:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a5a:	f7fd bf0d 	b.w	8003878 <USBD_LL_DataInStage>

08005a5e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005a5e:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005a62:	f7fd bf89 	b.w	8003978 <USBD_LL_SOF>

08005a66 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8005a66:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8005a68:	68c1      	ldr	r1, [r0, #12]
{ 
 8005a6a:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005a6c:	3100      	adds	r1, #0
 8005a6e:	bf18      	it	ne
 8005a70:	2101      	movne	r1, #1
 8005a72:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005a76:	f7fd ff6d 	bl	8003954 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005a7a:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 8005a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005a82:	f7fd bf48 	b.w	8003916 <USBD_LL_Reset>
	...

08005a88 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005a88:	b510      	push	{r4, lr}
 8005a8a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005a8c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005a90:	f7fd ff63 	bl	800395a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005a94:	6822      	ldr	r2, [r4, #0]
 8005a96:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8005a9a:	f043 0301 	orr.w	r3, r3, #1
 8005a9e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005aa2:	6a23      	ldr	r3, [r4, #32]
 8005aa4:	b123      	cbz	r3, 8005ab0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005aa6:	4a03      	ldr	r2, [pc, #12]	; (8005ab4 <HAL_PCD_SuspendCallback+0x2c>)
 8005aa8:	6913      	ldr	r3, [r2, #16]
 8005aaa:	f043 0306 	orr.w	r3, r3, #6
 8005aae:	6113      	str	r3, [r2, #16]
 8005ab0:	bd10      	pop	{r4, pc}
 8005ab2:	bf00      	nop
 8005ab4:	e000ed00 	.word	0xe000ed00

08005ab8 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005ab8:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005abc:	f7fd bf56 	b.w	800396c <USBD_LL_Resume>

08005ac0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005ac0:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005ac4:	f7fd bf66 	b.w	8003994 <USBD_LL_IsoOUTIncomplete>

08005ac8 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005ac8:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005acc:	f7fd bf60 	b.w	8003990 <USBD_LL_IsoINIncomplete>

08005ad0 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005ad0:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005ad4:	f7fd bf60 	b.w	8003998 <USBD_LL_DevConnected>

08005ad8 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005ad8:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005adc:	f7fd bf5e 	b.w	800399c <USBD_LL_DevDisconnected>

08005ae0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005ae0:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8005ae2:	7803      	ldrb	r3, [r0, #0]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d12d      	bne.n	8005b44 <USBD_LL_Init+0x64>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8005ae8:	4b17      	ldr	r3, [pc, #92]	; (8005b48 <USBD_LL_Init+0x68>)
  pdev->pData = &hpcd_USB_OTG_HS;

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8005aea:	4918      	ldr	r1, [pc, #96]	; (8005b4c <USBD_LL_Init+0x6c>)
  hpcd_USB_OTG_HS.pData = pdev;
 8005aec:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8005af0:	2206      	movs	r2, #6
 8005af2:	e883 0006 	stmia.w	r3, {r1, r2}
  pdev->pData = &hpcd_USB_OTG_HS;
 8005af6:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8005afa:	2200      	movs	r2, #0
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8005afc:	2102      	movs	r1, #2
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8005afe:	4618      	mov	r0, r3
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8005b00:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8005b02:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 8005b04:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8005b06:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8005b08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8005b0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8005b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8005b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8005b10:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8005b12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8005b14:	f7fb ff60 	bl	80019d8 <HAL_PCD_Init>
 8005b18:	b120      	cbz	r0, 8005b24 <USBD_LL_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005b1a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005b1e:	480c      	ldr	r0, [pc, #48]	; (8005b50 <USBD_LL_Init+0x70>)
 8005b20:	f7ff f990 	bl	8004e44 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8005b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b28:	4807      	ldr	r0, [pc, #28]	; (8005b48 <USBD_LL_Init+0x68>)
 8005b2a:	f7fc fba4 	bl	8002276 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8005b2e:	2280      	movs	r2, #128	; 0x80
 8005b30:	2100      	movs	r1, #0
 8005b32:	4805      	ldr	r0, [pc, #20]	; (8005b48 <USBD_LL_Init+0x68>)
 8005b34:	f7fc fb7e 	bl	8002234 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8005b38:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	4802      	ldr	r0, [pc, #8]	; (8005b48 <USBD_LL_Init+0x68>)
 8005b40:	f7fc fb78 	bl	8002234 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8005b44:	2000      	movs	r0, #0
 8005b46:	bd08      	pop	{r3, pc}
 8005b48:	200054e0 	.word	0x200054e0
 8005b4c:	40040000 	.word	0x40040000
 8005b50:	08007794 	.word	0x08007794

08005b54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005b54:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005b56:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005b5a:	f7fb ffa9 	bl	8001ab0 <HAL_PCD_Start>
 8005b5e:	2803      	cmp	r0, #3
 8005b60:	bf9a      	itte	ls
 8005b62:	4b02      	ldrls	r3, [pc, #8]	; (8005b6c <USBD_LL_Start+0x18>)
 8005b64:	5c18      	ldrbls	r0, [r3, r0]
 8005b66:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005b68:	bd08      	pop	{r3, pc}
 8005b6a:	bf00      	nop
 8005b6c:	08007790 	.word	0x08007790

08005b70 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005b70:	b510      	push	{r4, lr}
 8005b72:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005b74:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005b78:	4613      	mov	r3, r2
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	f7fc fa6c 	bl	8002058 <HAL_PCD_EP_Open>
 8005b80:	2803      	cmp	r0, #3
 8005b82:	bf9a      	itte	ls
 8005b84:	4b01      	ldrls	r3, [pc, #4]	; (8005b8c <USBD_LL_OpenEP+0x1c>)
 8005b86:	5c18      	ldrbls	r0, [r3, r0]
 8005b88:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005b8a:	bd10      	pop	{r4, pc}
 8005b8c:	08007790 	.word	0x08007790

08005b90 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b90:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005b92:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005b96:	f7fc fa8d 	bl	80020b4 <HAL_PCD_EP_Close>
 8005b9a:	2803      	cmp	r0, #3
 8005b9c:	bf9a      	itte	ls
 8005b9e:	4b02      	ldrls	r3, [pc, #8]	; (8005ba8 <USBD_LL_CloseEP+0x18>)
 8005ba0:	5c18      	ldrbls	r0, [r3, r0]
 8005ba2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005ba4:	bd08      	pop	{r3, pc}
 8005ba6:	bf00      	nop
 8005ba8:	08007790 	.word	0x08007790

08005bac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005bac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005bae:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005bb2:	f7fc faee 	bl	8002192 <HAL_PCD_EP_SetStall>
 8005bb6:	2803      	cmp	r0, #3
 8005bb8:	bf9a      	itte	ls
 8005bba:	4b02      	ldrls	r3, [pc, #8]	; (8005bc4 <USBD_LL_StallEP+0x18>)
 8005bbc:	5c18      	ldrbls	r0, [r3, r0]
 8005bbe:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005bc0:	bd08      	pop	{r3, pc}
 8005bc2:	bf00      	nop
 8005bc4:	08007790 	.word	0x08007790

08005bc8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005bc8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005bca:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005bce:	f7fc fb0c 	bl	80021ea <HAL_PCD_EP_ClrStall>
 8005bd2:	2803      	cmp	r0, #3
 8005bd4:	bf9a      	itte	ls
 8005bd6:	4b02      	ldrls	r3, [pc, #8]	; (8005be0 <USBD_LL_ClearStallEP+0x18>)
 8005bd8:	5c18      	ldrbls	r0, [r3, r0]
 8005bda:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8005bdc:	bd08      	pop	{r3, pc}
 8005bde:	bf00      	nop
 8005be0:	08007790 	.word	0x08007790

08005be4 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8005be4:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005be8:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8005bec:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005bf0:	bf1b      	ittet	ne
 8005bf2:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8005bf6:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005bfa:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005bfe:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005c02:	bf08      	it	eq
 8005c04:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8005c08:	4770      	bx	lr
	...

08005c0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005c0c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005c0e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005c12:	f7fc fa0f 	bl	8002034 <HAL_PCD_SetAddress>
 8005c16:	2803      	cmp	r0, #3
 8005c18:	bf9a      	itte	ls
 8005c1a:	4b02      	ldrls	r3, [pc, #8]	; (8005c24 <USBD_LL_SetUSBAddress+0x18>)
 8005c1c:	5c18      	ldrbls	r0, [r3, r0]
 8005c1e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005c20:	bd08      	pop	{r3, pc}
 8005c22:	bf00      	nop
 8005c24:	08007790 	.word	0x08007790

08005c28 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005c28:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005c2a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005c2e:	f7fc fa90 	bl	8002152 <HAL_PCD_EP_Transmit>
 8005c32:	2803      	cmp	r0, #3
 8005c34:	bf9a      	itte	ls
 8005c36:	4b02      	ldrls	r3, [pc, #8]	; (8005c40 <USBD_LL_Transmit+0x18>)
 8005c38:	5c18      	ldrbls	r0, [r3, r0]
 8005c3a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8005c3c:	bd08      	pop	{r3, pc}
 8005c3e:	bf00      	nop
 8005c40:	08007790 	.word	0x08007790

08005c44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005c44:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005c46:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005c4a:	f7fc fa56 	bl	80020fa <HAL_PCD_EP_Receive>
 8005c4e:	2803      	cmp	r0, #3
 8005c50:	bf9a      	itte	ls
 8005c52:	4b02      	ldrls	r3, [pc, #8]	; (8005c5c <USBD_LL_PrepareReceive+0x18>)
 8005c54:	5c18      	ldrbls	r0, [r3, r0]
 8005c56:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8005c58:	bd08      	pop	{r3, pc}
 8005c5a:	bf00      	nop
 8005c5c:	08007790 	.word	0x08007790

08005c60 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005c60:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005c62:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005c66:	f7fc fa6c 	bl	8002142 <HAL_PCD_EP_GetRxCount>
}
 8005c6a:	bd08      	pop	{r3, pc}

08005c6c <USBD_HS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_HS_DeviceDesc);
 8005c6c:	2312      	movs	r3, #18
 8005c6e:	800b      	strh	r3, [r1, #0]
  return USBD_HS_DeviceDesc;
}
 8005c70:	4800      	ldr	r0, [pc, #0]	; (8005c74 <USBD_HS_DeviceDescriptor+0x8>)
 8005c72:	4770      	bx	lr
 8005c74:	20000148 	.word	0x20000148

08005c78 <USBD_HS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8005c78:	2304      	movs	r3, #4
 8005c7a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005c7c:	4800      	ldr	r0, [pc, #0]	; (8005c80 <USBD_HS_LangIDStrDescriptor+0x8>)
 8005c7e:	4770      	bx	lr
 8005c80:	2000015c 	.word	0x2000015c

08005c84 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c84:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005c86:	4c04      	ldr	r4, [pc, #16]	; (8005c98 <USBD_HS_ManufacturerStrDescriptor+0x14>)
 8005c88:	4804      	ldr	r0, [pc, #16]	; (8005c9c <USBD_HS_ManufacturerStrDescriptor+0x18>)
 8005c8a:	460a      	mov	r2, r1
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	f7fe f824 	bl	8003cda <USBD_GetString>
  return USBD_StrDesc;
}
 8005c92:	4620      	mov	r0, r4
 8005c94:	bd10      	pop	{r4, pc}
 8005c96:	bf00      	nop
 8005c98:	200058d0 	.word	0x200058d0
 8005c9c:	080077c0 	.word	0x080077c0

08005ca0 <USBD_HS_ProductStrDescriptor>:
{
 8005ca0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8005ca2:	4c04      	ldr	r4, [pc, #16]	; (8005cb4 <USBD_HS_ProductStrDescriptor+0x14>)
 8005ca4:	4804      	ldr	r0, [pc, #16]	; (8005cb8 <USBD_HS_ProductStrDescriptor+0x18>)
 8005ca6:	460a      	mov	r2, r1
 8005ca8:	4621      	mov	r1, r4
 8005caa:	f7fe f816 	bl	8003cda <USBD_GetString>
}
 8005cae:	4620      	mov	r0, r4
 8005cb0:	bd10      	pop	{r4, pc}
 8005cb2:	bf00      	nop
 8005cb4:	200058d0 	.word	0x200058d0
 8005cb8:	080077d3 	.word	0x080077d3

08005cbc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cbc:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
 8005cbe:	4c04      	ldr	r4, [pc, #16]	; (8005cd0 <USBD_HS_SerialStrDescriptor+0x14>)
 8005cc0:	4804      	ldr	r0, [pc, #16]	; (8005cd4 <USBD_HS_SerialStrDescriptor+0x18>)
 8005cc2:	460a      	mov	r2, r1
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	f7fe f808 	bl	8003cda <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005cca:	4620      	mov	r0, r4
 8005ccc:	bd10      	pop	{r4, pc}
 8005cce:	bf00      	nop
 8005cd0:	200058d0 	.word	0x200058d0
 8005cd4:	080077df 	.word	0x080077df

08005cd8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cd8:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8005cda:	4c04      	ldr	r4, [pc, #16]	; (8005cec <USBD_HS_ConfigStrDescriptor+0x14>)
 8005cdc:	4804      	ldr	r0, [pc, #16]	; (8005cf0 <USBD_HS_ConfigStrDescriptor+0x18>)
 8005cde:	460a      	mov	r2, r1
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	f7fd fffa 	bl	8003cda <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	bd10      	pop	{r4, pc}
 8005cea:	bf00      	nop
 8005cec:	200058d0 	.word	0x200058d0
 8005cf0:	080077a7 	.word	0x080077a7

08005cf4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cf4:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8005cf6:	4c04      	ldr	r4, [pc, #16]	; (8005d08 <USBD_HS_InterfaceStrDescriptor+0x14>)
 8005cf8:	4804      	ldr	r0, [pc, #16]	; (8005d0c <USBD_HS_InterfaceStrDescriptor+0x18>)
 8005cfa:	460a      	mov	r2, r1
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	f7fd ffec 	bl	8003cda <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005d02:	4620      	mov	r0, r4
 8005d04:	bd10      	pop	{r4, pc}
 8005d06:	bf00      	nop
 8005d08:	200058d0 	.word	0x200058d0
 8005d0c:	080077b2 	.word	0x080077b2

08005d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005d14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005d16:	e003      	b.n	8005d20 <LoopCopyDataInit>

08005d18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005d18:	4b0c      	ldr	r3, [pc, #48]	; (8005d4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005d1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005d1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005d1e:	3104      	adds	r1, #4

08005d20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005d20:	480b      	ldr	r0, [pc, #44]	; (8005d50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005d22:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005d24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005d26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005d28:	d3f6      	bcc.n	8005d18 <CopyDataInit>
  ldr  r2, =_sbss
 8005d2a:	4a0b      	ldr	r2, [pc, #44]	; (8005d58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005d2c:	e002      	b.n	8005d34 <LoopFillZerobss>

08005d2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005d2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005d30:	f842 3b04 	str.w	r3, [r2], #4

08005d34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005d34:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005d36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005d38:	d3f9      	bcc.n	8005d2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005d3a:	f7ff fdc5 	bl	80058c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d3e:	f000 f841 	bl	8005dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d42:	f7fe fe65 	bl	8004a10 <main>
  bx  lr    
 8005d46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005d48:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005d4c:	08007a14 	.word	0x08007a14
  ldr  r0, =_sdata
 8005d50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005d54:	20000330 	.word	0x20000330
  ldr  r2, =_sbss
 8005d58:	20000330 	.word	0x20000330
  ldr  r3, = _ebss
 8005d5c:	20005ad4 	.word	0x20005ad4

08005d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d60:	e7fe      	b.n	8005d60 <ADC_IRQHandler>

08005d62 <atoi>:
 8005d62:	220a      	movs	r2, #10
 8005d64:	2100      	movs	r1, #0
 8005d66:	f000 b9b1 	b.w	80060cc <strtol>
	...

08005d6c <gcvt>:
 8005d6c:	b530      	push	{r4, r5, lr}
 8005d6e:	ed2d 8b02 	vpush	{d8}
 8005d72:	eeb0 8a40 	vmov.f32	s16, s0
 8005d76:	eef0 8a60 	vmov.f32	s17, s1
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	b083      	sub	sp, #12
 8005d80:	4605      	mov	r5, r0
 8005d82:	2300      	movs	r3, #0
 8005d84:	ec51 0b10 	vmov	r0, r1, d0
 8005d88:	f7fa fe54 	bl	8000a34 <__aeabi_dcmplt>
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	b118      	cbz	r0, 8005d98 <gcvt+0x2c>
 8005d90:	232d      	movs	r3, #45	; 0x2d
 8005d92:	f802 3b01 	strb.w	r3, [r2], #1
 8005d96:	3d01      	subs	r5, #1
 8005d98:	2300      	movs	r3, #0
 8005d9a:	4809      	ldr	r0, [pc, #36]	; (8005dc0 <gcvt+0x54>)
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	4629      	mov	r1, r5
 8005da0:	2367      	movs	r3, #103	; 0x67
 8005da2:	eeb0 0a48 	vmov.f32	s0, s16
 8005da6:	eef0 0a68 	vmov.f32	s1, s17
 8005daa:	6800      	ldr	r0, [r0, #0]
 8005dac:	f000 fa18 	bl	80061e0 <_gcvt>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	bf14      	ite	ne
 8005db4:	4620      	movne	r0, r4
 8005db6:	2000      	moveq	r0, #0
 8005db8:	b003      	add	sp, #12
 8005dba:	ecbd 8b02 	vpop	{d8}
 8005dbe:	bd30      	pop	{r4, r5, pc}
 8005dc0:	20000160 	.word	0x20000160

08005dc4 <__libc_init_array>:
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	4e0d      	ldr	r6, [pc, #52]	; (8005dfc <__libc_init_array+0x38>)
 8005dc8:	4c0d      	ldr	r4, [pc, #52]	; (8005e00 <__libc_init_array+0x3c>)
 8005dca:	1ba4      	subs	r4, r4, r6
 8005dcc:	10a4      	asrs	r4, r4, #2
 8005dce:	2500      	movs	r5, #0
 8005dd0:	42a5      	cmp	r5, r4
 8005dd2:	d109      	bne.n	8005de8 <__libc_init_array+0x24>
 8005dd4:	4e0b      	ldr	r6, [pc, #44]	; (8005e04 <__libc_init_array+0x40>)
 8005dd6:	4c0c      	ldr	r4, [pc, #48]	; (8005e08 <__libc_init_array+0x44>)
 8005dd8:	f001 fc5a 	bl	8007690 <_init>
 8005ddc:	1ba4      	subs	r4, r4, r6
 8005dde:	10a4      	asrs	r4, r4, #2
 8005de0:	2500      	movs	r5, #0
 8005de2:	42a5      	cmp	r5, r4
 8005de4:	d105      	bne.n	8005df2 <__libc_init_array+0x2e>
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
 8005de8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dec:	4798      	blx	r3
 8005dee:	3501      	adds	r5, #1
 8005df0:	e7ee      	b.n	8005dd0 <__libc_init_array+0xc>
 8005df2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005df6:	4798      	blx	r3
 8005df8:	3501      	adds	r5, #1
 8005dfa:	e7f2      	b.n	8005de2 <__libc_init_array+0x1e>
 8005dfc:	08007a0c 	.word	0x08007a0c
 8005e00:	08007a0c 	.word	0x08007a0c
 8005e04:	08007a0c 	.word	0x08007a0c
 8005e08:	08007a10 	.word	0x08007a10

08005e0c <malloc>:
 8005e0c:	4b02      	ldr	r3, [pc, #8]	; (8005e18 <malloc+0xc>)
 8005e0e:	4601      	mov	r1, r0
 8005e10:	6818      	ldr	r0, [r3, #0]
 8005e12:	f000 b86d 	b.w	8005ef0 <_malloc_r>
 8005e16:	bf00      	nop
 8005e18:	20000160 	.word	0x20000160

08005e1c <free>:
 8005e1c:	4b02      	ldr	r3, [pc, #8]	; (8005e28 <free+0xc>)
 8005e1e:	4601      	mov	r1, r0
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	f000 b817 	b.w	8005e54 <_free_r>
 8005e26:	bf00      	nop
 8005e28:	20000160 	.word	0x20000160

08005e2c <memcpy>:
 8005e2c:	b510      	push	{r4, lr}
 8005e2e:	1e43      	subs	r3, r0, #1
 8005e30:	440a      	add	r2, r1
 8005e32:	4291      	cmp	r1, r2
 8005e34:	d100      	bne.n	8005e38 <memcpy+0xc>
 8005e36:	bd10      	pop	{r4, pc}
 8005e38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e40:	e7f7      	b.n	8005e32 <memcpy+0x6>

08005e42 <memset>:
 8005e42:	4402      	add	r2, r0
 8005e44:	4603      	mov	r3, r0
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d100      	bne.n	8005e4c <memset+0xa>
 8005e4a:	4770      	bx	lr
 8005e4c:	f803 1b01 	strb.w	r1, [r3], #1
 8005e50:	e7f9      	b.n	8005e46 <memset+0x4>
	...

08005e54 <_free_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	4605      	mov	r5, r0
 8005e58:	2900      	cmp	r1, #0
 8005e5a:	d045      	beq.n	8005ee8 <_free_r+0x94>
 8005e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e60:	1f0c      	subs	r4, r1, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	bfb8      	it	lt
 8005e66:	18e4      	addlt	r4, r4, r3
 8005e68:	f000 fa95 	bl	8006396 <__malloc_lock>
 8005e6c:	4a1f      	ldr	r2, [pc, #124]	; (8005eec <_free_r+0x98>)
 8005e6e:	6813      	ldr	r3, [r2, #0]
 8005e70:	4610      	mov	r0, r2
 8005e72:	b933      	cbnz	r3, 8005e82 <_free_r+0x2e>
 8005e74:	6063      	str	r3, [r4, #4]
 8005e76:	6014      	str	r4, [r2, #0]
 8005e78:	4628      	mov	r0, r5
 8005e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e7e:	f000 ba8b 	b.w	8006398 <__malloc_unlock>
 8005e82:	42a3      	cmp	r3, r4
 8005e84:	d90c      	bls.n	8005ea0 <_free_r+0x4c>
 8005e86:	6821      	ldr	r1, [r4, #0]
 8005e88:	1862      	adds	r2, r4, r1
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	bf04      	itt	eq
 8005e8e:	681a      	ldreq	r2, [r3, #0]
 8005e90:	685b      	ldreq	r3, [r3, #4]
 8005e92:	6063      	str	r3, [r4, #4]
 8005e94:	bf04      	itt	eq
 8005e96:	1852      	addeq	r2, r2, r1
 8005e98:	6022      	streq	r2, [r4, #0]
 8005e9a:	6004      	str	r4, [r0, #0]
 8005e9c:	e7ec      	b.n	8005e78 <_free_r+0x24>
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	b10a      	cbz	r2, 8005ea8 <_free_r+0x54>
 8005ea4:	42a2      	cmp	r2, r4
 8005ea6:	d9fa      	bls.n	8005e9e <_free_r+0x4a>
 8005ea8:	6819      	ldr	r1, [r3, #0]
 8005eaa:	1858      	adds	r0, r3, r1
 8005eac:	42a0      	cmp	r0, r4
 8005eae:	d10b      	bne.n	8005ec8 <_free_r+0x74>
 8005eb0:	6820      	ldr	r0, [r4, #0]
 8005eb2:	4401      	add	r1, r0
 8005eb4:	1858      	adds	r0, r3, r1
 8005eb6:	4282      	cmp	r2, r0
 8005eb8:	6019      	str	r1, [r3, #0]
 8005eba:	d1dd      	bne.n	8005e78 <_free_r+0x24>
 8005ebc:	6810      	ldr	r0, [r2, #0]
 8005ebe:	6852      	ldr	r2, [r2, #4]
 8005ec0:	605a      	str	r2, [r3, #4]
 8005ec2:	4401      	add	r1, r0
 8005ec4:	6019      	str	r1, [r3, #0]
 8005ec6:	e7d7      	b.n	8005e78 <_free_r+0x24>
 8005ec8:	d902      	bls.n	8005ed0 <_free_r+0x7c>
 8005eca:	230c      	movs	r3, #12
 8005ecc:	602b      	str	r3, [r5, #0]
 8005ece:	e7d3      	b.n	8005e78 <_free_r+0x24>
 8005ed0:	6820      	ldr	r0, [r4, #0]
 8005ed2:	1821      	adds	r1, r4, r0
 8005ed4:	428a      	cmp	r2, r1
 8005ed6:	bf04      	itt	eq
 8005ed8:	6811      	ldreq	r1, [r2, #0]
 8005eda:	6852      	ldreq	r2, [r2, #4]
 8005edc:	6062      	str	r2, [r4, #4]
 8005ede:	bf04      	itt	eq
 8005ee0:	1809      	addeq	r1, r1, r0
 8005ee2:	6021      	streq	r1, [r4, #0]
 8005ee4:	605c      	str	r4, [r3, #4]
 8005ee6:	e7c7      	b.n	8005e78 <_free_r+0x24>
 8005ee8:	bd38      	pop	{r3, r4, r5, pc}
 8005eea:	bf00      	nop
 8005eec:	20004098 	.word	0x20004098

08005ef0 <_malloc_r>:
 8005ef0:	b570      	push	{r4, r5, r6, lr}
 8005ef2:	1ccd      	adds	r5, r1, #3
 8005ef4:	f025 0503 	bic.w	r5, r5, #3
 8005ef8:	3508      	adds	r5, #8
 8005efa:	2d0c      	cmp	r5, #12
 8005efc:	bf38      	it	cc
 8005efe:	250c      	movcc	r5, #12
 8005f00:	2d00      	cmp	r5, #0
 8005f02:	4606      	mov	r6, r0
 8005f04:	db01      	blt.n	8005f0a <_malloc_r+0x1a>
 8005f06:	42a9      	cmp	r1, r5
 8005f08:	d903      	bls.n	8005f12 <_malloc_r+0x22>
 8005f0a:	230c      	movs	r3, #12
 8005f0c:	6033      	str	r3, [r6, #0]
 8005f0e:	2000      	movs	r0, #0
 8005f10:	bd70      	pop	{r4, r5, r6, pc}
 8005f12:	f000 fa40 	bl	8006396 <__malloc_lock>
 8005f16:	4a23      	ldr	r2, [pc, #140]	; (8005fa4 <_malloc_r+0xb4>)
 8005f18:	6814      	ldr	r4, [r2, #0]
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	b991      	cbnz	r1, 8005f44 <_malloc_r+0x54>
 8005f1e:	4c22      	ldr	r4, [pc, #136]	; (8005fa8 <_malloc_r+0xb8>)
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	b91b      	cbnz	r3, 8005f2c <_malloc_r+0x3c>
 8005f24:	4630      	mov	r0, r6
 8005f26:	f000 f841 	bl	8005fac <_sbrk_r>
 8005f2a:	6020      	str	r0, [r4, #0]
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f000 f83c 	bl	8005fac <_sbrk_r>
 8005f34:	1c43      	adds	r3, r0, #1
 8005f36:	d126      	bne.n	8005f86 <_malloc_r+0x96>
 8005f38:	230c      	movs	r3, #12
 8005f3a:	6033      	str	r3, [r6, #0]
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	f000 fa2b 	bl	8006398 <__malloc_unlock>
 8005f42:	e7e4      	b.n	8005f0e <_malloc_r+0x1e>
 8005f44:	680b      	ldr	r3, [r1, #0]
 8005f46:	1b5b      	subs	r3, r3, r5
 8005f48:	d41a      	bmi.n	8005f80 <_malloc_r+0x90>
 8005f4a:	2b0b      	cmp	r3, #11
 8005f4c:	d90f      	bls.n	8005f6e <_malloc_r+0x7e>
 8005f4e:	600b      	str	r3, [r1, #0]
 8005f50:	50cd      	str	r5, [r1, r3]
 8005f52:	18cc      	adds	r4, r1, r3
 8005f54:	4630      	mov	r0, r6
 8005f56:	f000 fa1f 	bl	8006398 <__malloc_unlock>
 8005f5a:	f104 000b 	add.w	r0, r4, #11
 8005f5e:	1d23      	adds	r3, r4, #4
 8005f60:	f020 0007 	bic.w	r0, r0, #7
 8005f64:	1ac3      	subs	r3, r0, r3
 8005f66:	d01b      	beq.n	8005fa0 <_malloc_r+0xb0>
 8005f68:	425a      	negs	r2, r3
 8005f6a:	50e2      	str	r2, [r4, r3]
 8005f6c:	bd70      	pop	{r4, r5, r6, pc}
 8005f6e:	428c      	cmp	r4, r1
 8005f70:	bf0d      	iteet	eq
 8005f72:	6863      	ldreq	r3, [r4, #4]
 8005f74:	684b      	ldrne	r3, [r1, #4]
 8005f76:	6063      	strne	r3, [r4, #4]
 8005f78:	6013      	streq	r3, [r2, #0]
 8005f7a:	bf18      	it	ne
 8005f7c:	460c      	movne	r4, r1
 8005f7e:	e7e9      	b.n	8005f54 <_malloc_r+0x64>
 8005f80:	460c      	mov	r4, r1
 8005f82:	6849      	ldr	r1, [r1, #4]
 8005f84:	e7ca      	b.n	8005f1c <_malloc_r+0x2c>
 8005f86:	1cc4      	adds	r4, r0, #3
 8005f88:	f024 0403 	bic.w	r4, r4, #3
 8005f8c:	42a0      	cmp	r0, r4
 8005f8e:	d005      	beq.n	8005f9c <_malloc_r+0xac>
 8005f90:	1a21      	subs	r1, r4, r0
 8005f92:	4630      	mov	r0, r6
 8005f94:	f000 f80a 	bl	8005fac <_sbrk_r>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d0cd      	beq.n	8005f38 <_malloc_r+0x48>
 8005f9c:	6025      	str	r5, [r4, #0]
 8005f9e:	e7d9      	b.n	8005f54 <_malloc_r+0x64>
 8005fa0:	bd70      	pop	{r4, r5, r6, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20004098 	.word	0x20004098
 8005fa8:	2000409c 	.word	0x2000409c

08005fac <_sbrk_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4c06      	ldr	r4, [pc, #24]	; (8005fc8 <_sbrk_r+0x1c>)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	6023      	str	r3, [r4, #0]
 8005fb8:	f001 fb5c 	bl	8007674 <_sbrk>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_sbrk_r+0x1a>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_sbrk_r+0x1a>
 8005fc4:	602b      	str	r3, [r5, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	20005ad0 	.word	0x20005ad0

08005fcc <_strtol_l.isra.0>:
 8005fcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd0:	4680      	mov	r8, r0
 8005fd2:	4689      	mov	r9, r1
 8005fd4:	4692      	mov	sl, r2
 8005fd6:	461f      	mov	r7, r3
 8005fd8:	468b      	mov	fp, r1
 8005fda:	465d      	mov	r5, fp
 8005fdc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005fde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fe2:	f000 f9c3 	bl	800636c <__locale_ctype_ptr_l>
 8005fe6:	4420      	add	r0, r4
 8005fe8:	7846      	ldrb	r6, [r0, #1]
 8005fea:	f016 0608 	ands.w	r6, r6, #8
 8005fee:	d10b      	bne.n	8006008 <_strtol_l.isra.0+0x3c>
 8005ff0:	2c2d      	cmp	r4, #45	; 0x2d
 8005ff2:	d10b      	bne.n	800600c <_strtol_l.isra.0+0x40>
 8005ff4:	782c      	ldrb	r4, [r5, #0]
 8005ff6:	2601      	movs	r6, #1
 8005ff8:	f10b 0502 	add.w	r5, fp, #2
 8005ffc:	b167      	cbz	r7, 8006018 <_strtol_l.isra.0+0x4c>
 8005ffe:	2f10      	cmp	r7, #16
 8006000:	d114      	bne.n	800602c <_strtol_l.isra.0+0x60>
 8006002:	2c30      	cmp	r4, #48	; 0x30
 8006004:	d00a      	beq.n	800601c <_strtol_l.isra.0+0x50>
 8006006:	e011      	b.n	800602c <_strtol_l.isra.0+0x60>
 8006008:	46ab      	mov	fp, r5
 800600a:	e7e6      	b.n	8005fda <_strtol_l.isra.0+0xe>
 800600c:	2c2b      	cmp	r4, #43	; 0x2b
 800600e:	bf04      	itt	eq
 8006010:	782c      	ldrbeq	r4, [r5, #0]
 8006012:	f10b 0502 	addeq.w	r5, fp, #2
 8006016:	e7f1      	b.n	8005ffc <_strtol_l.isra.0+0x30>
 8006018:	2c30      	cmp	r4, #48	; 0x30
 800601a:	d127      	bne.n	800606c <_strtol_l.isra.0+0xa0>
 800601c:	782b      	ldrb	r3, [r5, #0]
 800601e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006022:	2b58      	cmp	r3, #88	; 0x58
 8006024:	d14b      	bne.n	80060be <_strtol_l.isra.0+0xf2>
 8006026:	786c      	ldrb	r4, [r5, #1]
 8006028:	2710      	movs	r7, #16
 800602a:	3502      	adds	r5, #2
 800602c:	2e00      	cmp	r6, #0
 800602e:	bf0c      	ite	eq
 8006030:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006034:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006038:	2200      	movs	r2, #0
 800603a:	fbb1 fef7 	udiv	lr, r1, r7
 800603e:	4610      	mov	r0, r2
 8006040:	fb07 1c1e 	mls	ip, r7, lr, r1
 8006044:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006048:	2b09      	cmp	r3, #9
 800604a:	d811      	bhi.n	8006070 <_strtol_l.isra.0+0xa4>
 800604c:	461c      	mov	r4, r3
 800604e:	42a7      	cmp	r7, r4
 8006050:	dd1d      	ble.n	800608e <_strtol_l.isra.0+0xc2>
 8006052:	1c53      	adds	r3, r2, #1
 8006054:	d007      	beq.n	8006066 <_strtol_l.isra.0+0x9a>
 8006056:	4586      	cmp	lr, r0
 8006058:	d316      	bcc.n	8006088 <_strtol_l.isra.0+0xbc>
 800605a:	d101      	bne.n	8006060 <_strtol_l.isra.0+0x94>
 800605c:	45a4      	cmp	ip, r4
 800605e:	db13      	blt.n	8006088 <_strtol_l.isra.0+0xbc>
 8006060:	fb00 4007 	mla	r0, r0, r7, r4
 8006064:	2201      	movs	r2, #1
 8006066:	f815 4b01 	ldrb.w	r4, [r5], #1
 800606a:	e7eb      	b.n	8006044 <_strtol_l.isra.0+0x78>
 800606c:	270a      	movs	r7, #10
 800606e:	e7dd      	b.n	800602c <_strtol_l.isra.0+0x60>
 8006070:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006074:	2b19      	cmp	r3, #25
 8006076:	d801      	bhi.n	800607c <_strtol_l.isra.0+0xb0>
 8006078:	3c37      	subs	r4, #55	; 0x37
 800607a:	e7e8      	b.n	800604e <_strtol_l.isra.0+0x82>
 800607c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006080:	2b19      	cmp	r3, #25
 8006082:	d804      	bhi.n	800608e <_strtol_l.isra.0+0xc2>
 8006084:	3c57      	subs	r4, #87	; 0x57
 8006086:	e7e2      	b.n	800604e <_strtol_l.isra.0+0x82>
 8006088:	f04f 32ff 	mov.w	r2, #4294967295
 800608c:	e7eb      	b.n	8006066 <_strtol_l.isra.0+0x9a>
 800608e:	1c53      	adds	r3, r2, #1
 8006090:	d108      	bne.n	80060a4 <_strtol_l.isra.0+0xd8>
 8006092:	2322      	movs	r3, #34	; 0x22
 8006094:	f8c8 3000 	str.w	r3, [r8]
 8006098:	4608      	mov	r0, r1
 800609a:	f1ba 0f00 	cmp.w	sl, #0
 800609e:	d107      	bne.n	80060b0 <_strtol_l.isra.0+0xe4>
 80060a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a4:	b106      	cbz	r6, 80060a8 <_strtol_l.isra.0+0xdc>
 80060a6:	4240      	negs	r0, r0
 80060a8:	f1ba 0f00 	cmp.w	sl, #0
 80060ac:	d00c      	beq.n	80060c8 <_strtol_l.isra.0+0xfc>
 80060ae:	b122      	cbz	r2, 80060ba <_strtol_l.isra.0+0xee>
 80060b0:	3d01      	subs	r5, #1
 80060b2:	f8ca 5000 	str.w	r5, [sl]
 80060b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ba:	464d      	mov	r5, r9
 80060bc:	e7f9      	b.n	80060b2 <_strtol_l.isra.0+0xe6>
 80060be:	2430      	movs	r4, #48	; 0x30
 80060c0:	2f00      	cmp	r7, #0
 80060c2:	d1b3      	bne.n	800602c <_strtol_l.isra.0+0x60>
 80060c4:	2708      	movs	r7, #8
 80060c6:	e7b1      	b.n	800602c <_strtol_l.isra.0+0x60>
 80060c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080060cc <strtol>:
 80060cc:	4b08      	ldr	r3, [pc, #32]	; (80060f0 <strtol+0x24>)
 80060ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060d0:	681c      	ldr	r4, [r3, #0]
 80060d2:	4d08      	ldr	r5, [pc, #32]	; (80060f4 <strtol+0x28>)
 80060d4:	6a23      	ldr	r3, [r4, #32]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	bf08      	it	eq
 80060da:	462b      	moveq	r3, r5
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	4613      	mov	r3, r2
 80060e0:	460a      	mov	r2, r1
 80060e2:	4601      	mov	r1, r0
 80060e4:	4620      	mov	r0, r4
 80060e6:	f7ff ff71 	bl	8005fcc <_strtol_l.isra.0>
 80060ea:	b003      	add	sp, #12
 80060ec:	bd30      	pop	{r4, r5, pc}
 80060ee:	bf00      	nop
 80060f0:	20000160 	.word	0x20000160
 80060f4:	200001c4 	.word	0x200001c4

080060f8 <print_e>:
 80060f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060fa:	b087      	sub	sp, #28
 80060fc:	ec43 2b10 	vmov	d0, r2, r3
 8006100:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006102:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8006106:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006108:	ab04      	add	r3, sp, #16
 800610a:	9301      	str	r3, [sp, #4]
 800610c:	ab03      	add	r3, sp, #12
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	460f      	mov	r7, r1
 8006112:	ab05      	add	r3, sp, #20
 8006114:	2102      	movs	r1, #2
 8006116:	1c62      	adds	r2, r4, #1
 8006118:	f000 fcde 	bl	8006ad8 <_dtoa_r>
 800611c:	4601      	mov	r1, r0
 800611e:	9805      	ldr	r0, [sp, #20]
 8006120:	f242 730f 	movw	r3, #9999	; 0x270f
 8006124:	4298      	cmp	r0, r3
 8006126:	d104      	bne.n	8006132 <print_e+0x3a>
 8006128:	4638      	mov	r0, r7
 800612a:	f000 fc33 	bl	8006994 <strcpy>
 800612e:	b007      	add	sp, #28
 8006130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006132:	780b      	ldrb	r3, [r1, #0]
 8006134:	703b      	strb	r3, [r7, #0]
 8006136:	b945      	cbnz	r5, 800614a <print_e+0x52>
 8006138:	b93c      	cbnz	r4, 800614a <print_e+0x52>
 800613a:	1c7b      	adds	r3, r7, #1
 800613c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006140:	b93a      	cbnz	r2, 8006152 <print_e+0x5a>
 8006142:	2e67      	cmp	r6, #103	; 0x67
 8006144:	d10b      	bne.n	800615e <print_e+0x66>
 8006146:	2665      	movs	r6, #101	; 0x65
 8006148:	e014      	b.n	8006174 <print_e+0x7c>
 800614a:	222e      	movs	r2, #46	; 0x2e
 800614c:	1cbb      	adds	r3, r7, #2
 800614e:	707a      	strb	r2, [r7, #1]
 8006150:	e7f4      	b.n	800613c <print_e+0x44>
 8006152:	2c00      	cmp	r4, #0
 8006154:	ddf5      	ble.n	8006142 <print_e+0x4a>
 8006156:	f803 2b01 	strb.w	r2, [r3], #1
 800615a:	3c01      	subs	r4, #1
 800615c:	e7ee      	b.n	800613c <print_e+0x44>
 800615e:	2e47      	cmp	r6, #71	; 0x47
 8006160:	d03c      	beq.n	80061dc <print_e+0xe4>
 8006162:	4619      	mov	r1, r3
 8006164:	2530      	movs	r5, #48	; 0x30
 8006166:	1a62      	subs	r2, r4, r1
 8006168:	441a      	add	r2, r3
 800616a:	2a00      	cmp	r2, #0
 800616c:	dc33      	bgt.n	80061d6 <print_e+0xde>
 800616e:	2c00      	cmp	r4, #0
 8006170:	bfa8      	it	ge
 8006172:	191b      	addge	r3, r3, r4
 8006174:	1e41      	subs	r1, r0, #1
 8006176:	2900      	cmp	r1, #0
 8006178:	bfb8      	it	lt
 800617a:	f1c0 0001 	rsblt	r0, r0, #1
 800617e:	461a      	mov	r2, r3
 8006180:	9105      	str	r1, [sp, #20]
 8006182:	bfac      	ite	ge
 8006184:	202b      	movge	r0, #43	; 0x2b
 8006186:	9005      	strlt	r0, [sp, #20]
 8006188:	f802 6b02 	strb.w	r6, [r2], #2
 800618c:	bfa8      	it	ge
 800618e:	7058      	strbge	r0, [r3, #1]
 8006190:	9805      	ldr	r0, [sp, #20]
 8006192:	bfbc      	itt	lt
 8006194:	242d      	movlt	r4, #45	; 0x2d
 8006196:	705c      	strblt	r4, [r3, #1]
 8006198:	2863      	cmp	r0, #99	; 0x63
 800619a:	4611      	mov	r1, r2
 800619c:	dd0b      	ble.n	80061b6 <print_e+0xbe>
 800619e:	2364      	movs	r3, #100	; 0x64
 80061a0:	fb90 f3f3 	sdiv	r3, r0, r3
 80061a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80061a8:	7011      	strb	r1, [r2, #0]
 80061aa:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80061ae:	fb01 0303 	mla	r3, r1, r3, r0
 80061b2:	9305      	str	r3, [sp, #20]
 80061b4:	1c51      	adds	r1, r2, #1
 80061b6:	9a05      	ldr	r2, [sp, #20]
 80061b8:	230a      	movs	r3, #10
 80061ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80061be:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80061c2:	7008      	strb	r0, [r1, #0]
 80061c4:	f06f 0009 	mvn.w	r0, #9
 80061c8:	fb00 2303 	mla	r3, r0, r3, r2
 80061cc:	3330      	adds	r3, #48	; 0x30
 80061ce:	704b      	strb	r3, [r1, #1]
 80061d0:	2300      	movs	r3, #0
 80061d2:	708b      	strb	r3, [r1, #2]
 80061d4:	e7ab      	b.n	800612e <print_e+0x36>
 80061d6:	f801 5b01 	strb.w	r5, [r1], #1
 80061da:	e7c4      	b.n	8006166 <print_e+0x6e>
 80061dc:	2645      	movs	r6, #69	; 0x45
 80061de:	e7c9      	b.n	8006174 <print_e+0x7c>

080061e0 <_gcvt>:
 80061e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e4:	ec55 4b10 	vmov	r4, r5, d0
 80061e8:	b088      	sub	sp, #32
 80061ea:	4681      	mov	r9, r0
 80061ec:	4688      	mov	r8, r1
 80061ee:	4616      	mov	r6, r2
 80061f0:	469a      	mov	sl, r3
 80061f2:	2200      	movs	r2, #0
 80061f4:	2300      	movs	r3, #0
 80061f6:	ee10 0a10 	vmov	r0, s0
 80061fa:	4629      	mov	r1, r5
 80061fc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80061fe:	f7fa fc19 	bl	8000a34 <__aeabi_dcmplt>
 8006202:	b110      	cbz	r0, 800620a <_gcvt+0x2a>
 8006204:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006208:	461d      	mov	r5, r3
 800620a:	2200      	movs	r2, #0
 800620c:	2300      	movs	r3, #0
 800620e:	4620      	mov	r0, r4
 8006210:	4629      	mov	r1, r5
 8006212:	f7fa fc05 	bl	8000a20 <__aeabi_dcmpeq>
 8006216:	b138      	cbz	r0, 8006228 <_gcvt+0x48>
 8006218:	2330      	movs	r3, #48	; 0x30
 800621a:	7033      	strb	r3, [r6, #0]
 800621c:	2300      	movs	r3, #0
 800621e:	7073      	strb	r3, [r6, #1]
 8006220:	4630      	mov	r0, r6
 8006222:	b008      	add	sp, #32
 8006224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006228:	a34e      	add	r3, pc, #312	; (adr r3, 8006364 <_gcvt+0x184>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	4620      	mov	r0, r4
 8006230:	4629      	mov	r1, r5
 8006232:	f7fa fc09 	bl	8000a48 <__aeabi_dcmple>
 8006236:	b160      	cbz	r0, 8006252 <_gcvt+0x72>
 8006238:	f108 33ff 	add.w	r3, r8, #4294967295
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	9702      	str	r7, [sp, #8]
 8006240:	f8cd a004 	str.w	sl, [sp, #4]
 8006244:	4622      	mov	r2, r4
 8006246:	462b      	mov	r3, r5
 8006248:	4631      	mov	r1, r6
 800624a:	4648      	mov	r0, r9
 800624c:	f7ff ff54 	bl	80060f8 <print_e>
 8006250:	e7e6      	b.n	8006220 <_gcvt+0x40>
 8006252:	4640      	mov	r0, r8
 8006254:	f000 fb72 	bl	800693c <_mprec_log10>
 8006258:	4620      	mov	r0, r4
 800625a:	ec53 2b10 	vmov	r2, r3, d0
 800625e:	4629      	mov	r1, r5
 8006260:	f7fa fbfc 	bl	8000a5c <__aeabi_dcmpge>
 8006264:	2800      	cmp	r0, #0
 8006266:	d1e7      	bne.n	8006238 <_gcvt+0x58>
 8006268:	2200      	movs	r2, #0
 800626a:	4b3d      	ldr	r3, [pc, #244]	; (8006360 <_gcvt+0x180>)
 800626c:	4620      	mov	r0, r4
 800626e:	4629      	mov	r1, r5
 8006270:	f7fa fbe0 	bl	8000a34 <__aeabi_dcmplt>
 8006274:	aa07      	add	r2, sp, #28
 8006276:	ab06      	add	r3, sp, #24
 8006278:	9201      	str	r2, [sp, #4]
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	4642      	mov	r2, r8
 800627e:	ab05      	add	r3, sp, #20
 8006280:	b1e0      	cbz	r0, 80062bc <_gcvt+0xdc>
 8006282:	2103      	movs	r1, #3
 8006284:	ec45 4b10 	vmov	d0, r4, r5
 8006288:	4648      	mov	r0, r9
 800628a:	f000 fc25 	bl	8006ad8 <_dtoa_r>
 800628e:	9a05      	ldr	r2, [sp, #20]
 8006290:	f242 730f 	movw	r3, #9999	; 0x270f
 8006294:	429a      	cmp	r2, r3
 8006296:	d013      	beq.n	80062c0 <_gcvt+0xe0>
 8006298:	4633      	mov	r3, r6
 800629a:	7801      	ldrb	r1, [r0, #0]
 800629c:	9d05      	ldr	r5, [sp, #20]
 800629e:	eba8 0203 	sub.w	r2, r8, r3
 80062a2:	4604      	mov	r4, r0
 80062a4:	4432      	add	r2, r6
 80062a6:	3001      	adds	r0, #1
 80062a8:	b9a1      	cbnz	r1, 80062d4 <_gcvt+0xf4>
 80062aa:	1aad      	subs	r5, r5, r2
 80062ac:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80062b0:	18a8      	adds	r0, r5, r2
 80062b2:	2800      	cmp	r0, #0
 80062b4:	dc37      	bgt.n	8006326 <_gcvt+0x146>
 80062b6:	b179      	cbz	r1, 80062d8 <_gcvt+0xf8>
 80062b8:	9005      	str	r0, [sp, #20]
 80062ba:	e00d      	b.n	80062d8 <_gcvt+0xf8>
 80062bc:	2102      	movs	r1, #2
 80062be:	e7e1      	b.n	8006284 <_gcvt+0xa4>
 80062c0:	4601      	mov	r1, r0
 80062c2:	4630      	mov	r0, r6
 80062c4:	f000 fb66 	bl	8006994 <strcpy>
 80062c8:	e7aa      	b.n	8006220 <_gcvt+0x40>
 80062ca:	3d01      	subs	r5, #1
 80062cc:	f803 1b01 	strb.w	r1, [r3], #1
 80062d0:	9505      	str	r5, [sp, #20]
 80062d2:	e7e2      	b.n	800629a <_gcvt+0xba>
 80062d4:	2d00      	cmp	r5, #0
 80062d6:	dcf8      	bgt.n	80062ca <_gcvt+0xea>
 80062d8:	b90f      	cbnz	r7, 80062de <_gcvt+0xfe>
 80062da:	7821      	ldrb	r1, [r4, #0]
 80062dc:	b301      	cbz	r1, 8006320 <_gcvt+0x140>
 80062de:	429e      	cmp	r6, r3
 80062e0:	bf02      	ittt	eq
 80062e2:	1c73      	addeq	r3, r6, #1
 80062e4:	2130      	moveq	r1, #48	; 0x30
 80062e6:	7031      	strbeq	r1, [r6, #0]
 80062e8:	212e      	movs	r1, #46	; 0x2e
 80062ea:	7019      	strb	r1, [r3, #0]
 80062ec:	9905      	ldr	r1, [sp, #20]
 80062ee:	3301      	adds	r3, #1
 80062f0:	2000      	movs	r0, #0
 80062f2:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80062f6:	2900      	cmp	r1, #0
 80062f8:	460d      	mov	r5, r1
 80062fa:	db20      	blt.n	800633e <_gcvt+0x15e>
 80062fc:	b100      	cbz	r0, 8006300 <_gcvt+0x120>
 80062fe:	9105      	str	r1, [sp, #20]
 8006300:	3c01      	subs	r4, #1
 8006302:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8006306:	b109      	cbz	r1, 800630c <_gcvt+0x12c>
 8006308:	2a00      	cmp	r2, #0
 800630a:	dc20      	bgt.n	800634e <_gcvt+0x16e>
 800630c:	b147      	cbz	r7, 8006320 <_gcvt+0x140>
 800630e:	4618      	mov	r0, r3
 8006310:	2430      	movs	r4, #48	; 0x30
 8006312:	1a11      	subs	r1, r2, r0
 8006314:	4419      	add	r1, r3
 8006316:	2900      	cmp	r1, #0
 8006318:	dc1d      	bgt.n	8006356 <_gcvt+0x176>
 800631a:	2a00      	cmp	r2, #0
 800631c:	bfa8      	it	ge
 800631e:	189b      	addge	r3, r3, r2
 8006320:	2200      	movs	r2, #0
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	e77c      	b.n	8006220 <_gcvt+0x40>
 8006326:	2a00      	cmp	r2, #0
 8006328:	ddc5      	ble.n	80062b6 <_gcvt+0xd6>
 800632a:	f803 eb01 	strb.w	lr, [r3], #1
 800632e:	3a01      	subs	r2, #1
 8006330:	2101      	movs	r1, #1
 8006332:	e7bd      	b.n	80062b0 <_gcvt+0xd0>
 8006334:	f803 eb01 	strb.w	lr, [r3], #1
 8006338:	3a01      	subs	r2, #1
 800633a:	2001      	movs	r0, #1
 800633c:	e7db      	b.n	80062f6 <_gcvt+0x116>
 800633e:	2a00      	cmp	r2, #0
 8006340:	f101 0101 	add.w	r1, r1, #1
 8006344:	dcf6      	bgt.n	8006334 <_gcvt+0x154>
 8006346:	2800      	cmp	r0, #0
 8006348:	d0da      	beq.n	8006300 <_gcvt+0x120>
 800634a:	9505      	str	r5, [sp, #20]
 800634c:	e7d8      	b.n	8006300 <_gcvt+0x120>
 800634e:	f803 1b01 	strb.w	r1, [r3], #1
 8006352:	3a01      	subs	r2, #1
 8006354:	e7d5      	b.n	8006302 <_gcvt+0x122>
 8006356:	f800 4b01 	strb.w	r4, [r0], #1
 800635a:	e7da      	b.n	8006312 <_gcvt+0x132>
 800635c:	f3af 8000 	nop.w
 8006360:	3ff00000 	.word	0x3ff00000
 8006364:	eb1c432d 	.word	0xeb1c432d
 8006368:	3f1a36e2 	.word	0x3f1a36e2

0800636c <__locale_ctype_ptr_l>:
 800636c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006370:	4770      	bx	lr

08006372 <__ascii_mbtowc>:
 8006372:	b082      	sub	sp, #8
 8006374:	b901      	cbnz	r1, 8006378 <__ascii_mbtowc+0x6>
 8006376:	a901      	add	r1, sp, #4
 8006378:	b142      	cbz	r2, 800638c <__ascii_mbtowc+0x1a>
 800637a:	b14b      	cbz	r3, 8006390 <__ascii_mbtowc+0x1e>
 800637c:	7813      	ldrb	r3, [r2, #0]
 800637e:	600b      	str	r3, [r1, #0]
 8006380:	7812      	ldrb	r2, [r2, #0]
 8006382:	1c10      	adds	r0, r2, #0
 8006384:	bf18      	it	ne
 8006386:	2001      	movne	r0, #1
 8006388:	b002      	add	sp, #8
 800638a:	4770      	bx	lr
 800638c:	4610      	mov	r0, r2
 800638e:	e7fb      	b.n	8006388 <__ascii_mbtowc+0x16>
 8006390:	f06f 0001 	mvn.w	r0, #1
 8006394:	e7f8      	b.n	8006388 <__ascii_mbtowc+0x16>

08006396 <__malloc_lock>:
 8006396:	4770      	bx	lr

08006398 <__malloc_unlock>:
 8006398:	4770      	bx	lr

0800639a <_Balloc>:
 800639a:	b570      	push	{r4, r5, r6, lr}
 800639c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800639e:	4604      	mov	r4, r0
 80063a0:	460e      	mov	r6, r1
 80063a2:	b93d      	cbnz	r5, 80063b4 <_Balloc+0x1a>
 80063a4:	2010      	movs	r0, #16
 80063a6:	f7ff fd31 	bl	8005e0c <malloc>
 80063aa:	6260      	str	r0, [r4, #36]	; 0x24
 80063ac:	6045      	str	r5, [r0, #4]
 80063ae:	6085      	str	r5, [r0, #8]
 80063b0:	6005      	str	r5, [r0, #0]
 80063b2:	60c5      	str	r5, [r0, #12]
 80063b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80063b6:	68eb      	ldr	r3, [r5, #12]
 80063b8:	b183      	cbz	r3, 80063dc <_Balloc+0x42>
 80063ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80063c2:	b9b8      	cbnz	r0, 80063f4 <_Balloc+0x5a>
 80063c4:	2101      	movs	r1, #1
 80063c6:	fa01 f506 	lsl.w	r5, r1, r6
 80063ca:	1d6a      	adds	r2, r5, #5
 80063cc:	0092      	lsls	r2, r2, #2
 80063ce:	4620      	mov	r0, r4
 80063d0:	f000 fad2 	bl	8006978 <_calloc_r>
 80063d4:	b160      	cbz	r0, 80063f0 <_Balloc+0x56>
 80063d6:	6046      	str	r6, [r0, #4]
 80063d8:	6085      	str	r5, [r0, #8]
 80063da:	e00e      	b.n	80063fa <_Balloc+0x60>
 80063dc:	2221      	movs	r2, #33	; 0x21
 80063de:	2104      	movs	r1, #4
 80063e0:	4620      	mov	r0, r4
 80063e2:	f000 fac9 	bl	8006978 <_calloc_r>
 80063e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063e8:	60e8      	str	r0, [r5, #12]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e4      	bne.n	80063ba <_Balloc+0x20>
 80063f0:	2000      	movs	r0, #0
 80063f2:	bd70      	pop	{r4, r5, r6, pc}
 80063f4:	6802      	ldr	r2, [r0, #0]
 80063f6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80063fa:	2300      	movs	r3, #0
 80063fc:	6103      	str	r3, [r0, #16]
 80063fe:	60c3      	str	r3, [r0, #12]
 8006400:	bd70      	pop	{r4, r5, r6, pc}

08006402 <_Bfree>:
 8006402:	b570      	push	{r4, r5, r6, lr}
 8006404:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006406:	4606      	mov	r6, r0
 8006408:	460d      	mov	r5, r1
 800640a:	b93c      	cbnz	r4, 800641c <_Bfree+0x1a>
 800640c:	2010      	movs	r0, #16
 800640e:	f7ff fcfd 	bl	8005e0c <malloc>
 8006412:	6270      	str	r0, [r6, #36]	; 0x24
 8006414:	6044      	str	r4, [r0, #4]
 8006416:	6084      	str	r4, [r0, #8]
 8006418:	6004      	str	r4, [r0, #0]
 800641a:	60c4      	str	r4, [r0, #12]
 800641c:	b13d      	cbz	r5, 800642e <_Bfree+0x2c>
 800641e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006420:	686a      	ldr	r2, [r5, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006428:	6029      	str	r1, [r5, #0]
 800642a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800642e:	bd70      	pop	{r4, r5, r6, pc}

08006430 <__multadd>:
 8006430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006434:	690d      	ldr	r5, [r1, #16]
 8006436:	461f      	mov	r7, r3
 8006438:	4606      	mov	r6, r0
 800643a:	460c      	mov	r4, r1
 800643c:	f101 0e14 	add.w	lr, r1, #20
 8006440:	2300      	movs	r3, #0
 8006442:	f8de 0000 	ldr.w	r0, [lr]
 8006446:	b281      	uxth	r1, r0
 8006448:	fb02 7101 	mla	r1, r2, r1, r7
 800644c:	0c0f      	lsrs	r7, r1, #16
 800644e:	0c00      	lsrs	r0, r0, #16
 8006450:	fb02 7000 	mla	r0, r2, r0, r7
 8006454:	b289      	uxth	r1, r1
 8006456:	3301      	adds	r3, #1
 8006458:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800645c:	429d      	cmp	r5, r3
 800645e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006462:	f84e 1b04 	str.w	r1, [lr], #4
 8006466:	dcec      	bgt.n	8006442 <__multadd+0x12>
 8006468:	b1d7      	cbz	r7, 80064a0 <__multadd+0x70>
 800646a:	68a3      	ldr	r3, [r4, #8]
 800646c:	429d      	cmp	r5, r3
 800646e:	db12      	blt.n	8006496 <__multadd+0x66>
 8006470:	6861      	ldr	r1, [r4, #4]
 8006472:	4630      	mov	r0, r6
 8006474:	3101      	adds	r1, #1
 8006476:	f7ff ff90 	bl	800639a <_Balloc>
 800647a:	6922      	ldr	r2, [r4, #16]
 800647c:	3202      	adds	r2, #2
 800647e:	f104 010c 	add.w	r1, r4, #12
 8006482:	4680      	mov	r8, r0
 8006484:	0092      	lsls	r2, r2, #2
 8006486:	300c      	adds	r0, #12
 8006488:	f7ff fcd0 	bl	8005e2c <memcpy>
 800648c:	4621      	mov	r1, r4
 800648e:	4630      	mov	r0, r6
 8006490:	f7ff ffb7 	bl	8006402 <_Bfree>
 8006494:	4644      	mov	r4, r8
 8006496:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800649a:	3501      	adds	r5, #1
 800649c:	615f      	str	r7, [r3, #20]
 800649e:	6125      	str	r5, [r4, #16]
 80064a0:	4620      	mov	r0, r4
 80064a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080064a6 <__hi0bits>:
 80064a6:	0c02      	lsrs	r2, r0, #16
 80064a8:	0412      	lsls	r2, r2, #16
 80064aa:	4603      	mov	r3, r0
 80064ac:	b9b2      	cbnz	r2, 80064dc <__hi0bits+0x36>
 80064ae:	0403      	lsls	r3, r0, #16
 80064b0:	2010      	movs	r0, #16
 80064b2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80064b6:	bf04      	itt	eq
 80064b8:	021b      	lsleq	r3, r3, #8
 80064ba:	3008      	addeq	r0, #8
 80064bc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80064c0:	bf04      	itt	eq
 80064c2:	011b      	lsleq	r3, r3, #4
 80064c4:	3004      	addeq	r0, #4
 80064c6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064ca:	bf04      	itt	eq
 80064cc:	009b      	lsleq	r3, r3, #2
 80064ce:	3002      	addeq	r0, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	db06      	blt.n	80064e2 <__hi0bits+0x3c>
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	d503      	bpl.n	80064e0 <__hi0bits+0x3a>
 80064d8:	3001      	adds	r0, #1
 80064da:	4770      	bx	lr
 80064dc:	2000      	movs	r0, #0
 80064de:	e7e8      	b.n	80064b2 <__hi0bits+0xc>
 80064e0:	2020      	movs	r0, #32
 80064e2:	4770      	bx	lr

080064e4 <__lo0bits>:
 80064e4:	6803      	ldr	r3, [r0, #0]
 80064e6:	f013 0207 	ands.w	r2, r3, #7
 80064ea:	4601      	mov	r1, r0
 80064ec:	d00b      	beq.n	8006506 <__lo0bits+0x22>
 80064ee:	07da      	lsls	r2, r3, #31
 80064f0:	d423      	bmi.n	800653a <__lo0bits+0x56>
 80064f2:	0798      	lsls	r0, r3, #30
 80064f4:	bf49      	itett	mi
 80064f6:	085b      	lsrmi	r3, r3, #1
 80064f8:	089b      	lsrpl	r3, r3, #2
 80064fa:	2001      	movmi	r0, #1
 80064fc:	600b      	strmi	r3, [r1, #0]
 80064fe:	bf5c      	itt	pl
 8006500:	600b      	strpl	r3, [r1, #0]
 8006502:	2002      	movpl	r0, #2
 8006504:	4770      	bx	lr
 8006506:	b298      	uxth	r0, r3
 8006508:	b9a8      	cbnz	r0, 8006536 <__lo0bits+0x52>
 800650a:	0c1b      	lsrs	r3, r3, #16
 800650c:	2010      	movs	r0, #16
 800650e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006512:	bf04      	itt	eq
 8006514:	0a1b      	lsreq	r3, r3, #8
 8006516:	3008      	addeq	r0, #8
 8006518:	071a      	lsls	r2, r3, #28
 800651a:	bf04      	itt	eq
 800651c:	091b      	lsreq	r3, r3, #4
 800651e:	3004      	addeq	r0, #4
 8006520:	079a      	lsls	r2, r3, #30
 8006522:	bf04      	itt	eq
 8006524:	089b      	lsreq	r3, r3, #2
 8006526:	3002      	addeq	r0, #2
 8006528:	07da      	lsls	r2, r3, #31
 800652a:	d402      	bmi.n	8006532 <__lo0bits+0x4e>
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	d006      	beq.n	800653e <__lo0bits+0x5a>
 8006530:	3001      	adds	r0, #1
 8006532:	600b      	str	r3, [r1, #0]
 8006534:	4770      	bx	lr
 8006536:	4610      	mov	r0, r2
 8006538:	e7e9      	b.n	800650e <__lo0bits+0x2a>
 800653a:	2000      	movs	r0, #0
 800653c:	4770      	bx	lr
 800653e:	2020      	movs	r0, #32
 8006540:	4770      	bx	lr

08006542 <__i2b>:
 8006542:	b510      	push	{r4, lr}
 8006544:	460c      	mov	r4, r1
 8006546:	2101      	movs	r1, #1
 8006548:	f7ff ff27 	bl	800639a <_Balloc>
 800654c:	2201      	movs	r2, #1
 800654e:	6144      	str	r4, [r0, #20]
 8006550:	6102      	str	r2, [r0, #16]
 8006552:	bd10      	pop	{r4, pc}

08006554 <__multiply>:
 8006554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006558:	4614      	mov	r4, r2
 800655a:	690a      	ldr	r2, [r1, #16]
 800655c:	6923      	ldr	r3, [r4, #16]
 800655e:	429a      	cmp	r2, r3
 8006560:	bfb8      	it	lt
 8006562:	460b      	movlt	r3, r1
 8006564:	4689      	mov	r9, r1
 8006566:	bfbc      	itt	lt
 8006568:	46a1      	movlt	r9, r4
 800656a:	461c      	movlt	r4, r3
 800656c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006570:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006574:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006578:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800657c:	eb07 060a 	add.w	r6, r7, sl
 8006580:	429e      	cmp	r6, r3
 8006582:	bfc8      	it	gt
 8006584:	3101      	addgt	r1, #1
 8006586:	f7ff ff08 	bl	800639a <_Balloc>
 800658a:	f100 0514 	add.w	r5, r0, #20
 800658e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006592:	462b      	mov	r3, r5
 8006594:	2200      	movs	r2, #0
 8006596:	4543      	cmp	r3, r8
 8006598:	d316      	bcc.n	80065c8 <__multiply+0x74>
 800659a:	f104 0214 	add.w	r2, r4, #20
 800659e:	f109 0114 	add.w	r1, r9, #20
 80065a2:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80065a6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80065aa:	9301      	str	r3, [sp, #4]
 80065ac:	9c01      	ldr	r4, [sp, #4]
 80065ae:	4294      	cmp	r4, r2
 80065b0:	4613      	mov	r3, r2
 80065b2:	d80c      	bhi.n	80065ce <__multiply+0x7a>
 80065b4:	2e00      	cmp	r6, #0
 80065b6:	dd03      	ble.n	80065c0 <__multiply+0x6c>
 80065b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d054      	beq.n	800666a <__multiply+0x116>
 80065c0:	6106      	str	r6, [r0, #16]
 80065c2:	b003      	add	sp, #12
 80065c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c8:	f843 2b04 	str.w	r2, [r3], #4
 80065cc:	e7e3      	b.n	8006596 <__multiply+0x42>
 80065ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80065d2:	3204      	adds	r2, #4
 80065d4:	f1ba 0f00 	cmp.w	sl, #0
 80065d8:	d020      	beq.n	800661c <__multiply+0xc8>
 80065da:	46ae      	mov	lr, r5
 80065dc:	4689      	mov	r9, r1
 80065de:	f04f 0c00 	mov.w	ip, #0
 80065e2:	f859 4b04 	ldr.w	r4, [r9], #4
 80065e6:	f8be b000 	ldrh.w	fp, [lr]
 80065ea:	b2a3      	uxth	r3, r4
 80065ec:	fb0a b303 	mla	r3, sl, r3, fp
 80065f0:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80065f4:	f8de 4000 	ldr.w	r4, [lr]
 80065f8:	4463      	add	r3, ip
 80065fa:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80065fe:	fb0a c40b 	mla	r4, sl, fp, ip
 8006602:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006606:	b29b      	uxth	r3, r3
 8006608:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800660c:	454f      	cmp	r7, r9
 800660e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006612:	f84e 3b04 	str.w	r3, [lr], #4
 8006616:	d8e4      	bhi.n	80065e2 <__multiply+0x8e>
 8006618:	f8ce c000 	str.w	ip, [lr]
 800661c:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8006620:	f1b9 0f00 	cmp.w	r9, #0
 8006624:	d01f      	beq.n	8006666 <__multiply+0x112>
 8006626:	682b      	ldr	r3, [r5, #0]
 8006628:	46ae      	mov	lr, r5
 800662a:	468c      	mov	ip, r1
 800662c:	f04f 0a00 	mov.w	sl, #0
 8006630:	f8bc 4000 	ldrh.w	r4, [ip]
 8006634:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006638:	fb09 b404 	mla	r4, r9, r4, fp
 800663c:	44a2      	add	sl, r4
 800663e:	b29b      	uxth	r3, r3
 8006640:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8006644:	f84e 3b04 	str.w	r3, [lr], #4
 8006648:	f85c 3b04 	ldr.w	r3, [ip], #4
 800664c:	f8be 4000 	ldrh.w	r4, [lr]
 8006650:	0c1b      	lsrs	r3, r3, #16
 8006652:	fb09 4303 	mla	r3, r9, r3, r4
 8006656:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800665a:	4567      	cmp	r7, ip
 800665c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006660:	d8e6      	bhi.n	8006630 <__multiply+0xdc>
 8006662:	f8ce 3000 	str.w	r3, [lr]
 8006666:	3504      	adds	r5, #4
 8006668:	e7a0      	b.n	80065ac <__multiply+0x58>
 800666a:	3e01      	subs	r6, #1
 800666c:	e7a2      	b.n	80065b4 <__multiply+0x60>
	...

08006670 <__pow5mult>:
 8006670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006674:	4615      	mov	r5, r2
 8006676:	f012 0203 	ands.w	r2, r2, #3
 800667a:	4606      	mov	r6, r0
 800667c:	460f      	mov	r7, r1
 800667e:	d007      	beq.n	8006690 <__pow5mult+0x20>
 8006680:	3a01      	subs	r2, #1
 8006682:	4c21      	ldr	r4, [pc, #132]	; (8006708 <__pow5mult+0x98>)
 8006684:	2300      	movs	r3, #0
 8006686:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800668a:	f7ff fed1 	bl	8006430 <__multadd>
 800668e:	4607      	mov	r7, r0
 8006690:	10ad      	asrs	r5, r5, #2
 8006692:	d035      	beq.n	8006700 <__pow5mult+0x90>
 8006694:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006696:	b93c      	cbnz	r4, 80066a8 <__pow5mult+0x38>
 8006698:	2010      	movs	r0, #16
 800669a:	f7ff fbb7 	bl	8005e0c <malloc>
 800669e:	6270      	str	r0, [r6, #36]	; 0x24
 80066a0:	6044      	str	r4, [r0, #4]
 80066a2:	6084      	str	r4, [r0, #8]
 80066a4:	6004      	str	r4, [r0, #0]
 80066a6:	60c4      	str	r4, [r0, #12]
 80066a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80066ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066b0:	b94c      	cbnz	r4, 80066c6 <__pow5mult+0x56>
 80066b2:	f240 2171 	movw	r1, #625	; 0x271
 80066b6:	4630      	mov	r0, r6
 80066b8:	f7ff ff43 	bl	8006542 <__i2b>
 80066bc:	2300      	movs	r3, #0
 80066be:	f8c8 0008 	str.w	r0, [r8, #8]
 80066c2:	4604      	mov	r4, r0
 80066c4:	6003      	str	r3, [r0, #0]
 80066c6:	f04f 0800 	mov.w	r8, #0
 80066ca:	07eb      	lsls	r3, r5, #31
 80066cc:	d50a      	bpl.n	80066e4 <__pow5mult+0x74>
 80066ce:	4639      	mov	r1, r7
 80066d0:	4622      	mov	r2, r4
 80066d2:	4630      	mov	r0, r6
 80066d4:	f7ff ff3e 	bl	8006554 <__multiply>
 80066d8:	4639      	mov	r1, r7
 80066da:	4681      	mov	r9, r0
 80066dc:	4630      	mov	r0, r6
 80066de:	f7ff fe90 	bl	8006402 <_Bfree>
 80066e2:	464f      	mov	r7, r9
 80066e4:	106d      	asrs	r5, r5, #1
 80066e6:	d00b      	beq.n	8006700 <__pow5mult+0x90>
 80066e8:	6820      	ldr	r0, [r4, #0]
 80066ea:	b938      	cbnz	r0, 80066fc <__pow5mult+0x8c>
 80066ec:	4622      	mov	r2, r4
 80066ee:	4621      	mov	r1, r4
 80066f0:	4630      	mov	r0, r6
 80066f2:	f7ff ff2f 	bl	8006554 <__multiply>
 80066f6:	6020      	str	r0, [r4, #0]
 80066f8:	f8c0 8000 	str.w	r8, [r0]
 80066fc:	4604      	mov	r4, r0
 80066fe:	e7e4      	b.n	80066ca <__pow5mult+0x5a>
 8006700:	4638      	mov	r0, r7
 8006702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006706:	bf00      	nop
 8006708:	080078e8 	.word	0x080078e8

0800670c <__lshift>:
 800670c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006710:	460c      	mov	r4, r1
 8006712:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006716:	6923      	ldr	r3, [r4, #16]
 8006718:	6849      	ldr	r1, [r1, #4]
 800671a:	eb0a 0903 	add.w	r9, sl, r3
 800671e:	68a3      	ldr	r3, [r4, #8]
 8006720:	4607      	mov	r7, r0
 8006722:	4616      	mov	r6, r2
 8006724:	f109 0501 	add.w	r5, r9, #1
 8006728:	42ab      	cmp	r3, r5
 800672a:	db31      	blt.n	8006790 <__lshift+0x84>
 800672c:	4638      	mov	r0, r7
 800672e:	f7ff fe34 	bl	800639a <_Balloc>
 8006732:	2200      	movs	r2, #0
 8006734:	4680      	mov	r8, r0
 8006736:	f100 0314 	add.w	r3, r0, #20
 800673a:	4611      	mov	r1, r2
 800673c:	4552      	cmp	r2, sl
 800673e:	db2a      	blt.n	8006796 <__lshift+0x8a>
 8006740:	6920      	ldr	r0, [r4, #16]
 8006742:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006746:	f104 0114 	add.w	r1, r4, #20
 800674a:	f016 021f 	ands.w	r2, r6, #31
 800674e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8006752:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8006756:	d022      	beq.n	800679e <__lshift+0x92>
 8006758:	f1c2 0c20 	rsb	ip, r2, #32
 800675c:	2000      	movs	r0, #0
 800675e:	680e      	ldr	r6, [r1, #0]
 8006760:	4096      	lsls	r6, r2
 8006762:	4330      	orrs	r0, r6
 8006764:	f843 0b04 	str.w	r0, [r3], #4
 8006768:	f851 0b04 	ldr.w	r0, [r1], #4
 800676c:	458e      	cmp	lr, r1
 800676e:	fa20 f00c 	lsr.w	r0, r0, ip
 8006772:	d8f4      	bhi.n	800675e <__lshift+0x52>
 8006774:	6018      	str	r0, [r3, #0]
 8006776:	b108      	cbz	r0, 800677c <__lshift+0x70>
 8006778:	f109 0502 	add.w	r5, r9, #2
 800677c:	3d01      	subs	r5, #1
 800677e:	4638      	mov	r0, r7
 8006780:	f8c8 5010 	str.w	r5, [r8, #16]
 8006784:	4621      	mov	r1, r4
 8006786:	f7ff fe3c 	bl	8006402 <_Bfree>
 800678a:	4640      	mov	r0, r8
 800678c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006790:	3101      	adds	r1, #1
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	e7c8      	b.n	8006728 <__lshift+0x1c>
 8006796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800679a:	3201      	adds	r2, #1
 800679c:	e7ce      	b.n	800673c <__lshift+0x30>
 800679e:	3b04      	subs	r3, #4
 80067a0:	f851 2b04 	ldr.w	r2, [r1], #4
 80067a4:	f843 2f04 	str.w	r2, [r3, #4]!
 80067a8:	458e      	cmp	lr, r1
 80067aa:	d8f9      	bhi.n	80067a0 <__lshift+0x94>
 80067ac:	e7e6      	b.n	800677c <__lshift+0x70>

080067ae <__mcmp>:
 80067ae:	6903      	ldr	r3, [r0, #16]
 80067b0:	690a      	ldr	r2, [r1, #16]
 80067b2:	1a9b      	subs	r3, r3, r2
 80067b4:	b530      	push	{r4, r5, lr}
 80067b6:	d10c      	bne.n	80067d2 <__mcmp+0x24>
 80067b8:	0092      	lsls	r2, r2, #2
 80067ba:	3014      	adds	r0, #20
 80067bc:	3114      	adds	r1, #20
 80067be:	1884      	adds	r4, r0, r2
 80067c0:	4411      	add	r1, r2
 80067c2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80067c6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80067ca:	4295      	cmp	r5, r2
 80067cc:	d003      	beq.n	80067d6 <__mcmp+0x28>
 80067ce:	d305      	bcc.n	80067dc <__mcmp+0x2e>
 80067d0:	2301      	movs	r3, #1
 80067d2:	4618      	mov	r0, r3
 80067d4:	bd30      	pop	{r4, r5, pc}
 80067d6:	42a0      	cmp	r0, r4
 80067d8:	d3f3      	bcc.n	80067c2 <__mcmp+0x14>
 80067da:	e7fa      	b.n	80067d2 <__mcmp+0x24>
 80067dc:	f04f 33ff 	mov.w	r3, #4294967295
 80067e0:	e7f7      	b.n	80067d2 <__mcmp+0x24>

080067e2 <__mdiff>:
 80067e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e6:	460d      	mov	r5, r1
 80067e8:	4607      	mov	r7, r0
 80067ea:	4611      	mov	r1, r2
 80067ec:	4628      	mov	r0, r5
 80067ee:	4614      	mov	r4, r2
 80067f0:	f7ff ffdd 	bl	80067ae <__mcmp>
 80067f4:	1e06      	subs	r6, r0, #0
 80067f6:	d108      	bne.n	800680a <__mdiff+0x28>
 80067f8:	4631      	mov	r1, r6
 80067fa:	4638      	mov	r0, r7
 80067fc:	f7ff fdcd 	bl	800639a <_Balloc>
 8006800:	2301      	movs	r3, #1
 8006802:	6103      	str	r3, [r0, #16]
 8006804:	6146      	str	r6, [r0, #20]
 8006806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680a:	bfa4      	itt	ge
 800680c:	4623      	movge	r3, r4
 800680e:	462c      	movge	r4, r5
 8006810:	4638      	mov	r0, r7
 8006812:	6861      	ldr	r1, [r4, #4]
 8006814:	bfa6      	itte	ge
 8006816:	461d      	movge	r5, r3
 8006818:	2600      	movge	r6, #0
 800681a:	2601      	movlt	r6, #1
 800681c:	f7ff fdbd 	bl	800639a <_Balloc>
 8006820:	692b      	ldr	r3, [r5, #16]
 8006822:	60c6      	str	r6, [r0, #12]
 8006824:	6926      	ldr	r6, [r4, #16]
 8006826:	f105 0914 	add.w	r9, r5, #20
 800682a:	f104 0214 	add.w	r2, r4, #20
 800682e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006832:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006836:	f100 0514 	add.w	r5, r0, #20
 800683a:	f04f 0c00 	mov.w	ip, #0
 800683e:	f852 ab04 	ldr.w	sl, [r2], #4
 8006842:	f859 4b04 	ldr.w	r4, [r9], #4
 8006846:	fa1c f18a 	uxtah	r1, ip, sl
 800684a:	b2a3      	uxth	r3, r4
 800684c:	1ac9      	subs	r1, r1, r3
 800684e:	0c23      	lsrs	r3, r4, #16
 8006850:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006854:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006858:	b289      	uxth	r1, r1
 800685a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800685e:	45c8      	cmp	r8, r9
 8006860:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006864:	4696      	mov	lr, r2
 8006866:	f845 3b04 	str.w	r3, [r5], #4
 800686a:	d8e8      	bhi.n	800683e <__mdiff+0x5c>
 800686c:	45be      	cmp	lr, r7
 800686e:	d305      	bcc.n	800687c <__mdiff+0x9a>
 8006870:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006874:	b18b      	cbz	r3, 800689a <__mdiff+0xb8>
 8006876:	6106      	str	r6, [r0, #16]
 8006878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687c:	f85e 1b04 	ldr.w	r1, [lr], #4
 8006880:	fa1c f381 	uxtah	r3, ip, r1
 8006884:	141a      	asrs	r2, r3, #16
 8006886:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800688a:	b29b      	uxth	r3, r3
 800688c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006890:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006894:	f845 3b04 	str.w	r3, [r5], #4
 8006898:	e7e8      	b.n	800686c <__mdiff+0x8a>
 800689a:	3e01      	subs	r6, #1
 800689c:	e7e8      	b.n	8006870 <__mdiff+0x8e>

0800689e <__d2b>:
 800689e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068a2:	460e      	mov	r6, r1
 80068a4:	2101      	movs	r1, #1
 80068a6:	ec59 8b10 	vmov	r8, r9, d0
 80068aa:	4615      	mov	r5, r2
 80068ac:	f7ff fd75 	bl	800639a <_Balloc>
 80068b0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80068b4:	4607      	mov	r7, r0
 80068b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068ba:	bb34      	cbnz	r4, 800690a <__d2b+0x6c>
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	f1b8 0f00 	cmp.w	r8, #0
 80068c2:	d027      	beq.n	8006914 <__d2b+0x76>
 80068c4:	a802      	add	r0, sp, #8
 80068c6:	f840 8d08 	str.w	r8, [r0, #-8]!
 80068ca:	f7ff fe0b 	bl	80064e4 <__lo0bits>
 80068ce:	9900      	ldr	r1, [sp, #0]
 80068d0:	b1f0      	cbz	r0, 8006910 <__d2b+0x72>
 80068d2:	9a01      	ldr	r2, [sp, #4]
 80068d4:	f1c0 0320 	rsb	r3, r0, #32
 80068d8:	fa02 f303 	lsl.w	r3, r2, r3
 80068dc:	430b      	orrs	r3, r1
 80068de:	40c2      	lsrs	r2, r0
 80068e0:	617b      	str	r3, [r7, #20]
 80068e2:	9201      	str	r2, [sp, #4]
 80068e4:	9b01      	ldr	r3, [sp, #4]
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	bf14      	ite	ne
 80068ec:	2102      	movne	r1, #2
 80068ee:	2101      	moveq	r1, #1
 80068f0:	6139      	str	r1, [r7, #16]
 80068f2:	b1c4      	cbz	r4, 8006926 <__d2b+0x88>
 80068f4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80068f8:	4404      	add	r4, r0
 80068fa:	6034      	str	r4, [r6, #0]
 80068fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006900:	6028      	str	r0, [r5, #0]
 8006902:	4638      	mov	r0, r7
 8006904:	b003      	add	sp, #12
 8006906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800690a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800690e:	e7d5      	b.n	80068bc <__d2b+0x1e>
 8006910:	6179      	str	r1, [r7, #20]
 8006912:	e7e7      	b.n	80068e4 <__d2b+0x46>
 8006914:	a801      	add	r0, sp, #4
 8006916:	f7ff fde5 	bl	80064e4 <__lo0bits>
 800691a:	9b01      	ldr	r3, [sp, #4]
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	2101      	movs	r1, #1
 8006920:	6139      	str	r1, [r7, #16]
 8006922:	3020      	adds	r0, #32
 8006924:	e7e5      	b.n	80068f2 <__d2b+0x54>
 8006926:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800692a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800692e:	6030      	str	r0, [r6, #0]
 8006930:	6918      	ldr	r0, [r3, #16]
 8006932:	f7ff fdb8 	bl	80064a6 <__hi0bits>
 8006936:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800693a:	e7e1      	b.n	8006900 <__d2b+0x62>

0800693c <_mprec_log10>:
 800693c:	2817      	cmp	r0, #23
 800693e:	b5d0      	push	{r4, r6, r7, lr}
 8006940:	4604      	mov	r4, r0
 8006942:	dc07      	bgt.n	8006954 <_mprec_log10+0x18>
 8006944:	4b09      	ldr	r3, [pc, #36]	; (800696c <_mprec_log10+0x30>)
 8006946:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800694a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800694e:	ec41 0b10 	vmov	d0, r0, r1
 8006952:	bdd0      	pop	{r4, r6, r7, pc}
 8006954:	4906      	ldr	r1, [pc, #24]	; (8006970 <_mprec_log10+0x34>)
 8006956:	4f07      	ldr	r7, [pc, #28]	; (8006974 <_mprec_log10+0x38>)
 8006958:	2000      	movs	r0, #0
 800695a:	2600      	movs	r6, #0
 800695c:	4632      	mov	r2, r6
 800695e:	463b      	mov	r3, r7
 8006960:	f7f9 fdf6 	bl	8000550 <__aeabi_dmul>
 8006964:	3c01      	subs	r4, #1
 8006966:	d1f9      	bne.n	800695c <_mprec_log10+0x20>
 8006968:	e7f1      	b.n	800694e <_mprec_log10+0x12>
 800696a:	bf00      	nop
 800696c:	08007820 	.word	0x08007820
 8006970:	3ff00000 	.word	0x3ff00000
 8006974:	40240000 	.word	0x40240000

08006978 <_calloc_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	fb02 f401 	mul.w	r4, r2, r1
 800697e:	4621      	mov	r1, r4
 8006980:	f7ff fab6 	bl	8005ef0 <_malloc_r>
 8006984:	4605      	mov	r5, r0
 8006986:	b118      	cbz	r0, 8006990 <_calloc_r+0x18>
 8006988:	4622      	mov	r2, r4
 800698a:	2100      	movs	r1, #0
 800698c:	f7ff fa59 	bl	8005e42 <memset>
 8006990:	4628      	mov	r0, r5
 8006992:	bd38      	pop	{r3, r4, r5, pc}

08006994 <strcpy>:
 8006994:	4603      	mov	r3, r0
 8006996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800699a:	f803 2b01 	strb.w	r2, [r3], #1
 800699e:	2a00      	cmp	r2, #0
 80069a0:	d1f9      	bne.n	8006996 <strcpy+0x2>
 80069a2:	4770      	bx	lr

080069a4 <__ascii_wctomb>:
 80069a4:	b149      	cbz	r1, 80069ba <__ascii_wctomb+0x16>
 80069a6:	2aff      	cmp	r2, #255	; 0xff
 80069a8:	bf85      	ittet	hi
 80069aa:	238a      	movhi	r3, #138	; 0x8a
 80069ac:	6003      	strhi	r3, [r0, #0]
 80069ae:	700a      	strbls	r2, [r1, #0]
 80069b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80069b4:	bf98      	it	ls
 80069b6:	2001      	movls	r0, #1
 80069b8:	4770      	bx	lr
 80069ba:	4608      	mov	r0, r1
 80069bc:	4770      	bx	lr

080069be <quorem>:
 80069be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c2:	6903      	ldr	r3, [r0, #16]
 80069c4:	690c      	ldr	r4, [r1, #16]
 80069c6:	429c      	cmp	r4, r3
 80069c8:	4680      	mov	r8, r0
 80069ca:	f300 8082 	bgt.w	8006ad2 <quorem+0x114>
 80069ce:	3c01      	subs	r4, #1
 80069d0:	f101 0714 	add.w	r7, r1, #20
 80069d4:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80069d8:	f100 0614 	add.w	r6, r0, #20
 80069dc:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80069e0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80069e4:	eb06 030e 	add.w	r3, r6, lr
 80069e8:	3501      	adds	r5, #1
 80069ea:	eb07 090e 	add.w	r9, r7, lr
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	fbb0 f5f5 	udiv	r5, r0, r5
 80069f4:	b395      	cbz	r5, 8006a5c <quorem+0x9e>
 80069f6:	f04f 0a00 	mov.w	sl, #0
 80069fa:	4638      	mov	r0, r7
 80069fc:	46b4      	mov	ip, r6
 80069fe:	46d3      	mov	fp, sl
 8006a00:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a04:	b293      	uxth	r3, r2
 8006a06:	fb05 a303 	mla	r3, r5, r3, sl
 8006a0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	ebab 0303 	sub.w	r3, fp, r3
 8006a14:	0c12      	lsrs	r2, r2, #16
 8006a16:	f8bc b000 	ldrh.w	fp, [ip]
 8006a1a:	fb05 a202 	mla	r2, r5, r2, sl
 8006a1e:	fa13 f38b 	uxtah	r3, r3, fp
 8006a22:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006a26:	fa1f fb82 	uxth.w	fp, r2
 8006a2a:	f8dc 2000 	ldr.w	r2, [ip]
 8006a2e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006a32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a3c:	4581      	cmp	r9, r0
 8006a3e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006a42:	f84c 3b04 	str.w	r3, [ip], #4
 8006a46:	d2db      	bcs.n	8006a00 <quorem+0x42>
 8006a48:	f856 300e 	ldr.w	r3, [r6, lr]
 8006a4c:	b933      	cbnz	r3, 8006a5c <quorem+0x9e>
 8006a4e:	9b01      	ldr	r3, [sp, #4]
 8006a50:	3b04      	subs	r3, #4
 8006a52:	429e      	cmp	r6, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	d330      	bcc.n	8006aba <quorem+0xfc>
 8006a58:	f8c8 4010 	str.w	r4, [r8, #16]
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	f7ff fea6 	bl	80067ae <__mcmp>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	db25      	blt.n	8006ab2 <quorem+0xf4>
 8006a66:	3501      	adds	r5, #1
 8006a68:	4630      	mov	r0, r6
 8006a6a:	f04f 0e00 	mov.w	lr, #0
 8006a6e:	f857 2b04 	ldr.w	r2, [r7], #4
 8006a72:	f8d0 c000 	ldr.w	ip, [r0]
 8006a76:	b293      	uxth	r3, r2
 8006a78:	ebae 0303 	sub.w	r3, lr, r3
 8006a7c:	0c12      	lsrs	r2, r2, #16
 8006a7e:	fa13 f38c 	uxtah	r3, r3, ip
 8006a82:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006a86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a90:	45b9      	cmp	r9, r7
 8006a92:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006a96:	f840 3b04 	str.w	r3, [r0], #4
 8006a9a:	d2e8      	bcs.n	8006a6e <quorem+0xb0>
 8006a9c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006aa0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006aa4:	b92a      	cbnz	r2, 8006ab2 <quorem+0xf4>
 8006aa6:	3b04      	subs	r3, #4
 8006aa8:	429e      	cmp	r6, r3
 8006aaa:	461a      	mov	r2, r3
 8006aac:	d30b      	bcc.n	8006ac6 <quorem+0x108>
 8006aae:	f8c8 4010 	str.w	r4, [r8, #16]
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	b003      	add	sp, #12
 8006ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aba:	6812      	ldr	r2, [r2, #0]
 8006abc:	3b04      	subs	r3, #4
 8006abe:	2a00      	cmp	r2, #0
 8006ac0:	d1ca      	bne.n	8006a58 <quorem+0x9a>
 8006ac2:	3c01      	subs	r4, #1
 8006ac4:	e7c5      	b.n	8006a52 <quorem+0x94>
 8006ac6:	6812      	ldr	r2, [r2, #0]
 8006ac8:	3b04      	subs	r3, #4
 8006aca:	2a00      	cmp	r2, #0
 8006acc:	d1ef      	bne.n	8006aae <quorem+0xf0>
 8006ace:	3c01      	subs	r4, #1
 8006ad0:	e7ea      	b.n	8006aa8 <quorem+0xea>
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	e7ee      	b.n	8006ab4 <quorem+0xf6>
	...

08006ad8 <_dtoa_r>:
 8006ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	ec57 6b10 	vmov	r6, r7, d0
 8006ae0:	b097      	sub	sp, #92	; 0x5c
 8006ae2:	e9cd 6700 	strd	r6, r7, [sp]
 8006ae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ae8:	9107      	str	r1, [sp, #28]
 8006aea:	4604      	mov	r4, r0
 8006aec:	920a      	str	r2, [sp, #40]	; 0x28
 8006aee:	930f      	str	r3, [sp, #60]	; 0x3c
 8006af0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006af2:	b93e      	cbnz	r6, 8006b04 <_dtoa_r+0x2c>
 8006af4:	2010      	movs	r0, #16
 8006af6:	f7ff f989 	bl	8005e0c <malloc>
 8006afa:	6260      	str	r0, [r4, #36]	; 0x24
 8006afc:	6046      	str	r6, [r0, #4]
 8006afe:	6086      	str	r6, [r0, #8]
 8006b00:	6006      	str	r6, [r0, #0]
 8006b02:	60c6      	str	r6, [r0, #12]
 8006b04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b06:	6819      	ldr	r1, [r3, #0]
 8006b08:	b151      	cbz	r1, 8006b20 <_dtoa_r+0x48>
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	604a      	str	r2, [r1, #4]
 8006b0e:	2301      	movs	r3, #1
 8006b10:	4093      	lsls	r3, r2
 8006b12:	608b      	str	r3, [r1, #8]
 8006b14:	4620      	mov	r0, r4
 8006b16:	f7ff fc74 	bl	8006402 <_Bfree>
 8006b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	9b01      	ldr	r3, [sp, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	bfbf      	itttt	lt
 8006b26:	2301      	movlt	r3, #1
 8006b28:	602b      	strlt	r3, [r5, #0]
 8006b2a:	9b01      	ldrlt	r3, [sp, #4]
 8006b2c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b30:	bfb2      	itee	lt
 8006b32:	9301      	strlt	r3, [sp, #4]
 8006b34:	2300      	movge	r3, #0
 8006b36:	602b      	strge	r3, [r5, #0]
 8006b38:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006b3c:	4ba8      	ldr	r3, [pc, #672]	; (8006de0 <_dtoa_r+0x308>)
 8006b3e:	ea33 0308 	bics.w	r3, r3, r8
 8006b42:	d11b      	bne.n	8006b7c <_dtoa_r+0xa4>
 8006b44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b46:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	9b00      	ldr	r3, [sp, #0]
 8006b4e:	b923      	cbnz	r3, 8006b5a <_dtoa_r+0x82>
 8006b50:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006b54:	2800      	cmp	r0, #0
 8006b56:	f000 8578 	beq.w	800764a <_dtoa_r+0xb72>
 8006b5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b5c:	b953      	cbnz	r3, 8006b74 <_dtoa_r+0x9c>
 8006b5e:	4ba1      	ldr	r3, [pc, #644]	; (8006de4 <_dtoa_r+0x30c>)
 8006b60:	e021      	b.n	8006ba6 <_dtoa_r+0xce>
 8006b62:	4ba1      	ldr	r3, [pc, #644]	; (8006de8 <_dtoa_r+0x310>)
 8006b64:	9302      	str	r3, [sp, #8]
 8006b66:	3308      	adds	r3, #8
 8006b68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	9802      	ldr	r0, [sp, #8]
 8006b6e:	b017      	add	sp, #92	; 0x5c
 8006b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b74:	4b9b      	ldr	r3, [pc, #620]	; (8006de4 <_dtoa_r+0x30c>)
 8006b76:	9302      	str	r3, [sp, #8]
 8006b78:	3303      	adds	r3, #3
 8006b7a:	e7f5      	b.n	8006b68 <_dtoa_r+0x90>
 8006b7c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006b80:	2200      	movs	r2, #0
 8006b82:	2300      	movs	r3, #0
 8006b84:	4630      	mov	r0, r6
 8006b86:	4639      	mov	r1, r7
 8006b88:	f7f9 ff4a 	bl	8000a20 <__aeabi_dcmpeq>
 8006b8c:	4681      	mov	r9, r0
 8006b8e:	b160      	cbz	r0, 8006baa <_dtoa_r+0xd2>
 8006b90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b92:	2301      	movs	r3, #1
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8553 	beq.w	8007644 <_dtoa_r+0xb6c>
 8006b9e:	4b93      	ldr	r3, [pc, #588]	; (8006dec <_dtoa_r+0x314>)
 8006ba0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	9302      	str	r3, [sp, #8]
 8006ba8:	e7e0      	b.n	8006b6c <_dtoa_r+0x94>
 8006baa:	aa14      	add	r2, sp, #80	; 0x50
 8006bac:	a915      	add	r1, sp, #84	; 0x54
 8006bae:	ec47 6b10 	vmov	d0, r6, r7
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f7ff fe73 	bl	800689e <__d2b>
 8006bb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006bbc:	4682      	mov	sl, r0
 8006bbe:	2d00      	cmp	r5, #0
 8006bc0:	d07e      	beq.n	8006cc0 <_dtoa_r+0x1e8>
 8006bc2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006bc6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006bd0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006bd4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8006bd8:	2200      	movs	r2, #0
 8006bda:	4b85      	ldr	r3, [pc, #532]	; (8006df0 <_dtoa_r+0x318>)
 8006bdc:	f7f9 fb04 	bl	80001e8 <__aeabi_dsub>
 8006be0:	a379      	add	r3, pc, #484	; (adr r3, 8006dc8 <_dtoa_r+0x2f0>)
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	f7f9 fcb3 	bl	8000550 <__aeabi_dmul>
 8006bea:	a379      	add	r3, pc, #484	; (adr r3, 8006dd0 <_dtoa_r+0x2f8>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f7f9 fafc 	bl	80001ec <__adddf3>
 8006bf4:	4606      	mov	r6, r0
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	460f      	mov	r7, r1
 8006bfa:	f7f9 fc43 	bl	8000484 <__aeabi_i2d>
 8006bfe:	a376      	add	r3, pc, #472	; (adr r3, 8006dd8 <_dtoa_r+0x300>)
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	f7f9 fca4 	bl	8000550 <__aeabi_dmul>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	4639      	mov	r1, r7
 8006c10:	f7f9 faec 	bl	80001ec <__adddf3>
 8006c14:	4606      	mov	r6, r0
 8006c16:	460f      	mov	r7, r1
 8006c18:	f7f9 ff34 	bl	8000a84 <__aeabi_d2iz>
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4683      	mov	fp, r0
 8006c20:	2300      	movs	r3, #0
 8006c22:	4630      	mov	r0, r6
 8006c24:	4639      	mov	r1, r7
 8006c26:	f7f9 ff05 	bl	8000a34 <__aeabi_dcmplt>
 8006c2a:	b158      	cbz	r0, 8006c44 <_dtoa_r+0x16c>
 8006c2c:	4658      	mov	r0, fp
 8006c2e:	f7f9 fc29 	bl	8000484 <__aeabi_i2d>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	4630      	mov	r0, r6
 8006c38:	4639      	mov	r1, r7
 8006c3a:	f7f9 fef1 	bl	8000a20 <__aeabi_dcmpeq>
 8006c3e:	b908      	cbnz	r0, 8006c44 <_dtoa_r+0x16c>
 8006c40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c44:	f1bb 0f16 	cmp.w	fp, #22
 8006c48:	d859      	bhi.n	8006cfe <_dtoa_r+0x226>
 8006c4a:	496a      	ldr	r1, [pc, #424]	; (8006df4 <_dtoa_r+0x31c>)
 8006c4c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c58:	f7f9 ff0a 	bl	8000a70 <__aeabi_dcmpgt>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d050      	beq.n	8006d02 <_dtoa_r+0x22a>
 8006c60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c64:	2300      	movs	r3, #0
 8006c66:	930e      	str	r3, [sp, #56]	; 0x38
 8006c68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c6a:	1b5d      	subs	r5, r3, r5
 8006c6c:	1e6b      	subs	r3, r5, #1
 8006c6e:	9306      	str	r3, [sp, #24]
 8006c70:	bf45      	ittet	mi
 8006c72:	f1c5 0301 	rsbmi	r3, r5, #1
 8006c76:	9305      	strmi	r3, [sp, #20]
 8006c78:	2300      	movpl	r3, #0
 8006c7a:	2300      	movmi	r3, #0
 8006c7c:	bf4c      	ite	mi
 8006c7e:	9306      	strmi	r3, [sp, #24]
 8006c80:	9305      	strpl	r3, [sp, #20]
 8006c82:	f1bb 0f00 	cmp.w	fp, #0
 8006c86:	db3e      	blt.n	8006d06 <_dtoa_r+0x22e>
 8006c88:	9b06      	ldr	r3, [sp, #24]
 8006c8a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006c8e:	445b      	add	r3, fp
 8006c90:	9306      	str	r3, [sp, #24]
 8006c92:	2300      	movs	r3, #0
 8006c94:	9308      	str	r3, [sp, #32]
 8006c96:	9b07      	ldr	r3, [sp, #28]
 8006c98:	2b09      	cmp	r3, #9
 8006c9a:	f200 80af 	bhi.w	8006dfc <_dtoa_r+0x324>
 8006c9e:	2b05      	cmp	r3, #5
 8006ca0:	bfc4      	itt	gt
 8006ca2:	3b04      	subgt	r3, #4
 8006ca4:	9307      	strgt	r3, [sp, #28]
 8006ca6:	9b07      	ldr	r3, [sp, #28]
 8006ca8:	f1a3 0302 	sub.w	r3, r3, #2
 8006cac:	bfcc      	ite	gt
 8006cae:	2600      	movgt	r6, #0
 8006cb0:	2601      	movle	r6, #1
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	f200 80ae 	bhi.w	8006e14 <_dtoa_r+0x33c>
 8006cb8:	e8df f003 	tbb	[pc, r3]
 8006cbc:	772f8482 	.word	0x772f8482
 8006cc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cc2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8006cc4:	441d      	add	r5, r3
 8006cc6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	dd11      	ble.n	8006cf2 <_dtoa_r+0x21a>
 8006cce:	9a00      	ldr	r2, [sp, #0]
 8006cd0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006cd4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006cd8:	fa22 f000 	lsr.w	r0, r2, r0
 8006cdc:	fa08 f303 	lsl.w	r3, r8, r3
 8006ce0:	4318      	orrs	r0, r3
 8006ce2:	f7f9 fbbf 	bl	8000464 <__aeabi_ui2d>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006cec:	3d01      	subs	r5, #1
 8006cee:	9312      	str	r3, [sp, #72]	; 0x48
 8006cf0:	e772      	b.n	8006bd8 <_dtoa_r+0x100>
 8006cf2:	f1c3 0020 	rsb	r0, r3, #32
 8006cf6:	9b00      	ldr	r3, [sp, #0]
 8006cf8:	fa03 f000 	lsl.w	r0, r3, r0
 8006cfc:	e7f1      	b.n	8006ce2 <_dtoa_r+0x20a>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e7b1      	b.n	8006c66 <_dtoa_r+0x18e>
 8006d02:	900e      	str	r0, [sp, #56]	; 0x38
 8006d04:	e7b0      	b.n	8006c68 <_dtoa_r+0x190>
 8006d06:	9b05      	ldr	r3, [sp, #20]
 8006d08:	eba3 030b 	sub.w	r3, r3, fp
 8006d0c:	9305      	str	r3, [sp, #20]
 8006d0e:	f1cb 0300 	rsb	r3, fp, #0
 8006d12:	9308      	str	r3, [sp, #32]
 8006d14:	2300      	movs	r3, #0
 8006d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d18:	e7bd      	b.n	8006c96 <_dtoa_r+0x1be>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	dd7a      	ble.n	8006e1a <_dtoa_r+0x342>
 8006d24:	9304      	str	r3, [sp, #16]
 8006d26:	9303      	str	r3, [sp, #12]
 8006d28:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	606a      	str	r2, [r5, #4]
 8006d2e:	2104      	movs	r1, #4
 8006d30:	f101 0214 	add.w	r2, r1, #20
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d975      	bls.n	8006e24 <_dtoa_r+0x34c>
 8006d38:	6869      	ldr	r1, [r5, #4]
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f7ff fb2d 	bl	800639a <_Balloc>
 8006d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d42:	6028      	str	r0, [r5, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	9302      	str	r3, [sp, #8]
 8006d48:	9b03      	ldr	r3, [sp, #12]
 8006d4a:	2b0e      	cmp	r3, #14
 8006d4c:	f200 80e5 	bhi.w	8006f1a <_dtoa_r+0x442>
 8006d50:	2e00      	cmp	r6, #0
 8006d52:	f000 80e2 	beq.w	8006f1a <_dtoa_r+0x442>
 8006d56:	ed9d 7b00 	vldr	d7, [sp]
 8006d5a:	f1bb 0f00 	cmp.w	fp, #0
 8006d5e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006d62:	dd74      	ble.n	8006e4e <_dtoa_r+0x376>
 8006d64:	4a23      	ldr	r2, [pc, #140]	; (8006df4 <_dtoa_r+0x31c>)
 8006d66:	f00b 030f 	and.w	r3, fp, #15
 8006d6a:	ea4f 162b 	mov.w	r6, fp, asr #4
 8006d6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d72:	06f0      	lsls	r0, r6, #27
 8006d74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d78:	d559      	bpl.n	8006e2e <_dtoa_r+0x356>
 8006d7a:	4b1f      	ldr	r3, [pc, #124]	; (8006df8 <_dtoa_r+0x320>)
 8006d7c:	ec51 0b17 	vmov	r0, r1, d7
 8006d80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d84:	f7f9 fd0e 	bl	80007a4 <__aeabi_ddiv>
 8006d88:	e9cd 0100 	strd	r0, r1, [sp]
 8006d8c:	f006 060f 	and.w	r6, r6, #15
 8006d90:	2503      	movs	r5, #3
 8006d92:	4f19      	ldr	r7, [pc, #100]	; (8006df8 <_dtoa_r+0x320>)
 8006d94:	2e00      	cmp	r6, #0
 8006d96:	d14c      	bne.n	8006e32 <_dtoa_r+0x35a>
 8006d98:	4642      	mov	r2, r8
 8006d9a:	464b      	mov	r3, r9
 8006d9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006da0:	f7f9 fd00 	bl	80007a4 <__aeabi_ddiv>
 8006da4:	e9cd 0100 	strd	r0, r1, [sp]
 8006da8:	e06a      	b.n	8006e80 <_dtoa_r+0x3a8>
 8006daa:	2301      	movs	r3, #1
 8006dac:	9309      	str	r3, [sp, #36]	; 0x24
 8006dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db0:	445b      	add	r3, fp
 8006db2:	9304      	str	r3, [sp, #16]
 8006db4:	3301      	adds	r3, #1
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	9303      	str	r3, [sp, #12]
 8006dba:	bfb8      	it	lt
 8006dbc:	2301      	movlt	r3, #1
 8006dbe:	e7b3      	b.n	8006d28 <_dtoa_r+0x250>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	e7ab      	b.n	8006d1c <_dtoa_r+0x244>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e7f1      	b.n	8006dac <_dtoa_r+0x2d4>
 8006dc8:	636f4361 	.word	0x636f4361
 8006dcc:	3fd287a7 	.word	0x3fd287a7
 8006dd0:	8b60c8b3 	.word	0x8b60c8b3
 8006dd4:	3fc68a28 	.word	0x3fc68a28
 8006dd8:	509f79fb 	.word	0x509f79fb
 8006ddc:	3fd34413 	.word	0x3fd34413
 8006de0:	7ff00000 	.word	0x7ff00000
 8006de4:	080079fe 	.word	0x080079fe
 8006de8:	080079f5 	.word	0x080079f5
 8006dec:	08007a03 	.word	0x08007a03
 8006df0:	3ff80000 	.word	0x3ff80000
 8006df4:	08007820 	.word	0x08007820
 8006df8:	080077f8 	.word	0x080077f8
 8006dfc:	2601      	movs	r6, #1
 8006dfe:	2300      	movs	r3, #0
 8006e00:	9307      	str	r3, [sp, #28]
 8006e02:	9609      	str	r6, [sp, #36]	; 0x24
 8006e04:	f04f 33ff 	mov.w	r3, #4294967295
 8006e08:	9304      	str	r3, [sp, #16]
 8006e0a:	9303      	str	r3, [sp, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2312      	movs	r3, #18
 8006e10:	920a      	str	r2, [sp, #40]	; 0x28
 8006e12:	e789      	b.n	8006d28 <_dtoa_r+0x250>
 8006e14:	2301      	movs	r3, #1
 8006e16:	9309      	str	r3, [sp, #36]	; 0x24
 8006e18:	e7f4      	b.n	8006e04 <_dtoa_r+0x32c>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	9304      	str	r3, [sp, #16]
 8006e1e:	9303      	str	r3, [sp, #12]
 8006e20:	461a      	mov	r2, r3
 8006e22:	e7f5      	b.n	8006e10 <_dtoa_r+0x338>
 8006e24:	686a      	ldr	r2, [r5, #4]
 8006e26:	3201      	adds	r2, #1
 8006e28:	606a      	str	r2, [r5, #4]
 8006e2a:	0049      	lsls	r1, r1, #1
 8006e2c:	e780      	b.n	8006d30 <_dtoa_r+0x258>
 8006e2e:	2502      	movs	r5, #2
 8006e30:	e7af      	b.n	8006d92 <_dtoa_r+0x2ba>
 8006e32:	07f1      	lsls	r1, r6, #31
 8006e34:	d508      	bpl.n	8006e48 <_dtoa_r+0x370>
 8006e36:	4640      	mov	r0, r8
 8006e38:	4649      	mov	r1, r9
 8006e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e3e:	f7f9 fb87 	bl	8000550 <__aeabi_dmul>
 8006e42:	3501      	adds	r5, #1
 8006e44:	4680      	mov	r8, r0
 8006e46:	4689      	mov	r9, r1
 8006e48:	1076      	asrs	r6, r6, #1
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	e7a2      	b.n	8006d94 <_dtoa_r+0x2bc>
 8006e4e:	f000 809d 	beq.w	8006f8c <_dtoa_r+0x4b4>
 8006e52:	f1cb 0600 	rsb	r6, fp, #0
 8006e56:	4b9f      	ldr	r3, [pc, #636]	; (80070d4 <_dtoa_r+0x5fc>)
 8006e58:	4f9f      	ldr	r7, [pc, #636]	; (80070d8 <_dtoa_r+0x600>)
 8006e5a:	f006 020f 	and.w	r2, r6, #15
 8006e5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e6a:	f7f9 fb71 	bl	8000550 <__aeabi_dmul>
 8006e6e:	e9cd 0100 	strd	r0, r1, [sp]
 8006e72:	1136      	asrs	r6, r6, #4
 8006e74:	2300      	movs	r3, #0
 8006e76:	2502      	movs	r5, #2
 8006e78:	2e00      	cmp	r6, #0
 8006e7a:	d17c      	bne.n	8006f76 <_dtoa_r+0x49e>
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d191      	bne.n	8006da4 <_dtoa_r+0x2cc>
 8006e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 8084 	beq.w	8006f90 <_dtoa_r+0x4b8>
 8006e88:	e9dd 8900 	ldrd	r8, r9, [sp]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	4b93      	ldr	r3, [pc, #588]	; (80070dc <_dtoa_r+0x604>)
 8006e90:	4640      	mov	r0, r8
 8006e92:	4649      	mov	r1, r9
 8006e94:	f7f9 fdce 	bl	8000a34 <__aeabi_dcmplt>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d079      	beq.n	8006f90 <_dtoa_r+0x4b8>
 8006e9c:	9b03      	ldr	r3, [sp, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d076      	beq.n	8006f90 <_dtoa_r+0x4b8>
 8006ea2:	9b04      	ldr	r3, [sp, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dd34      	ble.n	8006f12 <_dtoa_r+0x43a>
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4b8d      	ldr	r3, [pc, #564]	; (80070e0 <_dtoa_r+0x608>)
 8006eac:	4640      	mov	r0, r8
 8006eae:	4649      	mov	r1, r9
 8006eb0:	f7f9 fb4e 	bl	8000550 <__aeabi_dmul>
 8006eb4:	e9cd 0100 	strd	r0, r1, [sp]
 8006eb8:	9e04      	ldr	r6, [sp, #16]
 8006eba:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006ebe:	3501      	adds	r5, #1
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	f7f9 fadf 	bl	8000484 <__aeabi_i2d>
 8006ec6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eca:	f7f9 fb41 	bl	8000550 <__aeabi_dmul>
 8006ece:	2200      	movs	r2, #0
 8006ed0:	4b84      	ldr	r3, [pc, #528]	; (80070e4 <_dtoa_r+0x60c>)
 8006ed2:	f7f9 f98b 	bl	80001ec <__adddf3>
 8006ed6:	4680      	mov	r8, r0
 8006ed8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8006edc:	2e00      	cmp	r6, #0
 8006ede:	d15a      	bne.n	8006f96 <_dtoa_r+0x4be>
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	4b81      	ldr	r3, [pc, #516]	; (80070e8 <_dtoa_r+0x610>)
 8006ee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ee8:	f7f9 f97e 	bl	80001e8 <__aeabi_dsub>
 8006eec:	4642      	mov	r2, r8
 8006eee:	464b      	mov	r3, r9
 8006ef0:	e9cd 0100 	strd	r0, r1, [sp]
 8006ef4:	f7f9 fdbc 	bl	8000a70 <__aeabi_dcmpgt>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	f040 829b 	bne.w	8007434 <_dtoa_r+0x95c>
 8006efe:	4642      	mov	r2, r8
 8006f00:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006f04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f08:	f7f9 fd94 	bl	8000a34 <__aeabi_dcmplt>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	f040 828f 	bne.w	8007430 <_dtoa_r+0x958>
 8006f12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f16:	e9cd 2300 	strd	r2, r3, [sp]
 8006f1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f2c0 8150 	blt.w	80071c2 <_dtoa_r+0x6ea>
 8006f22:	f1bb 0f0e 	cmp.w	fp, #14
 8006f26:	f300 814c 	bgt.w	80071c2 <_dtoa_r+0x6ea>
 8006f2a:	4b6a      	ldr	r3, [pc, #424]	; (80070d4 <_dtoa_r+0x5fc>)
 8006f2c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006f30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f280 80da 	bge.w	80070f0 <_dtoa_r+0x618>
 8006f3c:	9b03      	ldr	r3, [sp, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f300 80d6 	bgt.w	80070f0 <_dtoa_r+0x618>
 8006f44:	f040 8273 	bne.w	800742e <_dtoa_r+0x956>
 8006f48:	2200      	movs	r2, #0
 8006f4a:	4b67      	ldr	r3, [pc, #412]	; (80070e8 <_dtoa_r+0x610>)
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	4649      	mov	r1, r9
 8006f50:	f7f9 fafe 	bl	8000550 <__aeabi_dmul>
 8006f54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f58:	f7f9 fd80 	bl	8000a5c <__aeabi_dcmpge>
 8006f5c:	9e03      	ldr	r6, [sp, #12]
 8006f5e:	4637      	mov	r7, r6
 8006f60:	2800      	cmp	r0, #0
 8006f62:	f040 824a 	bne.w	80073fa <_dtoa_r+0x922>
 8006f66:	9b02      	ldr	r3, [sp, #8]
 8006f68:	9a02      	ldr	r2, [sp, #8]
 8006f6a:	1c5d      	adds	r5, r3, #1
 8006f6c:	2331      	movs	r3, #49	; 0x31
 8006f6e:	7013      	strb	r3, [r2, #0]
 8006f70:	f10b 0b01 	add.w	fp, fp, #1
 8006f74:	e245      	b.n	8007402 <_dtoa_r+0x92a>
 8006f76:	07f2      	lsls	r2, r6, #31
 8006f78:	d505      	bpl.n	8006f86 <_dtoa_r+0x4ae>
 8006f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f7e:	f7f9 fae7 	bl	8000550 <__aeabi_dmul>
 8006f82:	3501      	adds	r5, #1
 8006f84:	2301      	movs	r3, #1
 8006f86:	1076      	asrs	r6, r6, #1
 8006f88:	3708      	adds	r7, #8
 8006f8a:	e775      	b.n	8006e78 <_dtoa_r+0x3a0>
 8006f8c:	2502      	movs	r5, #2
 8006f8e:	e777      	b.n	8006e80 <_dtoa_r+0x3a8>
 8006f90:	465f      	mov	r7, fp
 8006f92:	9e03      	ldr	r6, [sp, #12]
 8006f94:	e794      	b.n	8006ec0 <_dtoa_r+0x3e8>
 8006f96:	9a02      	ldr	r2, [sp, #8]
 8006f98:	4b4e      	ldr	r3, [pc, #312]	; (80070d4 <_dtoa_r+0x5fc>)
 8006f9a:	4432      	add	r2, r6
 8006f9c:	9213      	str	r2, [sp, #76]	; 0x4c
 8006f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fa0:	1e71      	subs	r1, r6, #1
 8006fa2:	2a00      	cmp	r2, #0
 8006fa4:	d048      	beq.n	8007038 <_dtoa_r+0x560>
 8006fa6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	2000      	movs	r0, #0
 8006fb0:	494e      	ldr	r1, [pc, #312]	; (80070ec <_dtoa_r+0x614>)
 8006fb2:	f7f9 fbf7 	bl	80007a4 <__aeabi_ddiv>
 8006fb6:	4642      	mov	r2, r8
 8006fb8:	464b      	mov	r3, r9
 8006fba:	f7f9 f915 	bl	80001e8 <__aeabi_dsub>
 8006fbe:	9d02      	ldr	r5, [sp, #8]
 8006fc0:	4680      	mov	r8, r0
 8006fc2:	4689      	mov	r9, r1
 8006fc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fc8:	f7f9 fd5c 	bl	8000a84 <__aeabi_d2iz>
 8006fcc:	4606      	mov	r6, r0
 8006fce:	f7f9 fa59 	bl	8000484 <__aeabi_i2d>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fda:	f7f9 f905 	bl	80001e8 <__aeabi_dsub>
 8006fde:	3630      	adds	r6, #48	; 0x30
 8006fe0:	f805 6b01 	strb.w	r6, [r5], #1
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	e9cd 0100 	strd	r0, r1, [sp]
 8006fec:	f7f9 fd22 	bl	8000a34 <__aeabi_dcmplt>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d165      	bne.n	80070c0 <_dtoa_r+0x5e8>
 8006ff4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	4938      	ldr	r1, [pc, #224]	; (80070dc <_dtoa_r+0x604>)
 8006ffc:	f7f9 f8f4 	bl	80001e8 <__aeabi_dsub>
 8007000:	4642      	mov	r2, r8
 8007002:	464b      	mov	r3, r9
 8007004:	f7f9 fd16 	bl	8000a34 <__aeabi_dcmplt>
 8007008:	2800      	cmp	r0, #0
 800700a:	f040 80ba 	bne.w	8007182 <_dtoa_r+0x6aa>
 800700e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007010:	429d      	cmp	r5, r3
 8007012:	f43f af7e 	beq.w	8006f12 <_dtoa_r+0x43a>
 8007016:	2200      	movs	r2, #0
 8007018:	4b31      	ldr	r3, [pc, #196]	; (80070e0 <_dtoa_r+0x608>)
 800701a:	4640      	mov	r0, r8
 800701c:	4649      	mov	r1, r9
 800701e:	f7f9 fa97 	bl	8000550 <__aeabi_dmul>
 8007022:	2200      	movs	r2, #0
 8007024:	4680      	mov	r8, r0
 8007026:	4689      	mov	r9, r1
 8007028:	4b2d      	ldr	r3, [pc, #180]	; (80070e0 <_dtoa_r+0x608>)
 800702a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800702e:	f7f9 fa8f 	bl	8000550 <__aeabi_dmul>
 8007032:	e9cd 0100 	strd	r0, r1, [sp]
 8007036:	e7c5      	b.n	8006fc4 <_dtoa_r+0x4ec>
 8007038:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800703c:	4642      	mov	r2, r8
 800703e:	464b      	mov	r3, r9
 8007040:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007044:	f7f9 fa84 	bl	8000550 <__aeabi_dmul>
 8007048:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800704c:	9d02      	ldr	r5, [sp, #8]
 800704e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007052:	f7f9 fd17 	bl	8000a84 <__aeabi_d2iz>
 8007056:	4606      	mov	r6, r0
 8007058:	f7f9 fa14 	bl	8000484 <__aeabi_i2d>
 800705c:	3630      	adds	r6, #48	; 0x30
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007066:	f7f9 f8bf 	bl	80001e8 <__aeabi_dsub>
 800706a:	f805 6b01 	strb.w	r6, [r5], #1
 800706e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007070:	42ab      	cmp	r3, r5
 8007072:	4680      	mov	r8, r0
 8007074:	4689      	mov	r9, r1
 8007076:	f04f 0200 	mov.w	r2, #0
 800707a:	d125      	bne.n	80070c8 <_dtoa_r+0x5f0>
 800707c:	4b1b      	ldr	r3, [pc, #108]	; (80070ec <_dtoa_r+0x614>)
 800707e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007082:	f7f9 f8b3 	bl	80001ec <__adddf3>
 8007086:	4602      	mov	r2, r0
 8007088:	460b      	mov	r3, r1
 800708a:	4640      	mov	r0, r8
 800708c:	4649      	mov	r1, r9
 800708e:	f7f9 fcef 	bl	8000a70 <__aeabi_dcmpgt>
 8007092:	2800      	cmp	r0, #0
 8007094:	d175      	bne.n	8007182 <_dtoa_r+0x6aa>
 8007096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800709a:	2000      	movs	r0, #0
 800709c:	4913      	ldr	r1, [pc, #76]	; (80070ec <_dtoa_r+0x614>)
 800709e:	f7f9 f8a3 	bl	80001e8 <__aeabi_dsub>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4640      	mov	r0, r8
 80070a8:	4649      	mov	r1, r9
 80070aa:	f7f9 fcc3 	bl	8000a34 <__aeabi_dcmplt>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	f43f af2f 	beq.w	8006f12 <_dtoa_r+0x43a>
 80070b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070b8:	2b30      	cmp	r3, #48	; 0x30
 80070ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80070be:	d001      	beq.n	80070c4 <_dtoa_r+0x5ec>
 80070c0:	46bb      	mov	fp, r7
 80070c2:	e04d      	b.n	8007160 <_dtoa_r+0x688>
 80070c4:	4615      	mov	r5, r2
 80070c6:	e7f5      	b.n	80070b4 <_dtoa_r+0x5dc>
 80070c8:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <_dtoa_r+0x608>)
 80070ca:	f7f9 fa41 	bl	8000550 <__aeabi_dmul>
 80070ce:	e9cd 0100 	strd	r0, r1, [sp]
 80070d2:	e7bc      	b.n	800704e <_dtoa_r+0x576>
 80070d4:	08007820 	.word	0x08007820
 80070d8:	080077f8 	.word	0x080077f8
 80070dc:	3ff00000 	.word	0x3ff00000
 80070e0:	40240000 	.word	0x40240000
 80070e4:	401c0000 	.word	0x401c0000
 80070e8:	40140000 	.word	0x40140000
 80070ec:	3fe00000 	.word	0x3fe00000
 80070f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80070f4:	9d02      	ldr	r5, [sp, #8]
 80070f6:	4642      	mov	r2, r8
 80070f8:	464b      	mov	r3, r9
 80070fa:	4630      	mov	r0, r6
 80070fc:	4639      	mov	r1, r7
 80070fe:	f7f9 fb51 	bl	80007a4 <__aeabi_ddiv>
 8007102:	f7f9 fcbf 	bl	8000a84 <__aeabi_d2iz>
 8007106:	9000      	str	r0, [sp, #0]
 8007108:	f7f9 f9bc 	bl	8000484 <__aeabi_i2d>
 800710c:	4642      	mov	r2, r8
 800710e:	464b      	mov	r3, r9
 8007110:	f7f9 fa1e 	bl	8000550 <__aeabi_dmul>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4630      	mov	r0, r6
 800711a:	4639      	mov	r1, r7
 800711c:	f7f9 f864 	bl	80001e8 <__aeabi_dsub>
 8007120:	9e00      	ldr	r6, [sp, #0]
 8007122:	9f03      	ldr	r7, [sp, #12]
 8007124:	3630      	adds	r6, #48	; 0x30
 8007126:	f805 6b01 	strb.w	r6, [r5], #1
 800712a:	9e02      	ldr	r6, [sp, #8]
 800712c:	1bae      	subs	r6, r5, r6
 800712e:	42b7      	cmp	r7, r6
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	d138      	bne.n	80071a8 <_dtoa_r+0x6d0>
 8007136:	f7f9 f859 	bl	80001ec <__adddf3>
 800713a:	4606      	mov	r6, r0
 800713c:	460f      	mov	r7, r1
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	4640      	mov	r0, r8
 8007144:	4649      	mov	r1, r9
 8007146:	f7f9 fc75 	bl	8000a34 <__aeabi_dcmplt>
 800714a:	b9c8      	cbnz	r0, 8007180 <_dtoa_r+0x6a8>
 800714c:	4632      	mov	r2, r6
 800714e:	463b      	mov	r3, r7
 8007150:	4640      	mov	r0, r8
 8007152:	4649      	mov	r1, r9
 8007154:	f7f9 fc64 	bl	8000a20 <__aeabi_dcmpeq>
 8007158:	b110      	cbz	r0, 8007160 <_dtoa_r+0x688>
 800715a:	9b00      	ldr	r3, [sp, #0]
 800715c:	07db      	lsls	r3, r3, #31
 800715e:	d40f      	bmi.n	8007180 <_dtoa_r+0x6a8>
 8007160:	4651      	mov	r1, sl
 8007162:	4620      	mov	r0, r4
 8007164:	f7ff f94d 	bl	8006402 <_Bfree>
 8007168:	2300      	movs	r3, #0
 800716a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800716c:	702b      	strb	r3, [r5, #0]
 800716e:	f10b 0301 	add.w	r3, fp, #1
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007176:	2b00      	cmp	r3, #0
 8007178:	f43f acf8 	beq.w	8006b6c <_dtoa_r+0x94>
 800717c:	601d      	str	r5, [r3, #0]
 800717e:	e4f5      	b.n	8006b6c <_dtoa_r+0x94>
 8007180:	465f      	mov	r7, fp
 8007182:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007186:	2a39      	cmp	r2, #57	; 0x39
 8007188:	f105 33ff 	add.w	r3, r5, #4294967295
 800718c:	d106      	bne.n	800719c <_dtoa_r+0x6c4>
 800718e:	9a02      	ldr	r2, [sp, #8]
 8007190:	429a      	cmp	r2, r3
 8007192:	d107      	bne.n	80071a4 <_dtoa_r+0x6cc>
 8007194:	2330      	movs	r3, #48	; 0x30
 8007196:	7013      	strb	r3, [r2, #0]
 8007198:	3701      	adds	r7, #1
 800719a:	4613      	mov	r3, r2
 800719c:	781a      	ldrb	r2, [r3, #0]
 800719e:	3201      	adds	r2, #1
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	e78d      	b.n	80070c0 <_dtoa_r+0x5e8>
 80071a4:	461d      	mov	r5, r3
 80071a6:	e7ec      	b.n	8007182 <_dtoa_r+0x6aa>
 80071a8:	2200      	movs	r2, #0
 80071aa:	4ba4      	ldr	r3, [pc, #656]	; (800743c <_dtoa_r+0x964>)
 80071ac:	f7f9 f9d0 	bl	8000550 <__aeabi_dmul>
 80071b0:	2200      	movs	r2, #0
 80071b2:	2300      	movs	r3, #0
 80071b4:	4606      	mov	r6, r0
 80071b6:	460f      	mov	r7, r1
 80071b8:	f7f9 fc32 	bl	8000a20 <__aeabi_dcmpeq>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d09a      	beq.n	80070f6 <_dtoa_r+0x61e>
 80071c0:	e7ce      	b.n	8007160 <_dtoa_r+0x688>
 80071c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071c4:	2a00      	cmp	r2, #0
 80071c6:	f000 80cd 	beq.w	8007364 <_dtoa_r+0x88c>
 80071ca:	9a07      	ldr	r2, [sp, #28]
 80071cc:	2a01      	cmp	r2, #1
 80071ce:	f300 80af 	bgt.w	8007330 <_dtoa_r+0x858>
 80071d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071d4:	2a00      	cmp	r2, #0
 80071d6:	f000 80a7 	beq.w	8007328 <_dtoa_r+0x850>
 80071da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80071de:	9e08      	ldr	r6, [sp, #32]
 80071e0:	9d05      	ldr	r5, [sp, #20]
 80071e2:	9a05      	ldr	r2, [sp, #20]
 80071e4:	441a      	add	r2, r3
 80071e6:	9205      	str	r2, [sp, #20]
 80071e8:	9a06      	ldr	r2, [sp, #24]
 80071ea:	2101      	movs	r1, #1
 80071ec:	441a      	add	r2, r3
 80071ee:	4620      	mov	r0, r4
 80071f0:	9206      	str	r2, [sp, #24]
 80071f2:	f7ff f9a6 	bl	8006542 <__i2b>
 80071f6:	4607      	mov	r7, r0
 80071f8:	2d00      	cmp	r5, #0
 80071fa:	dd0c      	ble.n	8007216 <_dtoa_r+0x73e>
 80071fc:	9b06      	ldr	r3, [sp, #24]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	dd09      	ble.n	8007216 <_dtoa_r+0x73e>
 8007202:	42ab      	cmp	r3, r5
 8007204:	9a05      	ldr	r2, [sp, #20]
 8007206:	bfa8      	it	ge
 8007208:	462b      	movge	r3, r5
 800720a:	1ad2      	subs	r2, r2, r3
 800720c:	9205      	str	r2, [sp, #20]
 800720e:	9a06      	ldr	r2, [sp, #24]
 8007210:	1aed      	subs	r5, r5, r3
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	9306      	str	r3, [sp, #24]
 8007216:	9b08      	ldr	r3, [sp, #32]
 8007218:	b1f3      	cbz	r3, 8007258 <_dtoa_r+0x780>
 800721a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 80a5 	beq.w	800736c <_dtoa_r+0x894>
 8007222:	2e00      	cmp	r6, #0
 8007224:	dd10      	ble.n	8007248 <_dtoa_r+0x770>
 8007226:	4639      	mov	r1, r7
 8007228:	4632      	mov	r2, r6
 800722a:	4620      	mov	r0, r4
 800722c:	f7ff fa20 	bl	8006670 <__pow5mult>
 8007230:	4652      	mov	r2, sl
 8007232:	4601      	mov	r1, r0
 8007234:	4607      	mov	r7, r0
 8007236:	4620      	mov	r0, r4
 8007238:	f7ff f98c 	bl	8006554 <__multiply>
 800723c:	4651      	mov	r1, sl
 800723e:	4680      	mov	r8, r0
 8007240:	4620      	mov	r0, r4
 8007242:	f7ff f8de 	bl	8006402 <_Bfree>
 8007246:	46c2      	mov	sl, r8
 8007248:	9b08      	ldr	r3, [sp, #32]
 800724a:	1b9a      	subs	r2, r3, r6
 800724c:	d004      	beq.n	8007258 <_dtoa_r+0x780>
 800724e:	4651      	mov	r1, sl
 8007250:	4620      	mov	r0, r4
 8007252:	f7ff fa0d 	bl	8006670 <__pow5mult>
 8007256:	4682      	mov	sl, r0
 8007258:	2101      	movs	r1, #1
 800725a:	4620      	mov	r0, r4
 800725c:	f7ff f971 	bl	8006542 <__i2b>
 8007260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007262:	2b00      	cmp	r3, #0
 8007264:	4606      	mov	r6, r0
 8007266:	f340 8083 	ble.w	8007370 <_dtoa_r+0x898>
 800726a:	461a      	mov	r2, r3
 800726c:	4601      	mov	r1, r0
 800726e:	4620      	mov	r0, r4
 8007270:	f7ff f9fe 	bl	8006670 <__pow5mult>
 8007274:	9b07      	ldr	r3, [sp, #28]
 8007276:	2b01      	cmp	r3, #1
 8007278:	4606      	mov	r6, r0
 800727a:	dd7c      	ble.n	8007376 <_dtoa_r+0x89e>
 800727c:	f04f 0800 	mov.w	r8, #0
 8007280:	6933      	ldr	r3, [r6, #16]
 8007282:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007286:	6918      	ldr	r0, [r3, #16]
 8007288:	f7ff f90d 	bl	80064a6 <__hi0bits>
 800728c:	f1c0 0020 	rsb	r0, r0, #32
 8007290:	9b06      	ldr	r3, [sp, #24]
 8007292:	4418      	add	r0, r3
 8007294:	f010 001f 	ands.w	r0, r0, #31
 8007298:	f000 8096 	beq.w	80073c8 <_dtoa_r+0x8f0>
 800729c:	f1c0 0320 	rsb	r3, r0, #32
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	f340 8087 	ble.w	80073b4 <_dtoa_r+0x8dc>
 80072a6:	9b05      	ldr	r3, [sp, #20]
 80072a8:	f1c0 001c 	rsb	r0, r0, #28
 80072ac:	4403      	add	r3, r0
 80072ae:	9305      	str	r3, [sp, #20]
 80072b0:	9b06      	ldr	r3, [sp, #24]
 80072b2:	4405      	add	r5, r0
 80072b4:	4403      	add	r3, r0
 80072b6:	9306      	str	r3, [sp, #24]
 80072b8:	9b05      	ldr	r3, [sp, #20]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	dd05      	ble.n	80072ca <_dtoa_r+0x7f2>
 80072be:	4651      	mov	r1, sl
 80072c0:	461a      	mov	r2, r3
 80072c2:	4620      	mov	r0, r4
 80072c4:	f7ff fa22 	bl	800670c <__lshift>
 80072c8:	4682      	mov	sl, r0
 80072ca:	9b06      	ldr	r3, [sp, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dd05      	ble.n	80072dc <_dtoa_r+0x804>
 80072d0:	4631      	mov	r1, r6
 80072d2:	461a      	mov	r2, r3
 80072d4:	4620      	mov	r0, r4
 80072d6:	f7ff fa19 	bl	800670c <__lshift>
 80072da:	4606      	mov	r6, r0
 80072dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d074      	beq.n	80073cc <_dtoa_r+0x8f4>
 80072e2:	4631      	mov	r1, r6
 80072e4:	4650      	mov	r0, sl
 80072e6:	f7ff fa62 	bl	80067ae <__mcmp>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	da6e      	bge.n	80073cc <_dtoa_r+0x8f4>
 80072ee:	2300      	movs	r3, #0
 80072f0:	4651      	mov	r1, sl
 80072f2:	220a      	movs	r2, #10
 80072f4:	4620      	mov	r0, r4
 80072f6:	f7ff f89b 	bl	8006430 <__multadd>
 80072fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007300:	4682      	mov	sl, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 81a8 	beq.w	8007658 <_dtoa_r+0xb80>
 8007308:	2300      	movs	r3, #0
 800730a:	4639      	mov	r1, r7
 800730c:	220a      	movs	r2, #10
 800730e:	4620      	mov	r0, r4
 8007310:	f7ff f88e 	bl	8006430 <__multadd>
 8007314:	9b04      	ldr	r3, [sp, #16]
 8007316:	2b00      	cmp	r3, #0
 8007318:	4607      	mov	r7, r0
 800731a:	f300 80c8 	bgt.w	80074ae <_dtoa_r+0x9d6>
 800731e:	9b07      	ldr	r3, [sp, #28]
 8007320:	2b02      	cmp	r3, #2
 8007322:	f340 80c4 	ble.w	80074ae <_dtoa_r+0x9d6>
 8007326:	e059      	b.n	80073dc <_dtoa_r+0x904>
 8007328:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800732a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800732e:	e756      	b.n	80071de <_dtoa_r+0x706>
 8007330:	9b03      	ldr	r3, [sp, #12]
 8007332:	1e5e      	subs	r6, r3, #1
 8007334:	9b08      	ldr	r3, [sp, #32]
 8007336:	42b3      	cmp	r3, r6
 8007338:	bfbf      	itttt	lt
 800733a:	9b08      	ldrlt	r3, [sp, #32]
 800733c:	9608      	strlt	r6, [sp, #32]
 800733e:	1af2      	sublt	r2, r6, r3
 8007340:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8007342:	bfb6      	itet	lt
 8007344:	189b      	addlt	r3, r3, r2
 8007346:	1b9e      	subge	r6, r3, r6
 8007348:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800734a:	9b03      	ldr	r3, [sp, #12]
 800734c:	bfb8      	it	lt
 800734e:	2600      	movlt	r6, #0
 8007350:	2b00      	cmp	r3, #0
 8007352:	bfb9      	ittee	lt
 8007354:	9b05      	ldrlt	r3, [sp, #20]
 8007356:	9a03      	ldrlt	r2, [sp, #12]
 8007358:	9d05      	ldrge	r5, [sp, #20]
 800735a:	9b03      	ldrge	r3, [sp, #12]
 800735c:	bfbc      	itt	lt
 800735e:	1a9d      	sublt	r5, r3, r2
 8007360:	2300      	movlt	r3, #0
 8007362:	e73e      	b.n	80071e2 <_dtoa_r+0x70a>
 8007364:	9e08      	ldr	r6, [sp, #32]
 8007366:	9d05      	ldr	r5, [sp, #20]
 8007368:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800736a:	e745      	b.n	80071f8 <_dtoa_r+0x720>
 800736c:	9a08      	ldr	r2, [sp, #32]
 800736e:	e76e      	b.n	800724e <_dtoa_r+0x776>
 8007370:	9b07      	ldr	r3, [sp, #28]
 8007372:	2b01      	cmp	r3, #1
 8007374:	dc19      	bgt.n	80073aa <_dtoa_r+0x8d2>
 8007376:	9b00      	ldr	r3, [sp, #0]
 8007378:	b9bb      	cbnz	r3, 80073aa <_dtoa_r+0x8d2>
 800737a:	9b01      	ldr	r3, [sp, #4]
 800737c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007380:	b99b      	cbnz	r3, 80073aa <_dtoa_r+0x8d2>
 8007382:	9b01      	ldr	r3, [sp, #4]
 8007384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007388:	0d1b      	lsrs	r3, r3, #20
 800738a:	051b      	lsls	r3, r3, #20
 800738c:	b183      	cbz	r3, 80073b0 <_dtoa_r+0x8d8>
 800738e:	9b05      	ldr	r3, [sp, #20]
 8007390:	3301      	adds	r3, #1
 8007392:	9305      	str	r3, [sp, #20]
 8007394:	9b06      	ldr	r3, [sp, #24]
 8007396:	3301      	adds	r3, #1
 8007398:	9306      	str	r3, [sp, #24]
 800739a:	f04f 0801 	mov.w	r8, #1
 800739e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f47f af6d 	bne.w	8007280 <_dtoa_r+0x7a8>
 80073a6:	2001      	movs	r0, #1
 80073a8:	e772      	b.n	8007290 <_dtoa_r+0x7b8>
 80073aa:	f04f 0800 	mov.w	r8, #0
 80073ae:	e7f6      	b.n	800739e <_dtoa_r+0x8c6>
 80073b0:	4698      	mov	r8, r3
 80073b2:	e7f4      	b.n	800739e <_dtoa_r+0x8c6>
 80073b4:	d080      	beq.n	80072b8 <_dtoa_r+0x7e0>
 80073b6:	9a05      	ldr	r2, [sp, #20]
 80073b8:	331c      	adds	r3, #28
 80073ba:	441a      	add	r2, r3
 80073bc:	9205      	str	r2, [sp, #20]
 80073be:	9a06      	ldr	r2, [sp, #24]
 80073c0:	441a      	add	r2, r3
 80073c2:	441d      	add	r5, r3
 80073c4:	4613      	mov	r3, r2
 80073c6:	e776      	b.n	80072b6 <_dtoa_r+0x7de>
 80073c8:	4603      	mov	r3, r0
 80073ca:	e7f4      	b.n	80073b6 <_dtoa_r+0x8de>
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	dc36      	bgt.n	8007440 <_dtoa_r+0x968>
 80073d2:	9b07      	ldr	r3, [sp, #28]
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	dd33      	ble.n	8007440 <_dtoa_r+0x968>
 80073d8:	9b03      	ldr	r3, [sp, #12]
 80073da:	9304      	str	r3, [sp, #16]
 80073dc:	9b04      	ldr	r3, [sp, #16]
 80073de:	b963      	cbnz	r3, 80073fa <_dtoa_r+0x922>
 80073e0:	4631      	mov	r1, r6
 80073e2:	2205      	movs	r2, #5
 80073e4:	4620      	mov	r0, r4
 80073e6:	f7ff f823 	bl	8006430 <__multadd>
 80073ea:	4601      	mov	r1, r0
 80073ec:	4606      	mov	r6, r0
 80073ee:	4650      	mov	r0, sl
 80073f0:	f7ff f9dd 	bl	80067ae <__mcmp>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	f73f adb6 	bgt.w	8006f66 <_dtoa_r+0x48e>
 80073fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073fc:	9d02      	ldr	r5, [sp, #8]
 80073fe:	ea6f 0b03 	mvn.w	fp, r3
 8007402:	2300      	movs	r3, #0
 8007404:	9303      	str	r3, [sp, #12]
 8007406:	4631      	mov	r1, r6
 8007408:	4620      	mov	r0, r4
 800740a:	f7fe fffa 	bl	8006402 <_Bfree>
 800740e:	2f00      	cmp	r7, #0
 8007410:	f43f aea6 	beq.w	8007160 <_dtoa_r+0x688>
 8007414:	9b03      	ldr	r3, [sp, #12]
 8007416:	b12b      	cbz	r3, 8007424 <_dtoa_r+0x94c>
 8007418:	42bb      	cmp	r3, r7
 800741a:	d003      	beq.n	8007424 <_dtoa_r+0x94c>
 800741c:	4619      	mov	r1, r3
 800741e:	4620      	mov	r0, r4
 8007420:	f7fe ffef 	bl	8006402 <_Bfree>
 8007424:	4639      	mov	r1, r7
 8007426:	4620      	mov	r0, r4
 8007428:	f7fe ffeb 	bl	8006402 <_Bfree>
 800742c:	e698      	b.n	8007160 <_dtoa_r+0x688>
 800742e:	2600      	movs	r6, #0
 8007430:	4637      	mov	r7, r6
 8007432:	e7e2      	b.n	80073fa <_dtoa_r+0x922>
 8007434:	46bb      	mov	fp, r7
 8007436:	4637      	mov	r7, r6
 8007438:	e595      	b.n	8006f66 <_dtoa_r+0x48e>
 800743a:	bf00      	nop
 800743c:	40240000 	.word	0x40240000
 8007440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007442:	bb93      	cbnz	r3, 80074aa <_dtoa_r+0x9d2>
 8007444:	9b03      	ldr	r3, [sp, #12]
 8007446:	9304      	str	r3, [sp, #16]
 8007448:	9d02      	ldr	r5, [sp, #8]
 800744a:	4631      	mov	r1, r6
 800744c:	4650      	mov	r0, sl
 800744e:	f7ff fab6 	bl	80069be <quorem>
 8007452:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007456:	f805 9b01 	strb.w	r9, [r5], #1
 800745a:	9b02      	ldr	r3, [sp, #8]
 800745c:	9a04      	ldr	r2, [sp, #16]
 800745e:	1aeb      	subs	r3, r5, r3
 8007460:	429a      	cmp	r2, r3
 8007462:	f300 80dc 	bgt.w	800761e <_dtoa_r+0xb46>
 8007466:	9b02      	ldr	r3, [sp, #8]
 8007468:	2a01      	cmp	r2, #1
 800746a:	bfac      	ite	ge
 800746c:	189b      	addge	r3, r3, r2
 800746e:	3301      	addlt	r3, #1
 8007470:	4698      	mov	r8, r3
 8007472:	2300      	movs	r3, #0
 8007474:	9303      	str	r3, [sp, #12]
 8007476:	4651      	mov	r1, sl
 8007478:	2201      	movs	r2, #1
 800747a:	4620      	mov	r0, r4
 800747c:	f7ff f946 	bl	800670c <__lshift>
 8007480:	4631      	mov	r1, r6
 8007482:	4682      	mov	sl, r0
 8007484:	f7ff f993 	bl	80067ae <__mcmp>
 8007488:	2800      	cmp	r0, #0
 800748a:	f300 808d 	bgt.w	80075a8 <_dtoa_r+0xad0>
 800748e:	d103      	bne.n	8007498 <_dtoa_r+0x9c0>
 8007490:	f019 0f01 	tst.w	r9, #1
 8007494:	f040 8088 	bne.w	80075a8 <_dtoa_r+0xad0>
 8007498:	4645      	mov	r5, r8
 800749a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800749e:	2b30      	cmp	r3, #48	; 0x30
 80074a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80074a4:	d1af      	bne.n	8007406 <_dtoa_r+0x92e>
 80074a6:	4615      	mov	r5, r2
 80074a8:	e7f7      	b.n	800749a <_dtoa_r+0x9c2>
 80074aa:	9b03      	ldr	r3, [sp, #12]
 80074ac:	9304      	str	r3, [sp, #16]
 80074ae:	2d00      	cmp	r5, #0
 80074b0:	dd05      	ble.n	80074be <_dtoa_r+0x9e6>
 80074b2:	4639      	mov	r1, r7
 80074b4:	462a      	mov	r2, r5
 80074b6:	4620      	mov	r0, r4
 80074b8:	f7ff f928 	bl	800670c <__lshift>
 80074bc:	4607      	mov	r7, r0
 80074be:	f1b8 0f00 	cmp.w	r8, #0
 80074c2:	d04c      	beq.n	800755e <_dtoa_r+0xa86>
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4620      	mov	r0, r4
 80074c8:	f7fe ff67 	bl	800639a <_Balloc>
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	3202      	adds	r2, #2
 80074d0:	4605      	mov	r5, r0
 80074d2:	0092      	lsls	r2, r2, #2
 80074d4:	f107 010c 	add.w	r1, r7, #12
 80074d8:	300c      	adds	r0, #12
 80074da:	f7fe fca7 	bl	8005e2c <memcpy>
 80074de:	2201      	movs	r2, #1
 80074e0:	4629      	mov	r1, r5
 80074e2:	4620      	mov	r0, r4
 80074e4:	f7ff f912 	bl	800670c <__lshift>
 80074e8:	9b00      	ldr	r3, [sp, #0]
 80074ea:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80074ee:	9703      	str	r7, [sp, #12]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	4607      	mov	r7, r0
 80074f6:	9305      	str	r3, [sp, #20]
 80074f8:	4631      	mov	r1, r6
 80074fa:	4650      	mov	r0, sl
 80074fc:	f7ff fa5f 	bl	80069be <quorem>
 8007500:	9903      	ldr	r1, [sp, #12]
 8007502:	4605      	mov	r5, r0
 8007504:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007508:	4650      	mov	r0, sl
 800750a:	f7ff f950 	bl	80067ae <__mcmp>
 800750e:	463a      	mov	r2, r7
 8007510:	9000      	str	r0, [sp, #0]
 8007512:	4631      	mov	r1, r6
 8007514:	4620      	mov	r0, r4
 8007516:	f7ff f964 	bl	80067e2 <__mdiff>
 800751a:	68c3      	ldr	r3, [r0, #12]
 800751c:	4602      	mov	r2, r0
 800751e:	bb03      	cbnz	r3, 8007562 <_dtoa_r+0xa8a>
 8007520:	4601      	mov	r1, r0
 8007522:	9006      	str	r0, [sp, #24]
 8007524:	4650      	mov	r0, sl
 8007526:	f7ff f942 	bl	80067ae <__mcmp>
 800752a:	9a06      	ldr	r2, [sp, #24]
 800752c:	4603      	mov	r3, r0
 800752e:	4611      	mov	r1, r2
 8007530:	4620      	mov	r0, r4
 8007532:	9306      	str	r3, [sp, #24]
 8007534:	f7fe ff65 	bl	8006402 <_Bfree>
 8007538:	9b06      	ldr	r3, [sp, #24]
 800753a:	b9a3      	cbnz	r3, 8007566 <_dtoa_r+0xa8e>
 800753c:	9a07      	ldr	r2, [sp, #28]
 800753e:	b992      	cbnz	r2, 8007566 <_dtoa_r+0xa8e>
 8007540:	9a05      	ldr	r2, [sp, #20]
 8007542:	b982      	cbnz	r2, 8007566 <_dtoa_r+0xa8e>
 8007544:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007548:	d029      	beq.n	800759e <_dtoa_r+0xac6>
 800754a:	9b00      	ldr	r3, [sp, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	dd01      	ble.n	8007554 <_dtoa_r+0xa7c>
 8007550:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8007554:	f108 0501 	add.w	r5, r8, #1
 8007558:	f888 9000 	strb.w	r9, [r8]
 800755c:	e753      	b.n	8007406 <_dtoa_r+0x92e>
 800755e:	4638      	mov	r0, r7
 8007560:	e7c2      	b.n	80074e8 <_dtoa_r+0xa10>
 8007562:	2301      	movs	r3, #1
 8007564:	e7e3      	b.n	800752e <_dtoa_r+0xa56>
 8007566:	9a00      	ldr	r2, [sp, #0]
 8007568:	2a00      	cmp	r2, #0
 800756a:	db04      	blt.n	8007576 <_dtoa_r+0xa9e>
 800756c:	d125      	bne.n	80075ba <_dtoa_r+0xae2>
 800756e:	9a07      	ldr	r2, [sp, #28]
 8007570:	bb1a      	cbnz	r2, 80075ba <_dtoa_r+0xae2>
 8007572:	9a05      	ldr	r2, [sp, #20]
 8007574:	bb0a      	cbnz	r2, 80075ba <_dtoa_r+0xae2>
 8007576:	2b00      	cmp	r3, #0
 8007578:	ddec      	ble.n	8007554 <_dtoa_r+0xa7c>
 800757a:	4651      	mov	r1, sl
 800757c:	2201      	movs	r2, #1
 800757e:	4620      	mov	r0, r4
 8007580:	f7ff f8c4 	bl	800670c <__lshift>
 8007584:	4631      	mov	r1, r6
 8007586:	4682      	mov	sl, r0
 8007588:	f7ff f911 	bl	80067ae <__mcmp>
 800758c:	2800      	cmp	r0, #0
 800758e:	dc03      	bgt.n	8007598 <_dtoa_r+0xac0>
 8007590:	d1e0      	bne.n	8007554 <_dtoa_r+0xa7c>
 8007592:	f019 0f01 	tst.w	r9, #1
 8007596:	d0dd      	beq.n	8007554 <_dtoa_r+0xa7c>
 8007598:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800759c:	d1d8      	bne.n	8007550 <_dtoa_r+0xa78>
 800759e:	2339      	movs	r3, #57	; 0x39
 80075a0:	f888 3000 	strb.w	r3, [r8]
 80075a4:	f108 0801 	add.w	r8, r8, #1
 80075a8:	4645      	mov	r5, r8
 80075aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075ae:	2b39      	cmp	r3, #57	; 0x39
 80075b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80075b4:	d03b      	beq.n	800762e <_dtoa_r+0xb56>
 80075b6:	3301      	adds	r3, #1
 80075b8:	e040      	b.n	800763c <_dtoa_r+0xb64>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f108 0501 	add.w	r5, r8, #1
 80075c0:	dd05      	ble.n	80075ce <_dtoa_r+0xaf6>
 80075c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075c6:	d0ea      	beq.n	800759e <_dtoa_r+0xac6>
 80075c8:	f109 0901 	add.w	r9, r9, #1
 80075cc:	e7c4      	b.n	8007558 <_dtoa_r+0xa80>
 80075ce:	9b02      	ldr	r3, [sp, #8]
 80075d0:	9a04      	ldr	r2, [sp, #16]
 80075d2:	f805 9c01 	strb.w	r9, [r5, #-1]
 80075d6:	1aeb      	subs	r3, r5, r3
 80075d8:	4293      	cmp	r3, r2
 80075da:	46a8      	mov	r8, r5
 80075dc:	f43f af4b 	beq.w	8007476 <_dtoa_r+0x99e>
 80075e0:	4651      	mov	r1, sl
 80075e2:	2300      	movs	r3, #0
 80075e4:	220a      	movs	r2, #10
 80075e6:	4620      	mov	r0, r4
 80075e8:	f7fe ff22 	bl	8006430 <__multadd>
 80075ec:	9b03      	ldr	r3, [sp, #12]
 80075ee:	9903      	ldr	r1, [sp, #12]
 80075f0:	42bb      	cmp	r3, r7
 80075f2:	4682      	mov	sl, r0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	f04f 020a 	mov.w	r2, #10
 80075fc:	4620      	mov	r0, r4
 80075fe:	d104      	bne.n	800760a <_dtoa_r+0xb32>
 8007600:	f7fe ff16 	bl	8006430 <__multadd>
 8007604:	9003      	str	r0, [sp, #12]
 8007606:	4607      	mov	r7, r0
 8007608:	e776      	b.n	80074f8 <_dtoa_r+0xa20>
 800760a:	f7fe ff11 	bl	8006430 <__multadd>
 800760e:	2300      	movs	r3, #0
 8007610:	9003      	str	r0, [sp, #12]
 8007612:	220a      	movs	r2, #10
 8007614:	4639      	mov	r1, r7
 8007616:	4620      	mov	r0, r4
 8007618:	f7fe ff0a 	bl	8006430 <__multadd>
 800761c:	e7f3      	b.n	8007606 <_dtoa_r+0xb2e>
 800761e:	4651      	mov	r1, sl
 8007620:	2300      	movs	r3, #0
 8007622:	220a      	movs	r2, #10
 8007624:	4620      	mov	r0, r4
 8007626:	f7fe ff03 	bl	8006430 <__multadd>
 800762a:	4682      	mov	sl, r0
 800762c:	e70d      	b.n	800744a <_dtoa_r+0x972>
 800762e:	9b02      	ldr	r3, [sp, #8]
 8007630:	4293      	cmp	r3, r2
 8007632:	d105      	bne.n	8007640 <_dtoa_r+0xb68>
 8007634:	9a02      	ldr	r2, [sp, #8]
 8007636:	f10b 0b01 	add.w	fp, fp, #1
 800763a:	2331      	movs	r3, #49	; 0x31
 800763c:	7013      	strb	r3, [r2, #0]
 800763e:	e6e2      	b.n	8007406 <_dtoa_r+0x92e>
 8007640:	4615      	mov	r5, r2
 8007642:	e7b2      	b.n	80075aa <_dtoa_r+0xad2>
 8007644:	4b09      	ldr	r3, [pc, #36]	; (800766c <_dtoa_r+0xb94>)
 8007646:	f7ff baae 	b.w	8006ba6 <_dtoa_r+0xce>
 800764a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800764c:	2b00      	cmp	r3, #0
 800764e:	f47f aa88 	bne.w	8006b62 <_dtoa_r+0x8a>
 8007652:	4b07      	ldr	r3, [pc, #28]	; (8007670 <_dtoa_r+0xb98>)
 8007654:	f7ff baa7 	b.w	8006ba6 <_dtoa_r+0xce>
 8007658:	9b04      	ldr	r3, [sp, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	f73f aef4 	bgt.w	8007448 <_dtoa_r+0x970>
 8007660:	9b07      	ldr	r3, [sp, #28]
 8007662:	2b02      	cmp	r3, #2
 8007664:	f77f aef0 	ble.w	8007448 <_dtoa_r+0x970>
 8007668:	e6b8      	b.n	80073dc <_dtoa_r+0x904>
 800766a:	bf00      	nop
 800766c:	08007a02 	.word	0x08007a02
 8007670:	080079f5 	.word	0x080079f5

08007674 <_sbrk>:
 8007674:	4b04      	ldr	r3, [pc, #16]	; (8007688 <_sbrk+0x14>)
 8007676:	6819      	ldr	r1, [r3, #0]
 8007678:	4602      	mov	r2, r0
 800767a:	b909      	cbnz	r1, 8007680 <_sbrk+0xc>
 800767c:	4903      	ldr	r1, [pc, #12]	; (800768c <_sbrk+0x18>)
 800767e:	6019      	str	r1, [r3, #0]
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	4402      	add	r2, r0
 8007684:	601a      	str	r2, [r3, #0]
 8007686:	4770      	bx	lr
 8007688:	200040a0 	.word	0x200040a0
 800768c:	20005ad4 	.word	0x20005ad4

08007690 <_init>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	bf00      	nop
 8007694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007696:	bc08      	pop	{r3}
 8007698:	469e      	mov	lr, r3
 800769a:	4770      	bx	lr

0800769c <_fini>:
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769e:	bf00      	nop
 80076a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a2:	bc08      	pop	{r3}
 80076a4:	469e      	mov	lr, r3
 80076a6:	4770      	bx	lr
