
celebrimbor_march_pool_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  0800668c  0800668c  0001668c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006948  08006948  00016948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006950  08006950  00016950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006954  08006954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000032c  20000000  08006958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002032c  2**0
                  CONTENTS
  8 .bss          000057b4  2000032c  2000032c  0002032c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20005ae0  20005ae0  0002032c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002e68c  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005a10  00000000  00000000  0004e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00011c83  00000000  00000000  000543f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001320  00000000  00000000  00066080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d48  00000000  00000000  000673a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000c4ee  00000000  00000000  000690e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006fb0  00000000  00000000  000755d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0007c586  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000402c  00000000  00000000  0007c604  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000032c 	.word	0x2000032c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006674 	.word	0x08006674

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000330 	.word	0x20000330
 80001cc:	08006674 	.word	0x08006674

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f092 0f00 	teq	r2, #0
 80004ca:	bf14      	ite	ne
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e720      	b.n	8000324 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aedc 	beq.w	80002d2 <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6c1      	b.n	80002d2 <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_ldivmod>:
 8000a14:	b97b      	cbnz	r3, 8000a36 <__aeabi_ldivmod+0x22>
 8000a16:	b972      	cbnz	r2, 8000a36 <__aeabi_ldivmod+0x22>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bfbe      	ittt	lt
 8000a1c:	2000      	movlt	r0, #0
 8000a1e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a22:	e006      	blt.n	8000a32 <__aeabi_ldivmod+0x1e>
 8000a24:	bf08      	it	eq
 8000a26:	2800      	cmpeq	r0, #0
 8000a28:	bf1c      	itt	ne
 8000a2a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a2e:	f04f 30ff 	movne.w	r0, #4294967295
 8000a32:	f000 b9c5 	b.w	8000dc0 <__aeabi_idiv0>
 8000a36:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a3a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3e:	2900      	cmp	r1, #0
 8000a40:	db09      	blt.n	8000a56 <__aeabi_ldivmod+0x42>
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	db1a      	blt.n	8000a7c <__aeabi_ldivmod+0x68>
 8000a46:	f000 f84d 	bl	8000ae4 <__udivmoddi4>
 8000a4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a52:	b004      	add	sp, #16
 8000a54:	4770      	bx	lr
 8000a56:	4240      	negs	r0, r0
 8000a58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db1b      	blt.n	8000a98 <__aeabi_ldivmod+0x84>
 8000a60:	f000 f840 	bl	8000ae4 <__udivmoddi4>
 8000a64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4240      	negs	r0, r0
 8000a70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a74:	4252      	negs	r2, r2
 8000a76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a7a:	4770      	bx	lr
 8000a7c:	4252      	negs	r2, r2
 8000a7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a82:	f000 f82f 	bl	8000ae4 <__udivmoddi4>
 8000a86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a8e:	b004      	add	sp, #16
 8000a90:	4240      	negs	r0, r0
 8000a92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a96:	4770      	bx	lr
 8000a98:	4252      	negs	r2, r2
 8000a9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a9e:	f000 f821 	bl	8000ae4 <__udivmoddi4>
 8000aa2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aaa:	b004      	add	sp, #16
 8000aac:	4252      	negs	r2, r2
 8000aae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac8:	f000 b97a 	b.w	8000dc0 <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae8:	468c      	mov	ip, r1
 8000aea:	460d      	mov	r5, r1
 8000aec:	4604      	mov	r4, r0
 8000aee:	9e08      	ldr	r6, [sp, #32]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d151      	bne.n	8000b98 <__udivmoddi4+0xb4>
 8000af4:	428a      	cmp	r2, r1
 8000af6:	4617      	mov	r7, r2
 8000af8:	d96d      	bls.n	8000bd6 <__udivmoddi4+0xf2>
 8000afa:	fab2 fe82 	clz	lr, r2
 8000afe:	f1be 0f00 	cmp.w	lr, #0
 8000b02:	d00b      	beq.n	8000b1c <__udivmoddi4+0x38>
 8000b04:	f1ce 0c20 	rsb	ip, lr, #32
 8000b08:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b0c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b10:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b14:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b18:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b1c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b20:	0c25      	lsrs	r5, r4, #16
 8000b22:	fbbc f8fa 	udiv	r8, ip, sl
 8000b26:	fa1f f987 	uxth.w	r9, r7
 8000b2a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b2e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b32:	fb08 f309 	mul.w	r3, r8, r9
 8000b36:	42ab      	cmp	r3, r5
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x6c>
 8000b3a:	19ed      	adds	r5, r5, r7
 8000b3c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b40:	f080 8123 	bcs.w	8000d8a <__udivmoddi4+0x2a6>
 8000b44:	42ab      	cmp	r3, r5
 8000b46:	f240 8120 	bls.w	8000d8a <__udivmoddi4+0x2a6>
 8000b4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b4e:	443d      	add	r5, r7
 8000b50:	1aed      	subs	r5, r5, r3
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b58:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b60:	fb00 f909 	mul.w	r9, r0, r9
 8000b64:	45a1      	cmp	r9, r4
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x98>
 8000b68:	19e4      	adds	r4, r4, r7
 8000b6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6e:	f080 810a 	bcs.w	8000d86 <__udivmoddi4+0x2a2>
 8000b72:	45a1      	cmp	r9, r4
 8000b74:	f240 8107 	bls.w	8000d86 <__udivmoddi4+0x2a2>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	eba4 0409 	sub.w	r4, r4, r9
 8000b80:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b84:	2100      	movs	r1, #0
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d061      	beq.n	8000c4e <__udivmoddi4+0x16a>
 8000b8a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b8e:	2300      	movs	r3, #0
 8000b90:	6034      	str	r4, [r6, #0]
 8000b92:	6073      	str	r3, [r6, #4]
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d907      	bls.n	8000bac <__udivmoddi4+0xc8>
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d054      	beq.n	8000c4a <__udivmoddi4+0x166>
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bac:	fab3 f183 	clz	r1, r3
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	f040 808e 	bne.w	8000cd2 <__udivmoddi4+0x1ee>
 8000bb6:	42ab      	cmp	r3, r5
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xdc>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80fa 	bhi.w	8000db4 <__udivmoddi4+0x2d0>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb65 0503 	sbc.w	r5, r5, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	46ac      	mov	ip, r5
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d03f      	beq.n	8000c4e <__udivmoddi4+0x16a>
 8000bce:	e886 1010 	stmia.w	r6, {r4, ip}
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	b912      	cbnz	r2, 8000bde <__udivmoddi4+0xfa>
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb7 f7f2 	udiv	r7, r7, r2
 8000bde:	fab7 fe87 	clz	lr, r7
 8000be2:	f1be 0f00 	cmp.w	lr, #0
 8000be6:	d134      	bne.n	8000c52 <__udivmoddi4+0x16e>
 8000be8:	1beb      	subs	r3, r5, r7
 8000bea:	0c3a      	lsrs	r2, r7, #16
 8000bec:	fa1f fc87 	uxth.w	ip, r7
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000bf6:	0c25      	lsrs	r5, r4, #16
 8000bf8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bfc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c00:	fb0c f308 	mul.w	r3, ip, r8
 8000c04:	42ab      	cmp	r3, r5
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x134>
 8000c08:	19ed      	adds	r5, r5, r7
 8000c0a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x132>
 8000c10:	42ab      	cmp	r3, r5
 8000c12:	f200 80d1 	bhi.w	8000db8 <__udivmoddi4+0x2d4>
 8000c16:	4680      	mov	r8, r0
 8000c18:	1aed      	subs	r5, r5, r3
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c20:	fb02 5510 	mls	r5, r2, r0, r5
 8000c24:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c28:	fb0c fc00 	mul.w	ip, ip, r0
 8000c2c:	45a4      	cmp	ip, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x15c>
 8000c30:	19e4      	adds	r4, r4, r7
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x15a>
 8000c38:	45a4      	cmp	ip, r4
 8000c3a:	f200 80b8 	bhi.w	8000dae <__udivmoddi4+0x2ca>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 040c 	sub.w	r4, r4, ip
 8000c44:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c48:	e79d      	b.n	8000b86 <__udivmoddi4+0xa2>
 8000c4a:	4631      	mov	r1, r6
 8000c4c:	4630      	mov	r0, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	f1ce 0420 	rsb	r4, lr, #32
 8000c56:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c5a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c5e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c62:	0c3a      	lsrs	r2, r7, #16
 8000c64:	fa25 f404 	lsr.w	r4, r5, r4
 8000c68:	ea48 0803 	orr.w	r8, r8, r3
 8000c6c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c70:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c74:	fb02 4411 	mls	r4, r2, r1, r4
 8000c78:	fa1f fc87 	uxth.w	ip, r7
 8000c7c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c80:	fb01 f30c 	mul.w	r3, r1, ip
 8000c84:	42ab      	cmp	r3, r5
 8000c86:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x1bc>
 8000c8c:	19ed      	adds	r5, r5, r7
 8000c8e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c92:	f080 808a 	bcs.w	8000daa <__udivmoddi4+0x2c6>
 8000c96:	42ab      	cmp	r3, r5
 8000c98:	f240 8087 	bls.w	8000daa <__udivmoddi4+0x2c6>
 8000c9c:	3902      	subs	r1, #2
 8000c9e:	443d      	add	r5, r7
 8000ca0:	1aeb      	subs	r3, r5, r3
 8000ca2:	fa1f f588 	uxth.w	r5, r8
 8000ca6:	fbb3 f0f2 	udiv	r0, r3, r2
 8000caa:	fb02 3310 	mls	r3, r2, r0, r3
 8000cae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cb2:	fb00 f30c 	mul.w	r3, r0, ip
 8000cb6:	42ab      	cmp	r3, r5
 8000cb8:	d907      	bls.n	8000cca <__udivmoddi4+0x1e6>
 8000cba:	19ed      	adds	r5, r5, r7
 8000cbc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cc0:	d26f      	bcs.n	8000da2 <__udivmoddi4+0x2be>
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d96d      	bls.n	8000da2 <__udivmoddi4+0x2be>
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	443d      	add	r5, r7
 8000cca:	1aeb      	subs	r3, r5, r3
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	e78f      	b.n	8000bf2 <__udivmoddi4+0x10e>
 8000cd2:	f1c1 0720 	rsb	r7, r1, #32
 8000cd6:	fa22 f807 	lsr.w	r8, r2, r7
 8000cda:	408b      	lsls	r3, r1
 8000cdc:	fa05 f401 	lsl.w	r4, r5, r1
 8000ce0:	ea48 0303 	orr.w	r3, r8, r3
 8000ce4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ce8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	ea4e 0e04 	orr.w	lr, lr, r4
 8000cf2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000cf6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000cfa:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cfe:	fa1f f883 	uxth.w	r8, r3
 8000d02:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d06:	fb09 f408 	mul.w	r4, r9, r8
 8000d0a:	42ac      	cmp	r4, r5
 8000d0c:	fa02 f201 	lsl.w	r2, r2, r1
 8000d10:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x244>
 8000d16:	18ed      	adds	r5, r5, r3
 8000d18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d1c:	d243      	bcs.n	8000da6 <__udivmoddi4+0x2c2>
 8000d1e:	42ac      	cmp	r4, r5
 8000d20:	d941      	bls.n	8000da6 <__udivmoddi4+0x2c2>
 8000d22:	f1a9 0902 	sub.w	r9, r9, #2
 8000d26:	441d      	add	r5, r3
 8000d28:	1b2d      	subs	r5, r5, r4
 8000d2a:	fa1f fe8e 	uxth.w	lr, lr
 8000d2e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d32:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d36:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d3a:	fb00 f808 	mul.w	r8, r0, r8
 8000d3e:	45a0      	cmp	r8, r4
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x26e>
 8000d42:	18e4      	adds	r4, r4, r3
 8000d44:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d48:	d229      	bcs.n	8000d9e <__udivmoddi4+0x2ba>
 8000d4a:	45a0      	cmp	r8, r4
 8000d4c:	d927      	bls.n	8000d9e <__udivmoddi4+0x2ba>
 8000d4e:	3802      	subs	r0, #2
 8000d50:	441c      	add	r4, r3
 8000d52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d56:	eba4 0408 	sub.w	r4, r4, r8
 8000d5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d5e:	454c      	cmp	r4, r9
 8000d60:	46c6      	mov	lr, r8
 8000d62:	464d      	mov	r5, r9
 8000d64:	d315      	bcc.n	8000d92 <__udivmoddi4+0x2ae>
 8000d66:	d012      	beq.n	8000d8e <__udivmoddi4+0x2aa>
 8000d68:	b156      	cbz	r6, 8000d80 <__udivmoddi4+0x29c>
 8000d6a:	ebba 030e 	subs.w	r3, sl, lr
 8000d6e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d72:	fa04 f707 	lsl.w	r7, r4, r7
 8000d76:	40cb      	lsrs	r3, r1
 8000d78:	431f      	orrs	r7, r3
 8000d7a:	40cc      	lsrs	r4, r1
 8000d7c:	6037      	str	r7, [r6, #0]
 8000d7e:	6074      	str	r4, [r6, #4]
 8000d80:	2100      	movs	r1, #0
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	4618      	mov	r0, r3
 8000d88:	e6f8      	b.n	8000b7c <__udivmoddi4+0x98>
 8000d8a:	4690      	mov	r8, r2
 8000d8c:	e6e0      	b.n	8000b50 <__udivmoddi4+0x6c>
 8000d8e:	45c2      	cmp	sl, r8
 8000d90:	d2ea      	bcs.n	8000d68 <__udivmoddi4+0x284>
 8000d92:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d96:	eb69 0503 	sbc.w	r5, r9, r3
 8000d9a:	3801      	subs	r0, #1
 8000d9c:	e7e4      	b.n	8000d68 <__udivmoddi4+0x284>
 8000d9e:	4628      	mov	r0, r5
 8000da0:	e7d7      	b.n	8000d52 <__udivmoddi4+0x26e>
 8000da2:	4640      	mov	r0, r8
 8000da4:	e791      	b.n	8000cca <__udivmoddi4+0x1e6>
 8000da6:	4681      	mov	r9, r0
 8000da8:	e7be      	b.n	8000d28 <__udivmoddi4+0x244>
 8000daa:	4601      	mov	r1, r0
 8000dac:	e778      	b.n	8000ca0 <__udivmoddi4+0x1bc>
 8000dae:	3802      	subs	r0, #2
 8000db0:	443c      	add	r4, r7
 8000db2:	e745      	b.n	8000c40 <__udivmoddi4+0x15c>
 8000db4:	4608      	mov	r0, r1
 8000db6:	e708      	b.n	8000bca <__udivmoddi4+0xe6>
 8000db8:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbc:	443d      	add	r5, r7
 8000dbe:	e72b      	b.n	8000c18 <__udivmoddi4+0x134>

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_Init+0x30>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dce:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dd6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dde:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f829 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f004 ff68 	bl	8005cbc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f004 fe14 	bl	8005a18 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000df0:	2000      	movs	r0, #0
 8000df2:	bd08      	pop	{r3, pc}
 8000df4:	40023c00 	.word	0x40023c00

08000df8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000df8:	4a02      	ldr	r2, [pc, #8]	; (8000e04 <HAL_IncTick+0xc>)
 8000dfa:	6813      	ldr	r3, [r2, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200040a0 	.word	0x200040a0

08000e08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e08:	4b01      	ldr	r3, [pc, #4]	; (8000e10 <HAL_GetTick+0x8>)
 8000e0a:	6818      	ldr	r0, [r3, #0]
}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	200040a0 	.word	0x200040a0

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000e14:	b530      	push	{r4, r5, lr}
 8000e16:	b083      	sub	sp, #12
 8000e18:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1a:	f7ff fff5 	bl	8000e08 <HAL_GetTick>
  uint32_t wait = Delay;
 8000e1e:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e20:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000e22:	4605      	mov	r5, r0
  {
     wait++;
 8000e24:	bf18      	it	ne
 8000e26:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e28:	f7ff ffee 	bl	8000e08 <HAL_GetTick>
 8000e2c:	1b40      	subs	r0, r0, r5
 8000e2e:	42a0      	cmp	r0, r4
 8000e30:	d3fa      	bcc.n	8000e28 <HAL_Delay+0x14>
  {
  }
}
 8000e32:	b003      	add	sp, #12
 8000e34:	bd30      	pop	{r4, r5, pc}
 8000e36:	bf00      	nop

08000e38 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e3a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000e40:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e42:	0200      	lsls	r0, r0, #8
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000e50:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e52:	60d3      	str	r3, [r2, #12]
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5e:	b470      	push	{r4, r5, r6}
 8000e60:	68dc      	ldr	r4, [r3, #12]
 8000e62:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e66:	f1c4 0607 	rsb	r6, r4, #7
 8000e6a:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	bf28      	it	cs
 8000e72:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e74:	2b06      	cmp	r3, #6
 8000e76:	d917      	bls.n	8000ea8 <HAL_NVIC_SetPriority+0x4c>
 8000e78:	3c03      	subs	r4, #3
 8000e7a:	2501      	movs	r5, #1
 8000e7c:	40a5      	lsls	r5, r4
 8000e7e:	3d01      	subs	r5, #1
 8000e80:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e82:	2301      	movs	r3, #1
 8000e84:	40b3      	lsls	r3, r6
 8000e86:	3b01      	subs	r3, #1
 8000e88:	4019      	ands	r1, r3
 8000e8a:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8000e8c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8000e92:	db0c      	blt.n	8000eae <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000e98:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000e9c:	0109      	lsls	r1, r1, #4
 8000e9e:	b2c9      	uxtb	r1, r1
 8000ea0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ea4:	bc70      	pop	{r4, r5, r6}
 8000ea6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4614      	mov	r4, r2
 8000eac:	e7e9      	b.n	8000e82 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_NVIC_SetPriority+0x68>)
 8000eb0:	f000 000f 	and.w	r0, r0, #15
 8000eb4:	0109      	lsls	r1, r1, #4
 8000eb6:	4403      	add	r3, r0
 8000eb8:	b2c9      	uxtb	r1, r1
 8000eba:	7619      	strb	r1, [r3, #24]
 8000ebc:	bc70      	pop	{r4, r5, r6}
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00
 8000ec4:	e000ecfc 	.word	0xe000ecfc

08000ec8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ec8:	f000 011f 	and.w	r1, r0, #31
 8000ecc:	2301      	movs	r3, #1
 8000ece:	0940      	lsrs	r0, r0, #5
 8000ed0:	4a02      	ldr	r2, [pc, #8]	; (8000edc <HAL_NVIC_EnableIRQ+0x14>)
 8000ed2:	408b      	lsls	r3, r1
 8000ed4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee0:	3801      	subs	r0, #1
 8000ee2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ee6:	d20e      	bcs.n	8000f06 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eea:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	4c08      	ldr	r4, [pc, #32]	; (8000f10 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eee:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	20f0      	movs	r0, #240	; 0xf0
 8000ef2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000efa:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f04:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000f16:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f18:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f1a:	bf0c      	ite	eq
 8000f1c:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f20:	f023 0304 	bicne.w	r3, r3, #4
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	4770      	bx	lr
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f30:	f8d1 c000 	ldr.w	ip, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f34:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800114c <HAL_GPIO_Init+0x220>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f38:	f8df e214 	ldr.w	lr, [pc, #532]	; 8001150 <HAL_GPIO_Init+0x224>
{
 8000f3c:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3e:	2500      	movs	r5, #0
 8000f40:	e003      	b.n	8000f4a <HAL_GPIO_Init+0x1e>
 8000f42:	3501      	adds	r5, #1
 8000f44:	2d10      	cmp	r5, #16
 8000f46:	f000 809b 	beq.w	8001080 <HAL_GPIO_Init+0x154>
    ioposition = 0x01U << position;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4e:	ea03 020c 	and.w	r2, r3, ip
    if(iocurrent == ioposition)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d1f5      	bne.n	8000f42 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f56:	684e      	ldr	r6, [r1, #4]
 8000f58:	f026 0a10 	bic.w	sl, r6, #16
 8000f5c:	f1ba 0f02 	cmp.w	sl, #2
 8000f60:	f000 8091 	beq.w	8001086 <HAL_GPIO_Init+0x15a>
 8000f64:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f68:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8000f6a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6e:	fa04 f409 	lsl.w	r4, r4, r9
 8000f72:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f74:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f78:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f7c:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f80:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f84:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f88:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8000f8c:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f8e:	f240 80a0 	bls.w	80010d2 <HAL_GPIO_Init+0x1a6>
      temp = GPIOx->PUPDR;
 8000f92:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f94:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f96:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f98:	fa03 f309 	lsl.w	r3, r3, r9
 8000f9c:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 8000f9e:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa0:	00f3      	lsls	r3, r6, #3
 8000fa2:	d5ce      	bpl.n	8000f42 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa4:	f04f 0900 	mov.w	r9, #0
 8000fa8:	f8cd 9004 	str.w	r9, [sp, #4]
 8000fac:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8000fb8:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
 8000fbc:	f025 0303 	bic.w	r3, r5, #3
 8000fc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fc4:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8000fc8:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8000fcc:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fce:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd4:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd8:	00a4      	lsls	r4, r4, #2
 8000fda:	270f      	movs	r7, #15
 8000fdc:	40a7      	lsls	r7, r4
 8000fde:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe2:	4f54      	ldr	r7, [pc, #336]	; (8001134 <HAL_GPIO_Init+0x208>)
 8000fe4:	42b8      	cmp	r0, r7
 8000fe6:	d022      	beq.n	800102e <HAL_GPIO_Init+0x102>
 8000fe8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000fec:	42b8      	cmp	r0, r7
 8000fee:	f000 8083 	beq.w	80010f8 <HAL_GPIO_Init+0x1cc>
 8000ff2:	4f51      	ldr	r7, [pc, #324]	; (8001138 <HAL_GPIO_Init+0x20c>)
 8000ff4:	42b8      	cmp	r0, r7
 8000ff6:	f000 8084 	beq.w	8001102 <HAL_GPIO_Init+0x1d6>
 8000ffa:	4f50      	ldr	r7, [pc, #320]	; (800113c <HAL_GPIO_Init+0x210>)
 8000ffc:	42b8      	cmp	r0, r7
 8000ffe:	f000 8085 	beq.w	800110c <HAL_GPIO_Init+0x1e0>
 8001002:	4f4f      	ldr	r7, [pc, #316]	; (8001140 <HAL_GPIO_Init+0x214>)
 8001004:	42b8      	cmp	r0, r7
 8001006:	f000 8086 	beq.w	8001116 <HAL_GPIO_Init+0x1ea>
 800100a:	4f4e      	ldr	r7, [pc, #312]	; (8001144 <HAL_GPIO_Init+0x218>)
 800100c:	42b8      	cmp	r0, r7
 800100e:	f000 8087 	beq.w	8001120 <HAL_GPIO_Init+0x1f4>
 8001012:	4f4d      	ldr	r7, [pc, #308]	; (8001148 <HAL_GPIO_Init+0x21c>)
 8001014:	42b8      	cmp	r0, r7
 8001016:	f000 8088 	beq.w	800112a <HAL_GPIO_Init+0x1fe>
 800101a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8001154 <HAL_GPIO_Init+0x228>
 800101e:	4548      	cmp	r0, r9
 8001020:	bf0c      	ite	eq
 8001022:	f04f 0907 	moveq.w	r9, #7
 8001026:	f04f 0908 	movne.w	r9, #8
 800102a:	fa09 f904 	lsl.w	r9, r9, r4
 800102e:	ea4a 0709 	orr.w	r7, sl, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001032:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 8001034:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001038:	43d4      	mvns	r4, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103a:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 800103c:	bf54      	ite	pl
 800103e:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001040:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 8001042:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001046:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800104a:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 800104c:	bf54      	ite	pl
 800104e:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001050:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 8001052:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001056:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800105a:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 800105c:	bf54      	ite	pl
 800105e:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001060:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 8001062:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001066:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800106a:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106c:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8001070:	bf54      	ite	pl
 8001072:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001074:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8001078:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107c:	f47f af65 	bne.w	8000f4a <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8001080:	b003      	add	sp, #12
 8001082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 8001086:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 800108a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800108e:	f005 0707 	and.w	r7, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 8001092:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001096:	00bf      	lsls	r7, r7, #2
 8001098:	f04f 0b0f 	mov.w	fp, #15
 800109c:	fa0b fb07 	lsl.w	fp, fp, r7
 80010a0:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a4:	690c      	ldr	r4, [r1, #16]
 80010a6:	40bc      	lsls	r4, r7
 80010a8:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 80010ac:	f8c9 4020 	str.w	r4, [r9, #32]
 80010b0:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b4:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 80010b6:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ba:	fa04 f409 	lsl.w	r4, r4, r9
 80010be:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c0:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c4:	ea0a 0a04 	and.w	sl, sl, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c8:	fa07 f709 	lsl.w	r7, r7, r9
 80010cc:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->MODER = temp;
 80010d0:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80010d2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d4:	ea07 0a04 	and.w	sl, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d8:	68cf      	ldr	r7, [r1, #12]
 80010da:	fa07 f709 	lsl.w	r7, r7, r9
 80010de:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80010e2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80010e4:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010e8:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ec:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010f0:	40af      	lsls	r7, r5
 80010f2:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 80010f4:	6047      	str	r7, [r0, #4]
 80010f6:	e74c      	b.n	8000f92 <HAL_GPIO_Init+0x66>
 80010f8:	f04f 0901 	mov.w	r9, #1
 80010fc:	fa09 f904 	lsl.w	r9, r9, r4
 8001100:	e795      	b.n	800102e <HAL_GPIO_Init+0x102>
 8001102:	f04f 0902 	mov.w	r9, #2
 8001106:	fa09 f904 	lsl.w	r9, r9, r4
 800110a:	e790      	b.n	800102e <HAL_GPIO_Init+0x102>
 800110c:	f04f 0903 	mov.w	r9, #3
 8001110:	fa09 f904 	lsl.w	r9, r9, r4
 8001114:	e78b      	b.n	800102e <HAL_GPIO_Init+0x102>
 8001116:	f04f 0904 	mov.w	r9, #4
 800111a:	fa09 f904 	lsl.w	r9, r9, r4
 800111e:	e786      	b.n	800102e <HAL_GPIO_Init+0x102>
 8001120:	f04f 0905 	mov.w	r9, #5
 8001124:	fa09 f904 	lsl.w	r9, r9, r4
 8001128:	e781      	b.n	800102e <HAL_GPIO_Init+0x102>
 800112a:	f04f 0906 	mov.w	r9, #6
 800112e:	fa09 f904 	lsl.w	r9, r9, r4
 8001132:	e77c      	b.n	800102e <HAL_GPIO_Init+0x102>
 8001134:	40020000 	.word	0x40020000
 8001138:	40020800 	.word	0x40020800
 800113c:	40020c00 	.word	0x40020c00
 8001140:	40021000 	.word	0x40021000
 8001144:	40021400 	.word	0x40021400
 8001148:	40021800 	.word	0x40021800
 800114c:	40023800 	.word	0x40023800
 8001150:	40013c00 	.word	0x40013c00
 8001154:	40021c00 	.word	0x40021c00

08001158 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001158:	6903      	ldr	r3, [r0, #16]
 800115a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800115c:	bf14      	ite	ne
 800115e:	2001      	movne	r0, #1
 8001160:	2000      	moveq	r0, #0
 8001162:	4770      	bx	lr

08001164 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001164:	b902      	cbnz	r2, 8001168 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001166:	0409      	lsls	r1, r1, #16
 8001168:	6181      	str	r1, [r0, #24]
 800116a:	4770      	bx	lr

0800116c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800116c:	6943      	ldr	r3, [r0, #20]
 800116e:	4059      	eors	r1, r3
 8001170:	6141      	str	r1, [r0, #20]
 8001172:	4770      	bx	lr

08001174 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001178:	4607      	mov	r7, r0
 800117a:	4690      	mov	r8, r2
 800117c:	4699      	mov	r9, r3
 800117e:	f3c1 4607 	ubfx	r6, r1, #16, #8
 8001182:	b28d      	uxth	r5, r1
 8001184:	683c      	ldr	r4, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001186:	2e01      	cmp	r6, #1
 8001188:	d01f      	beq.n	80011ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x56>
 800118a:	69a0      	ldr	r0, [r4, #24]
 800118c:	ea35 0300 	bics.w	r3, r5, r0
 8001190:	bf14      	ite	ne
 8001192:	2001      	movne	r0, #1
 8001194:	2000      	moveq	r0, #0
 8001196:	b300      	cbz	r0, 80011da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x66>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001198:	6960      	ldr	r0, [r4, #20]
 800119a:	0543      	lsls	r3, r0, #21
 800119c:	d41f      	bmi.n	80011de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x6a>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800119e:	f1b8 3fff 	cmp.w	r8, #4294967295
 80011a2:	d0f0      	beq.n	8001186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80011a4:	f1b8 0f00 	cmp.w	r8, #0
 80011a8:	d005      	beq.n	80011b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x42>
 80011aa:	f7ff fe2d 	bl	8000e08 <HAL_GetTick>
 80011ae:	eba0 0009 	sub.w	r0, r0, r9
 80011b2:	4580      	cmp	r8, r0
 80011b4:	d2e6      	bcs.n	8001184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80011b6:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80011b8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011bc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80011c0:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d

        return HAL_TIMEOUT;
 80011c4:	2003      	movs	r0, #3
 80011c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80011ca:	6962      	ldr	r2, [r4, #20]
 80011cc:	ea35 0302 	bics.w	r3, r5, r2
 80011d0:	bf14      	ite	ne
 80011d2:	2001      	movne	r0, #1
 80011d4:	2000      	moveq	r0, #0
 80011d6:	2800      	cmp	r0, #0
 80011d8:	d1de      	bne.n	8001198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x24>
      }
    }
  }
  return HAL_OK;
}
 80011da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80011de:	6823      	ldr	r3, [r4, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80011e0:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011e2:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80011e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80011ea:	2504      	movs	r5, #4
      hi2c->State= HAL_I2C_STATE_READY;
 80011ec:	2120      	movs	r1, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80011ee:	6023      	str	r3, [r4, #0]
      return HAL_ERROR;
 80011f0:	2001      	movs	r0, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011f2:	6166      	str	r6, [r4, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80011f4:	643d      	str	r5, [r7, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80011f6:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 80011fa:	633a      	str	r2, [r7, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80011fc:	f887 103d 	strb.w	r1, [r7, #61]	; 0x3d
      return HAL_ERROR;
 8001200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001204 <I2C_WaitOnFlagUntilTimeout>:
{
 8001204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001208:	4680      	mov	r8, r0
 800120a:	4617      	mov	r7, r2
 800120c:	461d      	mov	r5, r3
 800120e:	f3c1 4607 	ubfx	r6, r1, #16, #8
 8001212:	b28c      	uxth	r4, r1
 8001214:	f8d8 1000 	ldr.w	r1, [r8]
 8001218:	e009      	b.n	800122e <I2C_WaitOnFlagUntilTimeout+0x2a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800121a:	6988      	ldr	r0, [r1, #24]
 800121c:	ea34 0300 	bics.w	r3, r4, r0
 8001220:	bf0c      	ite	eq
 8001222:	2001      	moveq	r0, #1
 8001224:	2000      	movne	r0, #0
 8001226:	42b8      	cmp	r0, r7
 8001228:	d10b      	bne.n	8001242 <I2C_WaitOnFlagUntilTimeout+0x3e>
    if(Timeout != HAL_MAX_DELAY)
 800122a:	1c6b      	adds	r3, r5, #1
 800122c:	d10c      	bne.n	8001248 <I2C_WaitOnFlagUntilTimeout+0x44>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800122e:	2e01      	cmp	r6, #1
 8001230:	d1f3      	bne.n	800121a <I2C_WaitOnFlagUntilTimeout+0x16>
 8001232:	694b      	ldr	r3, [r1, #20]
 8001234:	ea34 0303 	bics.w	r3, r4, r3
 8001238:	bf0c      	ite	eq
 800123a:	2001      	moveq	r0, #1
 800123c:	2000      	movne	r0, #0
 800123e:	42b8      	cmp	r0, r7
 8001240:	d0f3      	beq.n	800122a <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001242:	2000      	movs	r0, #0
}
 8001244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001248:	b12d      	cbz	r5, 8001256 <I2C_WaitOnFlagUntilTimeout+0x52>
 800124a:	f7ff fddd 	bl	8000e08 <HAL_GetTick>
 800124e:	9b06      	ldr	r3, [sp, #24]
 8001250:	1ac0      	subs	r0, r0, r3
 8001252:	4285      	cmp	r5, r0
 8001254:	d2de      	bcs.n	8001214 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001256:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001258:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800125a:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800125e:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001262:	f888 203d 	strb.w	r2, [r8, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001266:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001268:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
 800126c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001270 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8001270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001272:	4604      	mov	r4, r0
 8001274:	460e      	mov	r6, r1
 8001276:	4617      	mov	r7, r2
 8001278:	6820      	ldr	r0, [r4, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800127a:	6943      	ldr	r3, [r0, #20]
 800127c:	f013 0304 	ands.w	r3, r3, #4
 8001280:	d124      	bne.n	80012cc <I2C_WaitOnBTFFlagUntilTimeout+0x5c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001282:	6945      	ldr	r5, [r0, #20]
 8001284:	056a      	lsls	r2, r5, #21
 8001286:	d50c      	bpl.n	80012a2 <I2C_WaitOnBTFFlagUntilTimeout+0x32>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001288:	f46f 6580 	mvn.w	r5, #1024	; 0x400

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800128c:	2104      	movs	r1, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800128e:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001290:	6145      	str	r5, [r0, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001292:	6421      	str	r1, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001294:	2001      	movs	r0, #1
    hi2c->PreviousState = I2C_STATE_NONE;
 8001296:	6323      	str	r3, [r4, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001298:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 800129c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80012a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012a2:	1c73      	adds	r3, r6, #1
 80012a4:	d0e9      	beq.n	800127a <I2C_WaitOnBTFFlagUntilTimeout+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80012a6:	b126      	cbz	r6, 80012b2 <I2C_WaitOnBTFFlagUntilTimeout+0x42>
 80012a8:	f7ff fdae 	bl	8000e08 <HAL_GetTick>
 80012ac:	1bc0      	subs	r0, r0, r7
 80012ae:	4286      	cmp	r6, r0
 80012b0:	d2e2      	bcs.n	8001278 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80012b4:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012b6:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State= HAL_I2C_STATE_READY;
 80012ba:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012bc:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80012be:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->PreviousState = I2C_STATE_NONE;
 80012c2:	6322      	str	r2, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80012c4:	2003      	movs	r0, #3
        hi2c->State= HAL_I2C_STATE_READY;
 80012c6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 80012ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80012cc:	2000      	movs	r0, #0
 80012ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080012d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 80012d0:	b570      	push	{r4, r5, r6, lr}
 80012d2:	4605      	mov	r5, r0
 80012d4:	460c      	mov	r4, r1
 80012d6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80012d8:	e008      	b.n	80012ec <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80012da:	6951      	ldr	r1, [r2, #20]
 80012dc:	06c9      	lsls	r1, r1, #27
 80012de:	d417      	bmi.n	8001310 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80012e0:	b15c      	cbz	r4, 80012fa <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 80012e2:	f7ff fd91 	bl	8000e08 <HAL_GetTick>
 80012e6:	1b80      	subs	r0, r0, r6
 80012e8:	4284      	cmp	r4, r0
 80012ea:	d306      	bcc.n	80012fa <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80012ec:	682a      	ldr	r2, [r5, #0]
 80012ee:	6953      	ldr	r3, [r2, #20]
 80012f0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80012f4:	d0f1      	beq.n	80012da <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
  return HAL_OK;
 80012f6:	2000      	movs	r0, #0
}
 80012f8:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012fa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80012fc:	2220      	movs	r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012fe:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 8001300:	2100      	movs	r1, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001302:	642b      	str	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001304:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001308:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 800130c:	2003      	movs	r0, #3
 800130e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001310:	f06f 0010 	mvn.w	r0, #16
      hi2c->State= HAL_I2C_STATE_READY;
 8001314:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001316:	6150      	str	r0, [r2, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001318:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800131a:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 800131c:	632b      	str	r3, [r5, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800131e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001322:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      return HAL_ERROR;
 8001326:	bd70      	pop	{r4, r5, r6, pc}

08001328 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132a:	4604      	mov	r4, r0
 800132c:	460e      	mov	r6, r1
 800132e:	4617      	mov	r7, r2
 8001330:	6820      	ldr	r0, [r4, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001332:	6943      	ldr	r3, [r0, #20]
 8001334:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8001338:	d124      	bne.n	8001384 <I2C_WaitOnTXEFlagUntilTimeout+0x5c>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800133a:	6945      	ldr	r5, [r0, #20]
 800133c:	056a      	lsls	r2, r5, #21
 800133e:	d50c      	bpl.n	800135a <I2C_WaitOnTXEFlagUntilTimeout+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001340:	f46f 6580 	mvn.w	r5, #1024	; 0x400
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001344:	2104      	movs	r1, #4
    hi2c->State= HAL_I2C_STATE_READY;
 8001346:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001348:	6145      	str	r5, [r0, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800134a:	6421      	str	r1, [r4, #64]	; 0x40
      return HAL_ERROR;
 800134c:	2001      	movs	r0, #1
    hi2c->PreviousState = I2C_STATE_NONE;
 800134e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001350:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001354:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800135a:	1c73      	adds	r3, r6, #1
 800135c:	d0e9      	beq.n	8001332 <I2C_WaitOnTXEFlagUntilTimeout+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800135e:	b126      	cbz	r6, 800136a <I2C_WaitOnTXEFlagUntilTimeout+0x42>
 8001360:	f7ff fd52 	bl	8000e08 <HAL_GetTick>
 8001364:	1bc0      	subs	r0, r0, r7
 8001366:	4286      	cmp	r6, r0
 8001368:	d2e2      	bcs.n	8001330 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800136a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800136c:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800136e:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State= HAL_I2C_STATE_READY;
 8001372:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001374:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001376:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->PreviousState = I2C_STATE_NONE;
 800137a:	6322      	str	r2, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800137c:	2003      	movs	r0, #3
        hi2c->State= HAL_I2C_STATE_READY;
 800137e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 8001382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;      
 8001384:	2000      	movs	r0, #0
 8001386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001388 <HAL_I2C_Init>:
  if(hi2c == NULL)
 8001388:	2800      	cmp	r0, #0
 800138a:	d06c      	beq.n	8001466 <HAL_I2C_Init+0xde>
{
 800138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800138e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001392:	4604      	mov	r4, r0
 8001394:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001398:	2b00      	cmp	r3, #0
 800139a:	d04f      	beq.n	800143c <HAL_I2C_Init+0xb4>
  __HAL_I2C_DISABLE(hi2c);
 800139c:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800139e:	4d33      	ldr	r5, [pc, #204]	; (800146c <HAL_I2C_Init+0xe4>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 80013a0:	2324      	movs	r3, #36	; 0x24
 80013a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80013a6:	6813      	ldr	r3, [r2, #0]
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013ae:	f001 fa1b 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
  freqrange = I2C_FREQRANGE(pclk1);
 80013b2:	4a2f      	ldr	r2, [pc, #188]	; (8001470 <HAL_I2C_Init+0xe8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013b4:	6861      	ldr	r1, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 80013b6:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80013b8:	fba2 6200 	umull	r6, r2, r2, r0
 80013bc:	0c92      	lsrs	r2, r2, #18
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013be:	42a9      	cmp	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80013c0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013c2:	d826      	bhi.n	8001412 <HAL_I2C_Init+0x8a>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80013c4:	0049      	lsls	r1, r1, #1
 80013c6:	fbb0 f0f1 	udiv	r0, r0, r1
 80013ca:	f3c0 010b 	ubfx	r1, r0, #0, #12
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013ce:	3201      	adds	r2, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80013d0:	2903      	cmp	r1, #3
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013d2:	621a      	str	r2, [r3, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80013d4:	bf98      	it	ls
 80013d6:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013d8:	69e5      	ldr	r5, [r4, #28]
 80013da:	f8d4 e020 	ldr.w	lr, [r4, #32]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80013de:	6921      	ldr	r1, [r4, #16]
 80013e0:	68e7      	ldr	r7, [r4, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80013e2:	6962      	ldr	r2, [r4, #20]
 80013e4:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80013e6:	61d8      	str	r0, [r3, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013e8:	ea45 050e 	orr.w	r5, r5, lr
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80013ec:	4339      	orrs	r1, r7
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80013ee:	4332      	orrs	r2, r6
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013f0:	601d      	str	r5, [r3, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80013f2:	6099      	str	r1, [r3, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80013f4:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 80013f6:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f8:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 80013fa:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80013fe:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8001400:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 8001402:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001404:	6422      	str	r2, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001406:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800140a:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800140c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  return HAL_OK;
 8001410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001412:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8001416:	4f17      	ldr	r7, [pc, #92]	; (8001474 <HAL_I2C_Init+0xec>)
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001418:	68a6      	ldr	r6, [r4, #8]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800141a:	fb05 f202 	mul.w	r2, r5, r2
 800141e:	fba7 5202 	umull	r5, r2, r7, r2
 8001422:	0992      	lsrs	r2, r2, #6
 8001424:	3201      	adds	r2, #1
 8001426:	621a      	str	r2, [r3, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001428:	b96e      	cbnz	r6, 8001446 <HAL_I2C_Init+0xbe>
 800142a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800142e:	fbb0 f0f1 	udiv	r0, r0, r1
 8001432:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8001436:	b99a      	cbnz	r2, 8001460 <HAL_I2C_Init+0xd8>
 8001438:	2001      	movs	r0, #1
 800143a:	e7cd      	b.n	80013d8 <HAL_I2C_Init+0x50>
    hi2c->Lock = HAL_UNLOCKED;
 800143c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001440:	f004 fb1a 	bl	8005a78 <HAL_I2C_MspInit>
 8001444:	e7aa      	b.n	800139c <HAL_I2C_Init+0x14>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001446:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800144a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800144e:	fbb0 f0f1 	udiv	r0, r0, r1
 8001452:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8001456:	2a00      	cmp	r2, #0
 8001458:	d0ee      	beq.n	8001438 <HAL_I2C_Init+0xb0>
 800145a:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800145e:	e7bb      	b.n	80013d8 <HAL_I2C_Init+0x50>
 8001460:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001464:	e7b8      	b.n	80013d8 <HAL_I2C_Init+0x50>
    return HAL_ERROR;
 8001466:	2001      	movs	r0, #1
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	000186a0 	.word	0x000186a0
 8001470:	431bde83 	.word	0x431bde83
 8001474:	10624dd3 	.word	0x10624dd3

08001478 <HAL_I2C_Master_Transmit>:
{
 8001478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800147c:	4604      	mov	r4, r0
 800147e:	b084      	sub	sp, #16
 8001480:	461f      	mov	r7, r3
 8001482:	4688      	mov	r8, r1
 8001484:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 8001486:	f7ff fcbf 	bl	8000e08 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800148a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800148e:	2b20      	cmp	r3, #32
 8001490:	d004      	beq.n	800149c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001492:	2502      	movs	r5, #2
}
 8001494:	4628      	mov	r0, r5
 8001496:	b004      	add	sp, #16
 8001498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800149c:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800149e:	9000      	str	r0, [sp, #0]
 80014a0:	2319      	movs	r3, #25
 80014a2:	2201      	movs	r2, #1
 80014a4:	4965      	ldr	r1, [pc, #404]	; (800163c <HAL_I2C_Master_Transmit+0x1c4>)
 80014a6:	4620      	mov	r0, r4
 80014a8:	f7ff feac 	bl	8001204 <I2C_WaitOnFlagUntilTimeout>
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d1f0      	bne.n	8001492 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80014b0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d0ec      	beq.n	8001492 <HAL_I2C_Master_Transmit+0x1a>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 80014bc:	2101      	movs	r1, #1
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014be:	07d2      	lsls	r2, r2, #31
    __HAL_LOCK(hi2c);
 80014c0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014c4:	d402      	bmi.n	80014cc <HAL_I2C_Master_Transmit+0x54>
      __HAL_I2C_ENABLE(hi2c);
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80014cc:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014ce:	495c      	ldr	r1, [pc, #368]	; (8001640 <HAL_I2C_Master_Transmit+0x1c8>)
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80014d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014d4:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014d6:	2221      	movs	r2, #33	; 0x21
 80014d8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014dc:	2210      	movs	r2, #16
 80014de:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e2:	2200      	movs	r2, #0
 80014e4:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80014e6:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014e8:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80014ea:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80014ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80014ee:	6265      	str	r5, [r4, #36]	; 0x24
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80014f0:	2a04      	cmp	r2, #4
    hi2c->XferSize    = hi2c->XferCount;
 80014f2:	8521      	strh	r1, [r4, #40]	; 0x28
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80014f4:	d019      	beq.n	800152a <HAL_I2C_Master_Transmit+0xb2>
 80014f6:	2a01      	cmp	r2, #1
 80014f8:	d017      	beq.n	800152a <HAL_I2C_Master_Transmit+0xb2>
 80014fa:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80014fe:	d014      	beq.n	800152a <HAL_I2C_Master_Transmit+0xb2>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001500:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001502:	2a12      	cmp	r2, #18
 8001504:	d011      	beq.n	800152a <HAL_I2C_Master_Transmit+0xb2>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001506:	9600      	str	r6, [sp, #0]
 8001508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800150a:	2200      	movs	r2, #0
 800150c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001510:	4620      	mov	r0, r4
 8001512:	f7ff fe77 	bl	8001204 <I2C_WaitOnFlagUntilTimeout>
 8001516:	b168      	cbz	r0, 8001534 <HAL_I2C_Master_Transmit+0xbc>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001518:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800151a:	2b04      	cmp	r3, #4
 800151c:	f000 8082 	beq.w	8001624 <HAL_I2C_Master_Transmit+0x1ac>
        __HAL_UNLOCK(hi2c);
 8001520:	2300      	movs	r3, #0
 8001522:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001526:	2503      	movs	r5, #3
 8001528:	e7b4      	b.n	8001494 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	e7e8      	b.n	8001506 <HAL_I2C_Master_Transmit+0x8e>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001534:	6923      	ldr	r3, [r4, #16]
 8001536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800153a:	d15e      	bne.n	80015fa <HAL_I2C_Master_Transmit+0x182>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8001542:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001544:	4633      	mov	r3, r6
 8001546:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001548:	493e      	ldr	r1, [pc, #248]	; (8001644 <HAL_I2C_Master_Transmit+0x1cc>)
 800154a:	4620      	mov	r0, r4
 800154c:	f7ff fe12 	bl	8001174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001550:	4605      	mov	r5, r0
 8001552:	b108      	cbz	r0, 8001558 <HAL_I2C_Master_Transmit+0xe0>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001554:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001556:	e7df      	b.n	8001518 <HAL_I2C_Master_Transmit+0xa0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	9003      	str	r0, [sp, #12]
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	9203      	str	r2, [sp, #12]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	9303      	str	r3, [sp, #12]
 8001564:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001566:	e030      	b.n	80015ca <HAL_I2C_Master_Transmit+0x152>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001568:	f7ff fede 	bl	8001328 <I2C_WaitOnTXEFlagUntilTimeout>
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800156c:	4632      	mov	r2, r6
 800156e:	990a      	ldr	r1, [sp, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001570:	2800      	cmp	r0, #0
 8001572:	d13d      	bne.n	80015f0 <HAL_I2C_Master_Transmit+0x178>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001574:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8001576:	f8d4 e000 	ldr.w	lr, [r4]
      hi2c->XferSize--;
 800157a:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800157e:	1c7b      	adds	r3, r7, #1
 8001580:	6263      	str	r3, [r4, #36]	; 0x24
 8001582:	783b      	ldrb	r3, [r7, #0]
 8001584:	f8ce 3010 	str.w	r3, [lr, #16]
      hi2c->XferCount--;
 8001588:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800158a:	3b01      	subs	r3, #1
 800158c:	b29b      	uxth	r3, r3
 800158e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001590:	f8de 8014 	ldr.w	r8, [lr, #20]
      hi2c->XferSize--;
 8001594:	f10c 33ff 	add.w	r3, ip, #4294967295
 8001598:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800159a:	f018 0f04 	tst.w	r8, #4
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800159e:	4620      	mov	r0, r4
      hi2c->XferSize--;
 80015a0:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015a2:	d00f      	beq.n	80015c4 <HAL_I2C_Master_Transmit+0x14c>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80015a4:	f107 0802 	add.w	r8, r7, #2
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015a8:	b163      	cbz	r3, 80015c4 <HAL_I2C_Master_Transmit+0x14c>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80015aa:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
 80015ae:	787b      	ldrb	r3, [r7, #1]
 80015b0:	f8ce 3010 	str.w	r3, [lr, #16]
        hi2c->XferCount--;
 80015b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015b6:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80015b8:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->XferCount--;
 80015bc:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80015be:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80015c2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c4:	f7ff fe54 	bl	8001270 <I2C_WaitOnBTFFlagUntilTimeout>
 80015c8:	b990      	cbnz	r0, 80015f0 <HAL_I2C_Master_Transmit+0x178>
    while(hi2c->XferSize > 0U)
 80015ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80015ce:	4632      	mov	r2, r6
 80015d0:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1c8      	bne.n	8001568 <HAL_I2C_Master_Transmit+0xf0>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80015d6:	6821      	ldr	r1, [r4, #0]
 80015d8:	680a      	ldr	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80015da:	2020      	movs	r0, #32
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80015dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015e0:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80015e2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80015e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80015ee:	e751      	b.n	8001494 <HAL_I2C_Master_Transmit+0x1c>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d01b      	beq.n	800162e <HAL_I2C_Master_Transmit+0x1b6>
          return HAL_TIMEOUT;
 80015f6:	2503      	movs	r5, #3
 80015f8:	e74c      	b.n	8001494 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80015fa:	ea4f 13e8 	mov.w	r3, r8, asr #7
 80015fe:	6822      	ldr	r2, [r4, #0]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001600:	4911      	ldr	r1, [pc, #68]	; (8001648 <HAL_I2C_Master_Transmit+0x1d0>)
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001602:	f003 0306 	and.w	r3, r3, #6
 8001606:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800160a:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800160c:	4620      	mov	r0, r4
 800160e:	4633      	mov	r3, r6
 8001610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001612:	f7ff fdaf 	bl	8001174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001616:	2800      	cmp	r0, #0
 8001618:	d19c      	bne.n	8001554 <HAL_I2C_Master_Transmit+0xdc>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800161a:	6822      	ldr	r2, [r4, #0]
 800161c:	fa5f f388 	uxtb.w	r3, r8
 8001620:	6113      	str	r3, [r2, #16]
 8001622:	e78f      	b.n	8001544 <HAL_I2C_Master_Transmit+0xcc>
        __HAL_UNLOCK(hi2c);
 8001624:	2300      	movs	r3, #0
 8001626:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800162a:	2501      	movs	r5, #1
 800162c:	e732      	b.n	8001494 <HAL_I2C_Master_Transmit+0x1c>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800162e:	6822      	ldr	r2, [r4, #0]
 8001630:	6813      	ldr	r3, [r2, #0]
 8001632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001636:	6013      	str	r3, [r2, #0]
          return HAL_ERROR;
 8001638:	2501      	movs	r5, #1
 800163a:	e72b      	b.n	8001494 <HAL_I2C_Master_Transmit+0x1c>
 800163c:	00100002 	.word	0x00100002
 8001640:	ffff0000 	.word	0xffff0000
 8001644:	00010002 	.word	0x00010002
 8001648:	00010008 	.word	0x00010008

0800164c <HAL_I2C_Master_Receive>:
{
 800164c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001650:	4604      	mov	r4, r0
 8001652:	b088      	sub	sp, #32
 8001654:	4698      	mov	r8, r3
 8001656:	460d      	mov	r5, r1
 8001658:	4617      	mov	r7, r2
  tickstart = HAL_GetTick();
 800165a:	f7ff fbd5 	bl	8000e08 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800165e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001662:	2b20      	cmp	r3, #32
 8001664:	d004      	beq.n	8001670 <HAL_I2C_Master_Receive+0x24>
    return HAL_BUSY;
 8001666:	2502      	movs	r5, #2
}
 8001668:	4628      	mov	r0, r5
 800166a:	b008      	add	sp, #32
 800166c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001670:	4606      	mov	r6, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001672:	9000      	str	r0, [sp, #0]
 8001674:	2319      	movs	r3, #25
 8001676:	2201      	movs	r2, #1
 8001678:	49a2      	ldr	r1, [pc, #648]	; (8001904 <HAL_I2C_Master_Receive+0x2b8>)
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff fdc2 	bl	8001204 <I2C_WaitOnFlagUntilTimeout>
 8001680:	2800      	cmp	r0, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_I2C_Master_Receive+0x1a>
    __HAL_LOCK(hi2c);
 8001684:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001688:	2b01      	cmp	r3, #1
 800168a:	d0ec      	beq.n	8001666 <HAL_I2C_Master_Receive+0x1a>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800168c:	6823      	ldr	r3, [r4, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 8001690:	2101      	movs	r1, #1
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001692:	07d0      	lsls	r0, r2, #31
    __HAL_LOCK(hi2c);
 8001694:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001698:	d402      	bmi.n	80016a0 <HAL_I2C_Master_Receive+0x54>
      __HAL_I2C_ENABLE(hi2c);
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80016a0:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016a2:	4999      	ldr	r1, [pc, #612]	; (8001908 <HAL_I2C_Master_Receive+0x2bc>)
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80016a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016a8:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80016aa:	2222      	movs	r2, #34	; 0x22
 80016ac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016b0:	2210      	movs	r2, #16
 80016b2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016b6:	2200      	movs	r2, #0
 80016b8:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80016ba:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016be:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80016c0:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80016c4:	681a      	ldr	r2, [r3, #0]
    hi2c->pBuffPtr    = pData;
 80016c6:	6267      	str	r7, [r4, #36]	; 0x24
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80016c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016cc:	2904      	cmp	r1, #4
    hi2c->XferSize    = hi2c->XferCount;
 80016ce:	8520      	strh	r0, [r4, #40]	; 0x28
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80016d0:	601a      	str	r2, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016d2:	d019      	beq.n	8001708 <HAL_I2C_Master_Receive+0xbc>
 80016d4:	2901      	cmp	r1, #1
 80016d6:	d017      	beq.n	8001708 <HAL_I2C_Master_Receive+0xbc>
 80016d8:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80016dc:	d014      	beq.n	8001708 <HAL_I2C_Master_Receive+0xbc>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80016de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80016e0:	2a11      	cmp	r2, #17
 80016e2:	d011      	beq.n	8001708 <HAL_I2C_Master_Receive+0xbc>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016e4:	9600      	str	r6, [sp, #0]
 80016e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80016e8:	2200      	movs	r2, #0
 80016ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016ee:	4620      	mov	r0, r4
 80016f0:	f7ff fd88 	bl	8001204 <I2C_WaitOnFlagUntilTimeout>
 80016f4:	b168      	cbz	r0, 8001712 <HAL_I2C_Master_Receive+0xc6>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	f000 80f9 	beq.w	80018f0 <HAL_I2C_Master_Receive+0x2a4>
        __HAL_UNLOCK(hi2c);
 80016fe:	2300      	movs	r3, #0
 8001700:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001704:	2503      	movs	r5, #3
 8001706:	e7af      	b.n	8001668 <HAL_I2C_Master_Receive+0x1c>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e7e8      	b.n	80016e4 <HAL_I2C_Master_Receive+0x98>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001712:	6923      	ldr	r3, [r4, #16]
 8001714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001718:	f040 80b3 	bne.w	8001882 <HAL_I2C_Master_Receive+0x236>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800171c:	f045 0301 	orr.w	r3, r5, #1
 8001720:	6822      	ldr	r2, [r4, #0]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	6113      	str	r3, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001726:	4633      	mov	r3, r6
 8001728:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800172a:	4978      	ldr	r1, [pc, #480]	; (800190c <HAL_I2C_Master_Receive+0x2c0>)
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff fd21 	bl	8001174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001732:	4605      	mov	r5, r0
 8001734:	b108      	cbz	r0, 800173a <HAL_I2C_Master_Receive+0xee>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001738:	e7dd      	b.n	80016f6 <HAL_I2C_Master_Receive+0xaa>
    if(hi2c->XferSize == 0U)
 800173a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800173c:	b99b      	cbnz	r3, 8001766 <HAL_I2C_Master_Receive+0x11a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	9503      	str	r5, [sp, #12]
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	9203      	str	r2, [sp, #12]
 8001746:	699a      	ldr	r2, [r3, #24]
 8001748:	9203      	str	r2, [sp, #12]
 800174a:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001752:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001754:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001756:	2220      	movs	r2, #32
 8001758:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800175c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001760:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001764:	e780      	b.n	8001668 <HAL_I2C_Master_Receive+0x1c>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001766:	6822      	ldr	r2, [r4, #0]
    else if(hi2c->XferSize == 1U)
 8001768:	2b01      	cmp	r3, #1
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800176a:	6811      	ldr	r1, [r2, #0]
    else if(hi2c->XferSize == 1U)
 800176c:	f000 80d4 	beq.w	8001918 <HAL_I2C_Master_Receive+0x2cc>
    else if(hi2c->XferSize == 2U)
 8001770:	2b02      	cmp	r3, #2
 8001772:	f000 80df 	beq.w	8001934 <HAL_I2C_Master_Receive+0x2e8>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001776:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800177a:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800177c:	9506      	str	r5, [sp, #24]
 800177e:	6951      	ldr	r1, [r2, #20]
 8001780:	9106      	str	r1, [sp, #24]
 8001782:	6992      	ldr	r2, [r2, #24]
 8001784:	9206      	str	r2, [sp, #24]
 8001786:	9a06      	ldr	r2, [sp, #24]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001788:	4f61      	ldr	r7, [pc, #388]	; (8001910 <HAL_I2C_Master_Receive+0x2c4>)
      if(hi2c->XferSize <= 3U)
 800178a:	2b03      	cmp	r3, #3
 800178c:	d84c      	bhi.n	8001828 <HAL_I2C_Master_Receive+0x1dc>
        if(hi2c->XferSize == 1U)
 800178e:	2b01      	cmp	r3, #1
 8001790:	d069      	beq.n	8001866 <HAL_I2C_Master_Receive+0x21a>
        else if(hi2c->XferSize == 2U)
 8001792:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001794:	9600      	str	r6, [sp, #0]
 8001796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	4639      	mov	r1, r7
 800179e:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 80017a0:	d01c      	beq.n	80017dc <HAL_I2C_Master_Receive+0x190>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017a2:	f7ff fd2f 	bl	8001204 <I2C_WaitOnFlagUntilTimeout>
 80017a6:	2800      	cmp	r0, #0
 80017a8:	d169      	bne.n	800187e <HAL_I2C_Master_Receive+0x232>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80017aa:	6823      	ldr	r3, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80017ac:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80017b0:	6819      	ldr	r1, [r3, #0]
 80017b2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80017b6:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	f10e 0201 	add.w	r2, lr, #1
 80017be:	6262      	str	r2, [r4, #36]	; 0x24
 80017c0:	f88e 3000 	strb.w	r3, [lr]
          hi2c->XferCount--;
 80017c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80017c6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017c8:	9600      	str	r6, [sp, #0]
          hi2c->XferCount--;
 80017ca:	3b01      	subs	r3, #1
 80017cc:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 80017ce:	3901      	subs	r1, #1
          hi2c->XferCount--;
 80017d0:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
          hi2c->XferSize--;
 80017d4:	8521      	strh	r1, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017d6:	4602      	mov	r2, r0
 80017d8:	4639      	mov	r1, r7
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff fd12 	bl	8001204 <I2C_WaitOnFlagUntilTimeout>
 80017e0:	2800      	cmp	r0, #0
 80017e2:	d14c      	bne.n	800187e <HAL_I2C_Master_Receive+0x232>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80017e4:	6823      	ldr	r3, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80017e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ee:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	1c4a      	adds	r2, r1, #1
 80017f4:	6262      	str	r2, [r4, #36]	; 0x24
 80017f6:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80017f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80017fa:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80017fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80017fe:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 8001800:	3b01      	subs	r3, #1
 8001802:	b29b      	uxth	r3, r3
 8001804:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001806:	6912      	ldr	r2, [r2, #16]
          hi2c->XferSize--;
 8001808:	1e4b      	subs	r3, r1, #1
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800180a:	1c41      	adds	r1, r0, #1
          hi2c->XferSize--;
 800180c:	8523      	strh	r3, [r4, #40]	; 0x28
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800180e:	6261      	str	r1, [r4, #36]	; 0x24
 8001810:	7002      	strb	r2, [r0, #0]
          hi2c->XferSize--;
 8001812:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001814:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8001816:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8001818:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 800181a:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 800181c:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 800181e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001820:	8562      	strh	r2, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1b1      	bne.n	800178a <HAL_I2C_Master_Receive+0x13e>
 8001826:	e795      	b.n	8001754 <HAL_I2C_Master_Receive+0x108>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001828:	4632      	mov	r2, r6
 800182a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800182c:	4620      	mov	r0, r4
 800182e:	f7ff fd4f 	bl	80012d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001832:	2800      	cmp	r0, #0
 8001834:	d161      	bne.n	80018fa <HAL_I2C_Master_Receive+0x2ae>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001838:	6822      	ldr	r2, [r4, #0]
 800183a:	1c59      	adds	r1, r3, #1
 800183c:	6912      	ldr	r2, [r2, #16]
 800183e:	6261      	str	r1, [r4, #36]	; 0x24
 8001840:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8001842:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001844:	6821      	ldr	r1, [r4, #0]
        hi2c->XferSize--;
 8001846:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001848:	3a01      	subs	r2, #1
 800184a:	b292      	uxth	r2, r2
 800184c:	8562      	strh	r2, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800184e:	694a      	ldr	r2, [r1, #20]
        hi2c->XferSize--;
 8001850:	3b01      	subs	r3, #1
 8001852:	b29b      	uxth	r3, r3
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001854:	0752      	lsls	r2, r2, #29
        hi2c->XferSize--;
 8001856:	8523      	strh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001858:	d5e3      	bpl.n	8001822 <HAL_I2C_Master_Receive+0x1d6>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800185a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800185c:	690a      	ldr	r2, [r1, #16]
 800185e:	1c59      	adds	r1, r3, #1
 8001860:	6261      	str	r1, [r4, #36]	; 0x24
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	e7d5      	b.n	8001812 <HAL_I2C_Master_Receive+0x1c6>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001866:	4632      	mov	r2, r6
 8001868:	990e      	ldr	r1, [sp, #56]	; 0x38
 800186a:	4620      	mov	r0, r4
 800186c:	f7ff fd30 	bl	80012d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001870:	2800      	cmp	r0, #0
 8001872:	d142      	bne.n	80018fa <HAL_I2C_Master_Receive+0x2ae>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001874:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001876:	6822      	ldr	r2, [r4, #0]
 8001878:	1c59      	adds	r1, r3, #1
 800187a:	6912      	ldr	r2, [r2, #16]
 800187c:	e7f0      	b.n	8001860 <HAL_I2C_Master_Receive+0x214>
              return HAL_TIMEOUT;
 800187e:	2503      	movs	r5, #3
 8001880:	e6f2      	b.n	8001668 <HAL_I2C_Master_Receive+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001882:	11ef      	asrs	r7, r5, #7
 8001884:	6823      	ldr	r3, [r4, #0]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001886:	4923      	ldr	r1, [pc, #140]	; (8001914 <HAL_I2C_Master_Receive+0x2c8>)
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001888:	f007 0706 	and.w	r7, r7, #6
 800188c:	f047 02f0 	orr.w	r2, r7, #240	; 0xf0
 8001890:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001892:	4620      	mov	r0, r4
 8001894:	4633      	mov	r3, r6
 8001896:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001898:	f7ff fc6c 	bl	8001174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800189c:	2800      	cmp	r0, #0
 800189e:	f47f af4a 	bne.w	8001736 <HAL_I2C_Master_Receive+0xea>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018a2:	6823      	ldr	r3, [r4, #0]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80018a6:	4919      	ldr	r1, [pc, #100]	; (800190c <HAL_I2C_Master_Receive+0x2c0>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018a8:	b2ed      	uxtb	r5, r5
 80018aa:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018ac:	4620      	mov	r0, r4
 80018ae:	4633      	mov	r3, r6
 80018b0:	f7ff fc60 	bl	8001174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018b4:	4602      	mov	r2, r0
 80018b6:	2800      	cmp	r0, #0
 80018b8:	f47f af3d 	bne.w	8001736 <HAL_I2C_Master_Receive+0xea>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	9007      	str	r0, [sp, #28]
 80018c0:	6959      	ldr	r1, [r3, #20]
 80018c2:	9107      	str	r1, [sp, #28]
 80018c4:	6999      	ldr	r1, [r3, #24]
 80018c6:	9107      	str	r1, [sp, #28]
 80018c8:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80018ca:	6819      	ldr	r1, [r3, #0]
 80018cc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80018d0:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018d2:	4620      	mov	r0, r4
 80018d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80018d6:	9600      	str	r6, [sp, #0]
 80018d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018dc:	f7ff fc92 	bl	8001204 <I2C_WaitOnFlagUntilTimeout>
 80018e0:	2800      	cmp	r0, #0
 80018e2:	f47f af08 	bne.w	80016f6 <HAL_I2C_Master_Receive+0xaa>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	f047 07f1 	orr.w	r7, r7, #241	; 0xf1
 80018ec:	611f      	str	r7, [r3, #16]
 80018ee:	e71a      	b.n	8001726 <HAL_I2C_Master_Receive+0xda>
        __HAL_UNLOCK(hi2c);
 80018f0:	2300      	movs	r3, #0
 80018f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80018f6:	2501      	movs	r5, #1
 80018f8:	e6b6      	b.n	8001668 <HAL_I2C_Master_Receive+0x1c>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80018fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	d0be      	beq.n	800187e <HAL_I2C_Master_Receive+0x232>
              return HAL_ERROR;
 8001900:	2501      	movs	r5, #1
 8001902:	e6b1      	b.n	8001668 <HAL_I2C_Master_Receive+0x1c>
 8001904:	00100002 	.word	0x00100002
 8001908:	ffff0000 	.word	0xffff0000
 800190c:	00010002 	.word	0x00010002
 8001910:	00010004 	.word	0x00010004
 8001914:	00010008 	.word	0x00010008
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001918:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800191c:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800191e:	9504      	str	r5, [sp, #16]
 8001920:	6951      	ldr	r1, [r2, #20]
 8001922:	9104      	str	r1, [sp, #16]
 8001924:	6991      	ldr	r1, [r2, #24]
 8001926:	9104      	str	r1, [sp, #16]
 8001928:	9904      	ldr	r1, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800192a:	6811      	ldr	r1, [r2, #0]
 800192c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001930:	6011      	str	r1, [r2, #0]
 8001932:	e729      	b.n	8001788 <HAL_I2C_Master_Receive+0x13c>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001934:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001938:	6011      	str	r1, [r2, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800193a:	6811      	ldr	r1, [r2, #0]
 800193c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001940:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001942:	9505      	str	r5, [sp, #20]
 8001944:	6951      	ldr	r1, [r2, #20]
 8001946:	9105      	str	r1, [sp, #20]
 8001948:	6992      	ldr	r2, [r2, #24]
 800194a:	9205      	str	r2, [sp, #20]
 800194c:	9a05      	ldr	r2, [sp, #20]
 800194e:	e71b      	b.n	8001788 <HAL_I2C_Master_Receive+0x13c>

08001950 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001950:	2800      	cmp	r0, #0
 8001952:	d068      	beq.n	8001a26 <HAL_PCD_Init+0xd6>
{ 
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001956:	2303      	movs	r3, #3
 8001958:	4605      	mov	r5, r0
{ 
 800195a:	b08b      	sub	sp, #44	; 0x2c
  hpcd->State = HAL_PCD_STATE_BUSY;
 800195c:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001960:	4604      	mov	r4, r0
  HAL_PCD_MspInit(hpcd);
 8001962:	f004 fa8f 	bl	8005e84 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8001966:	6828      	ldr	r0, [r5, #0]
 8001968:	f001 faa0 	bl	8002eac <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800196c:	f854 eb10 	ldr.w	lr, [r4], #16
 8001970:	4627      	mov	r7, r4
 8001972:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001974:	466e      	mov	r6, sp
 8001976:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001978:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800197a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800197c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8001980:	e886 0003 	stmia.w	r6, {r0, r1}
 8001984:	1d2e      	adds	r6, r5, #4
 8001986:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800198a:	4670      	mov	r0, lr
 800198c:	f001 fa4a 	bl	8002e24 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8001990:	2100      	movs	r1, #0
 8001992:	6828      	ldr	r0, [r5, #0]
 8001994:	f001 fa92 	bl	8002ebc <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8001998:	2100      	movs	r1, #0
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800199a:	4608      	mov	r0, r1
 800199c:	462b      	mov	r3, r5
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 800199e:	462a      	mov	r2, r5
   hpcd->IN_ep[i].is_in = 1U;
 80019a0:	2701      	movs	r7, #1
   hpcd->IN_ep[i].num = i;
 80019a2:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 80019a6:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 80019a8:	3101      	adds	r1, #1
 80019aa:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 80019ac:	f882 7039 	strb.w	r7, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019b0:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 80019b4:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 80019b6:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 80019b8:	64d0      	str	r0, [r2, #76]	; 0x4c
 80019ba:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 80019be:	d1f0      	bne.n	80019a2 <HAL_PCD_Init+0x52>
 80019c0:	2200      	movs	r2, #0
 80019c2:	682f      	ldr	r7, [r5, #0]
 }
 
 for (i = 0U; i < 15U; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
 80019c4:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80019c6:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 80019ca:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 80019ce:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 80019d0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 80019d4:	3201      	adds	r2, #1
 80019d6:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 80019d8:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019dc:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 80019e0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 80019e4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 80019e8:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 80019ec:	f103 031c 	add.w	r3, r3, #28
   hpcd->Instance->DIEPTXF[i] = 0U;
 80019f0:	6041      	str	r1, [r0, #4]
 for (i = 0U; i < 15U; i++)
 80019f2:	d1e8      	bne.n	80019c6 <HAL_PCD_Init+0x76>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80019f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f6:	46ee      	mov	lr, sp
 80019f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80019fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001a02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a06:	e88e 0003 	stmia.w	lr, {r0, r1}
 8001a0a:	4638      	mov	r0, r7
 8001a0c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001a10:	f001 fa6e 	bl	8002ef0 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8001a14:	2301      	movs	r3, #1
 8001a16:	f885 33b9 	strb.w	r3, [r5, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8001a1a:	6828      	ldr	r0, [r5, #0]
 8001a1c:	f001 fdc4 	bl	80035a8 <USB_DevDisconnect>
 return HAL_OK;
 8001a20:	2000      	movs	r0, #0
}
 8001a22:	b00b      	add	sp, #44	; 0x2c
 8001a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001a26:	2001      	movs	r0, #1
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop

08001a2c <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8001a2c:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_PCD_Start+0xc>
 8001a34:	2002      	movs	r0, #2
 8001a36:	4770      	bx	lr
{ 
 8001a38:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8001a42:	6800      	ldr	r0, [r0, #0]
 8001a44:	f001 fda4 	bl	8003590 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001a48:	6820      	ldr	r0, [r4, #0]
 8001a4a:	f001 fa27 	bl	8002e9c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001a54:	bd10      	pop	{r4, pc}
 8001a56:	bf00      	nop

08001a58 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a5c:	6807      	ldr	r7, [r0, #0]
{
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a62:	4638      	mov	r0, r7
 8001a64:	f001 fddc 	bl	8003620 <USB_GetMode>
 8001a68:	b110      	cbz	r0, 8001a70 <HAL_PCD_IRQHandler+0x18>
        HAL_PCD_DisconnectCallback(hpcd);
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8001a6a:	b009      	add	sp, #36	; 0x24
 8001a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a70:	4606      	mov	r6, r0
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8001a72:	6820      	ldr	r0, [r4, #0]
 8001a74:	f001 fda4 	bl	80035c0 <USB_ReadInterrupts>
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	d0f6      	beq.n	8001a6a <HAL_PCD_IRQHandler+0x12>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a7c:	6820      	ldr	r0, [r4, #0]
 8001a7e:	f001 fd9f 	bl	80035c0 <USB_ReadInterrupts>
 8001a82:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a86:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a88:	d003      	beq.n	8001a92 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a8a:	6943      	ldr	r3, [r0, #20]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	6143      	str	r3, [r0, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a92:	f001 fd95 	bl	80035c0 <USB_ReadInterrupts>
 8001a96:	0303      	lsls	r3, r0, #12
 8001a98:	f100 81a5 	bmi.w	8001de6 <HAL_PCD_IRQHandler+0x38e>
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8001a9c:	f04f 0a00 	mov.w	sl, #0
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001aa0:	6820      	ldr	r0, [r4, #0]
 8001aa2:	f001 fd8d 	bl	80035c0 <USB_ReadInterrupts>
 8001aa6:	0345      	lsls	r5, r0, #13
 8001aa8:	f100 80cf 	bmi.w	8001c4a <HAL_PCD_IRQHandler+0x1f2>
 8001aac:	6823      	ldr	r3, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f001 fd86 	bl	80035c0 <USB_ReadInterrupts>
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	f2c0 820b 	blt.w	8001ed0 <HAL_PCD_IRQHandler+0x478>
 8001aba:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001abc:	f001 fd80 	bl	80035c0 <USB_ReadInterrupts>
 8001ac0:	0501      	lsls	r1, r0, #20
 8001ac2:	d448      	bmi.n	8001b56 <HAL_PCD_IRQHandler+0xfe>
 8001ac4:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ac6:	f001 fd7b 	bl	80035c0 <USB_ReadInterrupts>
 8001aca:	04c3      	lsls	r3, r0, #19
 8001acc:	d47f      	bmi.n	8001bce <HAL_PCD_IRQHandler+0x176>
 8001ace:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ad0:	f001 fd76 	bl	80035c0 <USB_ReadInterrupts>
 8001ad4:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      USB_ActivateSetup(hpcd->Instance);
 8001ad8:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ada:	d15a      	bne.n	8001b92 <HAL_PCD_IRQHandler+0x13a>
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001adc:	f001 fd70 	bl	80035c0 <USB_ReadInterrupts>
 8001ae0:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ae4:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ae6:	d011      	beq.n	8001b0c <HAL_PCD_IRQHandler+0xb4>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ae8:	6983      	ldr	r3, [r0, #24]
 8001aea:	f023 0310 	bic.w	r3, r3, #16
 8001aee:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8001af0:	6a3d      	ldr	r5, [r7, #32]
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8001af2:	f3c5 4343 	ubfx	r3, r5, #17, #4
 8001af6:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001af8:	f005 060f 	and.w	r6, r5, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8001afc:	f000 81cb 	beq.w	8001e96 <HAL_PCD_IRQHandler+0x43e>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8001b00:	2b06      	cmp	r3, #6
 8001b02:	d033      	beq.n	8001b6c <HAL_PCD_IRQHandler+0x114>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b04:	6983      	ldr	r3, [r0, #24]
 8001b06:	f043 0310 	orr.w	r3, r3, #16
 8001b0a:	6183      	str	r3, [r0, #24]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b0c:	f001 fd58 	bl	80035c0 <USB_ReadInterrupts>
 8001b10:	0707      	lsls	r7, r0, #28
 8001b12:	f100 815f 	bmi.w	8001dd4 <HAL_PCD_IRQHandler+0x37c>
 8001b16:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b18:	f001 fd52 	bl	80035c0 <USB_ReadInterrupts>
 8001b1c:	02c6      	lsls	r6, r0, #11
 8001b1e:	f100 814e 	bmi.w	8001dbe <HAL_PCD_IRQHandler+0x366>
 8001b22:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b24:	f001 fd4c 	bl	80035c0 <USB_ReadInterrupts>
 8001b28:	0285      	lsls	r5, r0, #10
 8001b2a:	f100 813d 	bmi.w	8001da8 <HAL_PCD_IRQHandler+0x350>
 8001b2e:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b30:	f001 fd46 	bl	80035c0 <USB_ReadInterrupts>
 8001b34:	0040      	lsls	r0, r0, #1
 8001b36:	f100 812e 	bmi.w	8001d96 <HAL_PCD_IRQHandler+0x33e>
 8001b3a:	6820      	ldr	r0, [r4, #0]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b3c:	f001 fd40 	bl	80035c0 <USB_ReadInterrupts>
 8001b40:	0741      	lsls	r1, r0, #29
 8001b42:	d592      	bpl.n	8001a6a <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	685d      	ldr	r5, [r3, #4]
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b48:	076a      	lsls	r2, r5, #29
 8001b4a:	f100 8192 	bmi.w	8001e72 <HAL_PCD_IRQHandler+0x41a>
      hpcd->Instance->GOTGINT |= temp;
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4315      	orrs	r5, r2
 8001b52:	605d      	str	r5, [r3, #4]
 8001b54:	e789      	b.n	8001a6a <HAL_PCD_IRQHandler+0x12>
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b56:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8001b5a:	07da      	lsls	r2, r3, #31
 8001b5c:	f100 818e 	bmi.w	8001e7c <HAL_PCD_IRQHandler+0x424>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b60:	6820      	ldr	r0, [r4, #0]
 8001b62:	6943      	ldr	r3, [r0, #20]
 8001b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b68:	6143      	str	r3, [r0, #20]
 8001b6a:	e7ac      	b.n	8001ac6 <HAL_PCD_IRQHandler+0x6e>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8001b72:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001b74:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b78:	f001 fcb6 	bl	80034e8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001b7c:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 8001b80:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8001b84:	f8d2 1210 	ldr.w	r1, [r2, #528]	; 0x210
 8001b88:	6820      	ldr	r0, [r4, #0]
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
 8001b90:	e7b8      	b.n	8001b04 <HAL_PCD_IRQHandler+0xac>
      USB_ActivateSetup(hpcd->Instance);
 8001b92:	f001 fd49 	bl	8003628 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001b96:	6820      	ldr	r0, [r4, #0]
 8001b98:	68c3      	ldr	r3, [r0, #12]
 8001b9a:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8001b9e:	60c3      	str	r3, [r0, #12]
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8001ba0:	f001 fa74 	bl	800308c <USB_GetDevSpeed>
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	f040 81d1 	bne.w	8001f4c <HAL_PCD_IRQHandler+0x4f4>
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001baa:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8001bac:	60e0      	str	r0, [r4, #12]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001bae:	68d3      	ldr	r3, [r2, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8001bb0:	f44f 7100 	mov.w	r1, #512	; 0x200
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001bb4:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8001bb8:	6161      	str	r1, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001bba:	60d3      	str	r3, [r2, #12]
      HAL_PCD_ResetCallback(hpcd);
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f004 f9b1 	bl	8005f24 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001bc2:	6820      	ldr	r0, [r4, #0]
 8001bc4:	6943      	ldr	r3, [r0, #20]
 8001bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bca:	6143      	str	r3, [r0, #20]
 8001bcc:	e786      	b.n	8001adc <HAL_PCD_IRQHandler+0x84>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001bce:	f507 6500 	add.w	r5, r7, #2048	; 0x800
 8001bd2:	686b      	ldr	r3, [r5, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8001bd4:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001bd6:	f023 0301 	bic.w	r3, r3, #1
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8001bda:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001bdc:	606b      	str	r3, [r5, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8001bde:	f001 fa43 	bl	8003068 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be2:	6860      	ldr	r0, [r4, #4]
 8001be4:	b150      	cbz	r0, 8001bfc <HAL_PCD_IRQHandler+0x1a4>
 8001be6:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8001bea:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bec:	3601      	adds	r6, #1
 8001bee:	4286      	cmp	r6, r0
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8001bf0:	609a      	str	r2, [r3, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8001bf2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8001bf6:	f103 0320 	add.w	r3, r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bfa:	d1f7      	bne.n	8001bec <HAL_PCD_IRQHandler+0x194>
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001c00:	61ab      	str	r3, [r5, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c02:	69eb      	ldr	r3, [r5, #28]
      if(hpcd->Init.use_dedicated_ep1)
 8001c04:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c06:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c0a:	61eb      	str	r3, [r5, #28]
      if(hpcd->Init.use_dedicated_ep1)
 8001c0c:	2a00      	cmp	r2, #0
 8001c0e:	f000 8139 	beq.w	8001e84 <HAL_PCD_IRQHandler+0x42c>
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8001c12:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8001c16:	f043 030b 	orr.w	r3, r3, #11
 8001c1a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8001c1e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001c20:	f043 030b 	orr.w	r3, r3, #11
 8001c24:	646b      	str	r3, [r5, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c26:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001c2a:	7c21      	ldrb	r1, [r4, #16]
 8001c2c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c32:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001c36:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001c3a:	f001 fd11 	bl	8003660 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c3e:	6820      	ldr	r0, [r4, #0]
 8001c40:	6943      	ldr	r3, [r0, #20]
 8001c42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c46:	6143      	str	r3, [r0, #20]
 8001c48:	e742      	b.n	8001ad0 <HAL_PCD_IRQHandler+0x78>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c4a:	6820      	ldr	r0, [r4, #0]
 8001c4c:	f001 fcc4 	bl	80035d8 <USB_ReadDevAllInEpInterrupt>
      while ( ep_intr )
 8001c50:	4683      	mov	fp, r0
 8001c52:	2800      	cmp	r0, #0
 8001c54:	f000 8196 	beq.w	8001f84 <HAL_PCD_IRQHandler+0x52c>
 8001c58:	6823      	ldr	r3, [r4, #0]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001c5a:	9703      	str	r7, [sp, #12]
 8001c5c:	f507 6910 	add.w	r9, r7, #2304	; 0x900
 8001c60:	4625      	mov	r5, r4
      while ( ep_intr )
 8001c62:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001c66:	9604      	str	r6, [sp, #16]
 8001c68:	461f      	mov	r7, r3
 8001c6a:	e009      	b.n	8001c80 <HAL_PCD_IRQHandler+0x228>
      while ( ep_intr )
 8001c6c:	ea5f 0b5b 	movs.w	fp, fp, lsr #1
        epnum++;
 8001c70:	f10a 0a01 	add.w	sl, sl, #1
 8001c74:	f105 051c 	add.w	r5, r5, #28
 8001c78:	f109 0920 	add.w	r9, r9, #32
      while ( ep_intr )
 8001c7c:	f000 80ee 	beq.w	8001e5c <HAL_PCD_IRQHandler+0x404>
        if (ep_intr & 0x1U) /* In ITR */
 8001c80:	f01b 0f01 	tst.w	fp, #1
 8001c84:	d0f2      	beq.n	8001c6c <HAL_PCD_IRQHandler+0x214>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001c86:	fa5f f88a 	uxtb.w	r8, sl
 8001c8a:	4638      	mov	r0, r7
 8001c8c:	4641      	mov	r1, r8
 8001c8e:	f001 fcb5 	bl	80035fc <USB_ReadDevInEPInterrupt>
 8001c92:	4606      	mov	r6, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c94:	07f0      	lsls	r0, r6, #31
 8001c96:	d518      	bpl.n	8001cca <HAL_PCD_IRQHandler+0x272>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c98:	9b03      	ldr	r3, [sp, #12]
            if (hpcd->Init.dma_enable == 1U)
 8001c9a:	6920      	ldr	r0, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c9c:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	fa02 f20a 	lsl.w	r2, r2, sl
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ca6:	ea21 0202 	bic.w	r2, r1, r2
 8001caa:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cae:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 8001cb0:	4298      	cmp	r0, r3
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cb2:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 8001cb6:	f000 8128 	beq.w	8001f0a <HAL_PCD_IRQHandler+0x4b2>
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8001cba:	4641      	mov	r1, r8
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	f004 f923 	bl	8005f08 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8001cc2:	6921      	ldr	r1, [r4, #16]
 8001cc4:	2901      	cmp	r1, #1
 8001cc6:	f000 8112 	beq.w	8001eee <HAL_PCD_IRQHandler+0x496>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001cca:	0731      	lsls	r1, r6, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ccc:	bf44      	itt	mi
 8001cce:	2308      	movmi	r3, #8
 8001cd0:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001cd4:	06f2      	lsls	r2, r6, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001cd6:	bf44      	itt	mi
 8001cd8:	2310      	movmi	r3, #16
 8001cda:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001cde:	0673      	lsls	r3, r6, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ce0:	bf44      	itt	mi
 8001ce2:	2340      	movmi	r3, #64	; 0x40
 8001ce4:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ce8:	07b7      	lsls	r7, r6, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001cea:	bf44      	itt	mi
 8001cec:	2302      	movmi	r3, #2
 8001cee:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001cf2:	0630      	lsls	r0, r6, #24
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001cf4:	6827      	ldr	r7, [r4, #0]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001cf6:	d5b9      	bpl.n	8001c6c <HAL_PCD_IRQHandler+0x214>
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001cf8:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8001cfc:	eb03 134a 	add.w	r3, r3, sl, lsl #5
  len = ep->xfer_len - ep->xfer_count;
 8001d00:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8001d02:	f8d5 c050 	ldr.w	ip, [r5, #80]	; 0x50
  if (len > ep->maxpacket)
 8001d06:	6c2a      	ldr	r2, [r5, #64]	; 0x40
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001d08:	9706      	str	r7, [sp, #24]
 8001d0a:	4619      	mov	r1, r3
  len = ep->xfer_len - ep->xfer_count;
 8001d0c:	eba0 030c 	sub.w	r3, r0, ip
 8001d10:	4293      	cmp	r3, r2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001d12:	9105      	str	r1, [sp, #20]
 8001d14:	6989      	ldr	r1, [r1, #24]
 8001d16:	461e      	mov	r6, r3
 8001d18:	bf28      	it	cs
 8001d1a:	4616      	movcs	r6, r2
 8001d1c:	b289      	uxth	r1, r1
  len32b = (len + 3U) / 4U;
 8001d1e:	f106 0e03 	add.w	lr, r6, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001d22:	ebb1 0f9e 	cmp.w	r1, lr, lsr #2
 8001d26:	d928      	bls.n	8001d7a <HAL_PCD_IRQHandler+0x322>
 8001d28:	4560      	cmp	r0, ip
 8001d2a:	d926      	bls.n	8001d7a <HAL_PCD_IRQHandler+0x322>
          (ep->xfer_count < ep->xfer_len) &&
 8001d2c:	b328      	cbz	r0, 8001d7a <HAL_PCD_IRQHandler+0x322>
 8001d2e:	f8cd a01c 	str.w	sl, [sp, #28]
 8001d32:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001d34:	f8dd a014 	ldr.w	sl, [sp, #20]
 8001d38:	461e      	mov	r6, r3
 8001d3a:	e004      	b.n	8001d46 <HAL_PCD_IRQHandler+0x2ee>
 8001d3c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d918      	bls.n	8001d74 <HAL_PCD_IRQHandler+0x31c>
 8001d42:	1ad6      	subs	r6, r2, r3
 8001d44:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001d46:	7c23      	ldrb	r3, [r4, #16]
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4296      	cmp	r6, r2
 8001d4c:	bf28      	it	cs
 8001d4e:	4616      	movcs	r6, r2
 8001d50:	b2b3      	uxth	r3, r6
 8001d52:	4642      	mov	r2, r8
 8001d54:	4638      	mov	r0, r7
 8001d56:	f001 fbb1 	bl	80034bc <USB_WritePacket>
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001d5a:	f8da 2018 	ldr.w	r2, [sl, #24]
    
    ep->xfer_buff  += len;
 8001d5e:	6c69      	ldr	r1, [r5, #68]	; 0x44
    ep->xfer_count += len;
 8001d60:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 8001d62:	1cf0      	adds	r0, r6, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001d64:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 8001d66:	4431      	add	r1, r6
    ep->xfer_count += len;
 8001d68:	4433      	add	r3, r6
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001d6a:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 8001d6e:	6469      	str	r1, [r5, #68]	; 0x44
    ep->xfer_count += len;
 8001d70:	652b      	str	r3, [r5, #80]	; 0x50
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001d72:	d8e3      	bhi.n	8001d3c <HAL_PCD_IRQHandler+0x2e4>
 8001d74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8001d78:	6827      	ldr	r7, [r4, #0]
  }
  
  if(len <= 0U)
 8001d7a:	2e00      	cmp	r6, #0
 8001d7c:	f47f af76 	bne.w	8001c6c <HAL_PCD_IRQHandler+0x214>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d80:	9b06      	ldr	r3, [sp, #24]
    fifoemptymsk = 0x1U << epnum;
 8001d82:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d84:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 8001d88:	fa02 f20a 	lsl.w	r2, r2, sl
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d8c:	ea21 0202 	bic.w	r2, r1, r2
 8001d90:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8001d94:	e76a      	b.n	8001c6c <HAL_PCD_IRQHandler+0x214>
      HAL_PCD_ConnectCallback(hpcd);
 8001d96:	4620      	mov	r0, r4
 8001d98:	f004 f8f8 	bl	8005f8c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d9c:	6820      	ldr	r0, [r4, #0]
 8001d9e:	6943      	ldr	r3, [r0, #20]
 8001da0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001da4:	6143      	str	r3, [r0, #20]
 8001da6:	e6c9      	b.n	8001b3c <HAL_PCD_IRQHandler+0xe4>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8001da8:	4620      	mov	r0, r4
 8001daa:	fa5f f18a 	uxtb.w	r1, sl
 8001dae:	f004 f8e5 	bl	8005f7c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001db2:	6820      	ldr	r0, [r4, #0]
 8001db4:	6943      	ldr	r3, [r0, #20]
 8001db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dba:	6143      	str	r3, [r0, #20]
 8001dbc:	e6b8      	b.n	8001b30 <HAL_PCD_IRQHandler+0xd8>
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	fa5f f18a 	uxtb.w	r1, sl
 8001dc4:	f004 f8de 	bl	8005f84 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dc8:	6820      	ldr	r0, [r4, #0]
 8001dca:	6943      	ldr	r3, [r0, #20]
 8001dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd0:	6143      	str	r3, [r0, #20]
 8001dd2:	e6a7      	b.n	8001b24 <HAL_PCD_IRQHandler+0xcc>
      HAL_PCD_SOFCallback(hpcd);
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f004 f8a1 	bl	8005f1c <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001dda:	6820      	ldr	r0, [r4, #0]
 8001ddc:	6943      	ldr	r3, [r0, #20]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	6143      	str	r3, [r0, #20]
 8001de4:	e698      	b.n	8001b18 <HAL_PCD_IRQHandler+0xc0>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001de6:	6820      	ldr	r0, [r4, #0]
 8001de8:	f001 fbee 	bl	80035c8 <USB_ReadDevAllOutEpInterrupt>
      while ( ep_intr )
 8001dec:	4605      	mov	r5, r0
 8001dee:	2800      	cmp	r0, #0
 8001df0:	f43f ae54 	beq.w	8001a9c <HAL_PCD_IRQHandler+0x44>
 8001df4:	f507 6830 	add.w	r8, r7, #2816	; 0xb00
 8001df8:	46a1      	mov	r9, r4
 8001dfa:	f04f 0a00 	mov.w	sl, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001dfe:	9603      	str	r6, [sp, #12]
 8001e00:	e007      	b.n	8001e12 <HAL_PCD_IRQHandler+0x3ba>
      while ( ep_intr )
 8001e02:	086d      	lsrs	r5, r5, #1
        epnum++;
 8001e04:	f10a 0a01 	add.w	sl, sl, #1
 8001e08:	f108 0820 	add.w	r8, r8, #32
 8001e0c:	f109 091c 	add.w	r9, r9, #28
      while ( ep_intr )
 8001e10:	d022      	beq.n	8001e58 <HAL_PCD_IRQHandler+0x400>
        if (ep_intr & 0x1U)
 8001e12:	07ee      	lsls	r6, r5, #31
 8001e14:	d5f5      	bpl.n	8001e02 <HAL_PCD_IRQHandler+0x3aa>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001e16:	fa5f f68a 	uxtb.w	r6, sl
 8001e1a:	4631      	mov	r1, r6
 8001e1c:	6820      	ldr	r0, [r4, #0]
 8001e1e:	f001 fbe3 	bl	80035e8 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e22:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001e26:	4683      	mov	fp, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e28:	d00c      	beq.n	8001e44 <HAL_PCD_IRQHandler+0x3ec>
            if(hpcd->Init.dma_enable == 1U)
 8001e2a:	6922      	ldr	r2, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e2c:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 8001e2e:	429a      	cmp	r2, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e30:	f8c8 3008 	str.w	r3, [r8, #8]
            if(hpcd->Init.dma_enable == 1U)
 8001e34:	d07b      	beq.n	8001f2e <HAL_PCD_IRQHandler+0x4d6>
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8001e36:	4631      	mov	r1, r6
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f004 f85b 	bl	8005ef4 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8001e3e:	6921      	ldr	r1, [r4, #16]
 8001e40:	2901      	cmp	r1, #1
 8001e42:	d067      	beq.n	8001f14 <HAL_PCD_IRQHandler+0x4bc>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e44:	f01b 0f08 	tst.w	fp, #8
 8001e48:	d10c      	bne.n	8001e64 <HAL_PCD_IRQHandler+0x40c>
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e4a:	f01b 0f10 	tst.w	fp, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e4e:	bf1c      	itt	ne
 8001e50:	2310      	movne	r3, #16
 8001e52:	f8c8 3008 	strne.w	r3, [r8, #8]
 8001e56:	e7d4      	b.n	8001e02 <HAL_PCD_IRQHandler+0x3aa>
 8001e58:	9e03      	ldr	r6, [sp, #12]
 8001e5a:	e621      	b.n	8001aa0 <HAL_PCD_IRQHandler+0x48>
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	9e04      	ldr	r6, [sp, #16]
 8001e60:	9f03      	ldr	r7, [sp, #12]
 8001e62:	e624      	b.n	8001aae <HAL_PCD_IRQHandler+0x56>
            HAL_PCD_SetupStageCallback(hpcd);
 8001e64:	4620      	mov	r0, r4
 8001e66:	f004 f83f 	bl	8005ee8 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e6a:	2308      	movs	r3, #8
 8001e6c:	f8c8 3008 	str.w	r3, [r8, #8]
 8001e70:	e7eb      	b.n	8001e4a <HAL_PCD_IRQHandler+0x3f2>
        HAL_PCD_DisconnectCallback(hpcd);
 8001e72:	4620      	mov	r0, r4
 8001e74:	f004 f88e 	bl	8005f94 <HAL_PCD_DisconnectCallback>
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	e668      	b.n	8001b4e <HAL_PCD_IRQHandler+0xf6>
        HAL_PCD_SuspendCallback(hpcd);
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f004 f861 	bl	8005f44 <HAL_PCD_SuspendCallback>
 8001e82:	e66d      	b.n	8001b60 <HAL_PCD_IRQHandler+0x108>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8001e84:	696b      	ldr	r3, [r5, #20]
 8001e86:	f043 030b 	orr.w	r3, r3, #11
 8001e8a:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8001e8c:	692b      	ldr	r3, [r5, #16]
 8001e8e:	f043 030b 	orr.w	r3, r3, #11
 8001e92:	612b      	str	r3, [r5, #16]
 8001e94:	e6c7      	b.n	8001c26 <HAL_PCD_IRQHandler+0x1ce>
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e96:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e9a:	421d      	tst	r5, r3
 8001e9c:	f43f ae32 	beq.w	8001b04 <HAL_PCD_IRQHandler+0xac>
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8001ea0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8001ea4:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8001ea8:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8001eac:	462a      	mov	r2, r5
 8001eae:	4638      	mov	r0, r7
 8001eb0:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
 8001eb4:	f001 fb18 	bl	80034e8 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001eb8:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001ebc:	f8d6 3210 	ldr.w	r3, [r6, #528]	; 0x210
 8001ec0:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001ec2:	442a      	add	r2, r5
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001ec4:	442b      	add	r3, r5
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001ec6:	f8c6 2204 	str.w	r2, [r6, #516]	; 0x204
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001eca:	f8c6 3210 	str.w	r3, [r6, #528]	; 0x210
 8001ece:	e619      	b.n	8001b04 <HAL_PCD_IRQHandler+0xac>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ed0:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8001ed4:	f022 0201 	bic.w	r2, r2, #1
        HAL_PCD_ResumeCallback(hpcd);
 8001ed8:	4620      	mov	r0, r4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001eda:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
        HAL_PCD_ResumeCallback(hpcd);
 8001ede:	f004 f849 	bl	8005f74 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ee2:	6820      	ldr	r0, [r4, #0]
 8001ee4:	6943      	ldr	r3, [r0, #20]
 8001ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001eea:	6143      	str	r3, [r0, #20]
 8001eec:	e5e6      	b.n	8001abc <HAL_PCD_IRQHandler+0x64>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001eee:	f1ba 0f00 	cmp.w	sl, #0
 8001ef2:	f47f aeea 	bne.w	8001cca <HAL_PCD_IRQHandler+0x272>
 8001ef6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f47f aee6 	bne.w	8001cca <HAL_PCD_IRQHandler+0x272>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001efe:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001f02:	6820      	ldr	r0, [r4, #0]
 8001f04:	f001 fbac 	bl	8003660 <USB_EP0_OutStart>
 8001f08:	e6df      	b.n	8001cca <HAL_PCD_IRQHandler+0x272>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8001f0a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001f0c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001f0e:	4413      	add	r3, r2
 8001f10:	646b      	str	r3, [r5, #68]	; 0x44
 8001f12:	e6d2      	b.n	8001cba <HAL_PCD_IRQHandler+0x262>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f14:	f1ba 0f00 	cmp.w	sl, #0
 8001f18:	d194      	bne.n	8001e44 <HAL_PCD_IRQHandler+0x3ec>
 8001f1a:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d190      	bne.n	8001e44 <HAL_PCD_IRQHandler+0x3ec>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f22:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001f26:	6820      	ldr	r0, [r4, #0]
 8001f28:	f001 fb9a 	bl	8003660 <USB_EP0_OutStart>
 8001f2c:	e78a      	b.n	8001e44 <HAL_PCD_IRQHandler+0x3ec>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001f2e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8001f32:	f8d9 0200 	ldr.w	r0, [r9, #512]	; 0x200
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8001f36:	f8d9 1204 	ldr.w	r1, [r9, #516]	; 0x204
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001f3a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001f3e:	1a82      	subs	r2, r0, r2
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8001f40:	4401      	add	r1, r0
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001f42:	f8c9 2210 	str.w	r2, [r9, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8001f46:	f8c9 1204 	str.w	r1, [r9, #516]	; 0x204
 8001f4a:	e774      	b.n	8001e36 <HAL_PCD_IRQHandler+0x3de>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8001f4c:	2203      	movs	r2, #3
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8001f4e:	2340      	movs	r3, #64	; 0x40
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8001f50:	60e2      	str	r2, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8001f52:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8001f54:	f000 fc42 	bl	80027dc <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8001f58:	4b36      	ldr	r3, [pc, #216]	; (8002034 <HAL_PCD_IRQHandler+0x5dc>)
 8001f5a:	4a37      	ldr	r2, [pc, #220]	; (8002038 <HAL_PCD_IRQHandler+0x5e0>)
 8001f5c:	4403      	add	r3, r0
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d805      	bhi.n	8001f6e <HAL_PCD_IRQHandler+0x516>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001f62:	6822      	ldr	r2, [r4, #0]
 8001f64:	68d3      	ldr	r3, [r2, #12]
 8001f66:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8001f6a:	60d3      	str	r3, [r2, #12]
 8001f6c:	e626      	b.n	8001bbc <HAL_PCD_IRQHandler+0x164>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8001f6e:	4b33      	ldr	r3, [pc, #204]	; (800203c <HAL_PCD_IRQHandler+0x5e4>)
 8001f70:	4a33      	ldr	r2, [pc, #204]	; (8002040 <HAL_PCD_IRQHandler+0x5e8>)
 8001f72:	4403      	add	r3, r0
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d807      	bhi.n	8001f88 <HAL_PCD_IRQHandler+0x530>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001f78:	6822      	ldr	r2, [r4, #0]
 8001f7a:	68d3      	ldr	r3, [r2, #12]
 8001f7c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f80:	60d3      	str	r3, [r2, #12]
 8001f82:	e61b      	b.n	8001bbc <HAL_PCD_IRQHandler+0x164>
      epnum = 0U;
 8001f84:	4682      	mov	sl, r0
 8001f86:	e591      	b.n	8001aac <HAL_PCD_IRQHandler+0x54>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8001f88:	f5a0 0374 	sub.w	r3, r0, #15990784	; 0xf40000
 8001f8c:	4a2d      	ldr	r2, [pc, #180]	; (8002044 <HAL_PCD_IRQHandler+0x5ec>)
 8001f8e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d805      	bhi.n	8001fa2 <HAL_PCD_IRQHandler+0x54a>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001f96:	6822      	ldr	r2, [r4, #0]
 8001f98:	68d3      	ldr	r3, [r2, #12]
 8001f9a:	f443 5350 	orr.w	r3, r3, #13312	; 0x3400
 8001f9e:	60d3      	str	r3, [r2, #12]
 8001fa0:	e60c      	b.n	8001bbc <HAL_PCD_IRQHandler+0x164>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8001fa2:	f1a0 7383 	sub.w	r3, r0, #17170432	; 0x1060000
 8001fa6:	4a28      	ldr	r2, [pc, #160]	; (8002048 <HAL_PCD_IRQHandler+0x5f0>)
 8001fa8:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d805      	bhi.n	8001fbc <HAL_PCD_IRQHandler+0x564>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001fb0:	6822      	ldr	r2, [r4, #0]
 8001fb2:	68d3      	ldr	r3, [r2, #12]
 8001fb4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001fb8:	60d3      	str	r3, [r2, #12]
 8001fba:	e5ff      	b.n	8001bbc <HAL_PCD_IRQHandler+0x164>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8001fbc:	4b23      	ldr	r3, [pc, #140]	; (800204c <HAL_PCD_IRQHandler+0x5f4>)
 8001fbe:	4a24      	ldr	r2, [pc, #144]	; (8002050 <HAL_PCD_IRQHandler+0x5f8>)
 8001fc0:	4403      	add	r3, r0
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d805      	bhi.n	8001fd2 <HAL_PCD_IRQHandler+0x57a>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001fc6:	6822      	ldr	r2, [r4, #0]
 8001fc8:	68d3      	ldr	r3, [r2, #12]
 8001fca:	f443 5330 	orr.w	r3, r3, #11264	; 0x2c00
 8001fce:	60d3      	str	r3, [r2, #12]
 8001fd0:	e5f4      	b.n	8001bbc <HAL_PCD_IRQHandler+0x164>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8001fd2:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_PCD_IRQHandler+0x5fc>)
 8001fd4:	4a20      	ldr	r2, [pc, #128]	; (8002058 <HAL_PCD_IRQHandler+0x600>)
 8001fd6:	4403      	add	r3, r0
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d805      	bhi.n	8001fe8 <HAL_PCD_IRQHandler+0x590>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001fdc:	6822      	ldr	r2, [r4, #0]
 8001fde:	68d3      	ldr	r3, [r2, #12]
 8001fe0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001fe4:	60d3      	str	r3, [r2, #12]
 8001fe6:	e5e9      	b.n	8001bbc <HAL_PCD_IRQHandler+0x164>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <HAL_PCD_IRQHandler+0x604>)
 8001fea:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <HAL_PCD_IRQHandler+0x608>)
 8001fec:	4403      	add	r3, r0
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d805      	bhi.n	8001ffe <HAL_PCD_IRQHandler+0x5a6>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001ff2:	6822      	ldr	r2, [r4, #0]
 8001ff4:	68d3      	ldr	r3, [r2, #12]
 8001ff6:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8001ffa:	60d3      	str	r3, [r2, #12]
 8001ffc:	e5de      	b.n	8001bbc <HAL_PCD_IRQHandler+0x164>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8001ffe:	f1a0 73b7 	sub.w	r3, r0, #23986176	; 0x16e0000
 8002002:	4a18      	ldr	r2, [pc, #96]	; (8002064 <HAL_PCD_IRQHandler+0x60c>)
 8002004:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8002008:	4293      	cmp	r3, r2
 800200a:	d805      	bhi.n	8002018 <HAL_PCD_IRQHandler+0x5c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800200c:	6822      	ldr	r2, [r4, #0]
 800200e:	68d3      	ldr	r3, [r2, #12]
 8002010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002014:	60d3      	str	r3, [r2, #12]
 8002016:	e5d1      	b.n	8001bbc <HAL_PCD_IRQHandler+0x164>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_PCD_IRQHandler+0x610>)
 800201a:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_PCD_IRQHandler+0x614>)
 800201c:	4403      	add	r3, r0
 800201e:	4293      	cmp	r3, r2
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002020:	6822      	ldr	r2, [r4, #0]
 8002022:	68d3      	ldr	r3, [r2, #12]
 8002024:	bf94      	ite	ls
 8002026:	f443 53e0 	orrls.w	r3, r3, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800202a:	f443 53c0 	orrhi.w	r3, r3, #6144	; 0x1800
 800202e:	60d3      	str	r3, [r2, #12]
 8002030:	e5c4      	b.n	8001bbc <HAL_PCD_IRQHandler+0x164>
 8002032:	bf00      	nop
 8002034:	ff275340 	.word	0xff275340
 8002038:	000c34ff 	.word	0x000c34ff
 800203c:	ff1b1e40 	.word	0xff1b1e40
 8002040:	000f423f 	.word	0x000f423f
 8002044:	00124f7f 	.word	0x00124f7f
 8002048:	0013d61f 	.word	0x0013d61f
 800204c:	fee5b660 	.word	0xfee5b660
 8002050:	0016e35f 	.word	0x0016e35f
 8002054:	feced300 	.word	0xfeced300
 8002058:	001b773f 	.word	0x001b773f
 800205c:	feb35bc0 	.word	0xfeb35bc0
 8002060:	002191bf 	.word	0x002191bf
 8002064:	0038751f 	.word	0x0038751f
 8002068:	fe5954e0 	.word	0xfe5954e0
 800206c:	00419cdf 	.word	0x00419cdf

08002070 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8002070:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_PCD_SetAddress+0xc>
 8002078:	2002      	movs	r0, #2
 800207a:	4770      	bx	lr
{
 800207c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 800207e:	2301      	movs	r3, #1
 8002080:	4604      	mov	r4, r0
 8002082:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8002086:	6800      	ldr	r0, [r0, #0]
 8002088:	f001 fa72 	bl	8003570 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 800208c:	2000      	movs	r0, #0
 800208e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8002092:	bd10      	pop	{r4, pc}

08002094 <HAL_PCD_EP_Open>:
{
 8002094:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8002096:	060c      	lsls	r4, r1, #24
 8002098:	d41b      	bmi.n	80020d2 <HAL_PCD_EP_Open+0x3e>
  ep->num   = ep_addr & 0x7F;
 800209a:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
 800209e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80020a2:	241c      	movs	r4, #28
  ep->is_in = (0x80 & ep_addr) != 0;
 80020a4:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80020a6:	fb04 0401 	mla	r4, r4, r1, r0
  ep->num   = ep_addr & 0x7F;
 80020aa:	f885 11f8 	strb.w	r1, [r5, #504]	; 0x1f8
  ep->maxpacket = ep_mps;
 80020ae:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
  ep->type = ep_type;
 80020b2:	f885 31fb 	strb.w	r3, [r5, #507]	; 0x1fb
  ep->is_in = (0x80 & ep_addr) != 0;
 80020b6:	f885 61f9 	strb.w	r6, [r5, #505]	; 0x1f9
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80020ba:	f504 71fc 	add.w	r1, r4, #504	; 0x1f8
  if (ep_type == EP_TYPE_BULK )
 80020be:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80020c0:	bf04      	itt	eq
 80020c2:	2300      	moveq	r3, #0
 80020c4:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd); 
 80020c6:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d116      	bne.n	80020fc <HAL_PCD_EP_Open+0x68>
 80020ce:	2002      	movs	r0, #2
}
 80020d0:	bd70      	pop	{r4, r5, r6, pc}
 80020d2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  ep->num   = ep_addr & 0x7F;
 80020d6:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
 80020da:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80020de:	241c      	movs	r4, #28
  ep->is_in = (0x80 & ep_addr) != 0;
 80020e0:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80020e2:	fb04 0401 	mla	r4, r4, r1, r0
  ep->num   = ep_addr & 0x7F;
 80020e6:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
    ep->tx_fifo_num = ep->num;
 80020ea:	87e9      	strh	r1, [r5, #62]	; 0x3e
  ep->maxpacket = ep_mps;
 80020ec:	642a      	str	r2, [r5, #64]	; 0x40
  ep->type = ep_type;
 80020ee:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
  ep->is_in = (0x80 & ep_addr) != 0;
 80020f2:	f885 6039 	strb.w	r6, [r5, #57]	; 0x39
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80020f6:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80020fa:	e7e0      	b.n	80020be <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd); 
 80020fc:	2301      	movs	r3, #1
 80020fe:	4604      	mov	r4, r0
 8002100:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8002104:	6800      	ldr	r0, [r0, #0]
 8002106:	f000 ffdd 	bl	80030c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 800210a:	2000      	movs	r0, #0
 800210c:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 8002110:	bd70      	pop	{r4, r5, r6, pc}
 8002112:	bf00      	nop

08002114 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8002114:	b24a      	sxtb	r2, r1
 8002116:	2a00      	cmp	r2, #0
{  
 8002118:	b510      	push	{r4, lr}
 800211a:	4604      	mov	r4, r0
  if ((ep_addr & 0x80) == 0x80)
 800211c:	db18      	blt.n	8002150 <HAL_PCD_EP_Close+0x3c>
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800211e:	231c      	movs	r3, #28
 8002120:	fb03 0301 	mla	r3, r3, r1, r0
 8002124:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 8002128:	0fd2      	lsrs	r2, r2, #31
 800212a:	705a      	strb	r2, [r3, #1]
  ep->num   = ep_addr & 0x7F;
 800212c:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd); 
 800212e:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 8002132:	2a01      	cmp	r2, #1
 8002134:	d101      	bne.n	800213a <HAL_PCD_EP_Close+0x26>
 8002136:	2002      	movs	r0, #2
}
 8002138:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800213a:	2201      	movs	r2, #1
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 800213c:	4619      	mov	r1, r3
  __HAL_LOCK(hpcd); 
 800213e:	f884 23b8 	strb.w	r2, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8002142:	6820      	ldr	r0, [r4, #0]
 8002144:	f001 f806 	bl	8003154 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8002148:	2000      	movs	r0, #0
 800214a:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800214e:	bd10      	pop	{r4, pc}
 8002150:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002154:	231c      	movs	r3, #28
 8002156:	fb03 0301 	mla	r3, r3, r1, r0
 800215a:	3338      	adds	r3, #56	; 0x38
 800215c:	e7e4      	b.n	8002128 <HAL_PCD_EP_Close+0x14>
 800215e:	bf00      	nop

08002160 <HAL_PCD_EP_Receive>:
{
 8002160:	b538      	push	{r3, r4, r5, lr}
 8002162:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 8002166:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 800216a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->xfer_count = 0U;
 800216e:	2100      	movs	r1, #0
  ep->xfer_buff = pBuf;  
 8002170:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 8002174:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8002178:	f884 11f9 	strb.w	r1, [r4, #505]	; 0x1f9
  ep->xfer_len = len;
 800217c:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->num = ep_addr & 0x7F;
 8002180:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 8002184:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002186:	211c      	movs	r1, #28
 8002188:	fb01 0105 	mla	r1, r1, r5, r0
  if (hpcd->Init.dma_enable == 1U)
 800218c:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 800218e:	bf08      	it	eq
 8002190:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002194:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002198:	b2da      	uxtb	r2, r3
 800219a:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0x7F) == 0)
 800219c:	b11d      	cbz	r5, 80021a6 <HAL_PCD_EP_Receive+0x46>
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800219e:	f001 f837 	bl	8003210 <USB_EPStartXfer>
}
 80021a2:	2000      	movs	r0, #0
 80021a4:	bd38      	pop	{r3, r4, r5, pc}
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80021a6:	f001 f911 	bl	80033cc <USB_EP0StartXfer>
}
 80021aa:	2000      	movs	r0, #0
 80021ac:	bd38      	pop	{r3, r4, r5, pc}
 80021ae:	bf00      	nop

080021b0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80021b0:	f001 010f 	and.w	r1, r1, #15
 80021b4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80021b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 80021bc:	f8b1 0210 	ldrh.w	r0, [r1, #528]	; 0x210
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop

080021c4 <HAL_PCD_EP_Transmit>:
{
 80021c4:	b570      	push	{r4, r5, r6, lr}
 80021c6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 80021ca:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 80021ce:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->is_in = 1U;
 80021d2:	2101      	movs	r1, #1
  ep->xfer_count = 0U;
 80021d4:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;  
 80021d6:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80021d8:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  ep->xfer_len = len;
 80021dc:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->num = ep_addr & 0x7F;
 80021de:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  ep->xfer_count = 0U;
 80021e2:	6526      	str	r6, [r4, #80]	; 0x50
  if (hpcd->Init.dma_enable == 1U)
 80021e4:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80021e6:	211c      	movs	r1, #28
 80021e8:	fb01 0105 	mla	r1, r1, r5, r0
  if (hpcd->Init.dma_enable == 1U)
 80021ec:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 80021ee:	bf08      	it	eq
 80021f0:	64a2      	streq	r2, [r4, #72]	; 0x48
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80021f2:	3138      	adds	r1, #56	; 0x38
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0x7F) == 0)
 80021f8:	b11d      	cbz	r5, 8002202 <HAL_PCD_EP_Transmit+0x3e>
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80021fa:	f001 f809 	bl	8003210 <USB_EPStartXfer>
}
 80021fe:	2000      	movs	r0, #0
 8002200:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002202:	f001 f8e3 	bl	80033cc <USB_EP0StartXfer>
}
 8002206:	2000      	movs	r0, #0
 8002208:	bd70      	pop	{r4, r5, r6, pc}
 800220a:	bf00      	nop

0800220c <HAL_PCD_EP_SetStall>:
{
 800220c:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 800220e:	b24b      	sxtb	r3, r1
 8002210:	2b00      	cmp	r3, #0
{
 8002212:	460c      	mov	r4, r1
 8002214:	4605      	mov	r5, r0
  if ((0x80 & ep_addr) == 0x80)
 8002216:	db19      	blt.n	800224c <HAL_PCD_EP_SetStall+0x40>
    ep = &hpcd->OUT_ep[ep_addr];
 8002218:	211c      	movs	r1, #28
 800221a:	fb01 0104 	mla	r1, r1, r4, r0
 800221e:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002222:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 1U;
 8002224:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002226:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & 0x7F;
 8002228:	700c      	strb	r4, [r1, #0]
  ep->is_stall = 1U;
 800222a:	708a      	strb	r2, [r1, #2]
  __HAL_LOCK(hpcd); 
 800222c:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8002230:	4293      	cmp	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_PCD_EP_SetStall+0x2c>
 8002234:	2002      	movs	r0, #2
}
 8002236:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8002238:	f885 23b8 	strb.w	r2, [r5, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 800223c:	6828      	ldr	r0, [r5, #0]
 800223e:	f001 f961 	bl	8003504 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8002242:	b154      	cbz	r4, 800225a <HAL_PCD_EP_SetStall+0x4e>
  __HAL_UNLOCK(hpcd); 
 8002244:	2000      	movs	r0, #0
 8002246:	f885 03b8 	strb.w	r0, [r5, #952]	; 0x3b8
  return HAL_OK;
 800224a:	bd38      	pop	{r3, r4, r5, pc}
 800224c:	f001 047f 	and.w	r4, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002250:	211c      	movs	r1, #28
 8002252:	fb01 0104 	mla	r1, r1, r4, r0
 8002256:	3138      	adds	r1, #56	; 0x38
 8002258:	e7e3      	b.n	8002222 <HAL_PCD_EP_SetStall+0x16>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800225a:	f505 726f 	add.w	r2, r5, #956	; 0x3bc
 800225e:	7c29      	ldrb	r1, [r5, #16]
 8002260:	6828      	ldr	r0, [r5, #0]
 8002262:	f001 f9fd 	bl	8003660 <USB_EP0_OutStart>
 8002266:	e7ed      	b.n	8002244 <HAL_PCD_EP_SetStall+0x38>

08002268 <HAL_PCD_EP_ClrStall>:
  if ((0x80 & ep_addr) == 0x80)
 8002268:	b24a      	sxtb	r2, r1
 800226a:	2a00      	cmp	r2, #0
{
 800226c:	b538      	push	{r3, r4, r5, lr}
 800226e:	4605      	mov	r5, r0
  if ((0x80 & ep_addr) == 0x80)
 8002270:	db1a      	blt.n	80022a8 <HAL_PCD_EP_ClrStall+0x40>
    ep = &hpcd->OUT_ep[ep_addr];
 8002272:	231c      	movs	r3, #28
 8002274:	fb03 0301 	mla	r3, r3, r1, r0
 8002278:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800227c:	0fd2      	lsrs	r2, r2, #31
  ep->is_stall = 0U;
 800227e:	2400      	movs	r4, #0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002280:	705a      	strb	r2, [r3, #1]
  ep->num   = ep_addr & 0x7F;
 8002282:	7019      	strb	r1, [r3, #0]
  ep->is_stall = 0U;
 8002284:	709c      	strb	r4, [r3, #2]
  __HAL_LOCK(hpcd); 
 8002286:	f895 23b8 	ldrb.w	r2, [r5, #952]	; 0x3b8
 800228a:	2a01      	cmp	r2, #1
 800228c:	d101      	bne.n	8002292 <HAL_PCD_EP_ClrStall+0x2a>
 800228e:	2002      	movs	r0, #2
}
 8002290:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8002292:	2201      	movs	r2, #1
  USB_EPClearStall(hpcd->Instance , ep);
 8002294:	4619      	mov	r1, r3
  __HAL_LOCK(hpcd); 
 8002296:	f885 23b8 	strb.w	r2, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 800229a:	6828      	ldr	r0, [r5, #0]
 800229c:	f001 f950 	bl	8003540 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80022a0:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 80022a4:	4620      	mov	r0, r4
 80022a6:	bd38      	pop	{r3, r4, r5, pc}
 80022a8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80022ac:	231c      	movs	r3, #28
 80022ae:	fb03 0301 	mla	r3, r3, r1, r0
 80022b2:	3338      	adds	r3, #56	; 0x38
 80022b4:	e7e2      	b.n	800227c <HAL_PCD_EP_ClrStall+0x14>
 80022b6:	bf00      	nop

080022b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022b8:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022ba:	6805      	ldr	r5, [r0, #0]
 80022bc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  
  if(fifo == 0)
 80022be:	b1d1      	cbz	r1, 80022f6 <HAL_PCDEx_SetTxFiFo+0x3e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 80022c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 80022c2:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 80022c4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 80022c8:	d00c      	beq.n	80022e4 <HAL_PCDEx_SetTxFiFo+0x2c>
 80022ca:	2300      	movs	r3, #0
 80022cc:	4618      	mov	r0, r3
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 80022ce:	3340      	adds	r3, #64	; 0x40
 80022d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    for (i = 0; i < (fifo - 1); i++)
 80022d4:	3001      	adds	r0, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 80022d6:	685b      	ldr	r3, [r3, #4]
    for (i = 0; i < (fifo - 1); i++)
 80022d8:	b2c0      	uxtb	r0, r0
 80022da:	4288      	cmp	r0, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 80022dc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 80022e0:	4603      	mov	r3, r0
 80022e2:	dbf4      	blt.n	80022ce <HAL_PCDEx_SetTxFiFo+0x16>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 80022e4:	3140      	adds	r1, #64	; 0x40
 80022e6:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80022ea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80022ee:	604c      	str	r4, [r1, #4]
  }
  
  return HAL_OK;
}
 80022f0:	2000      	movs	r0, #0
 80022f2:	bc30      	pop	{r4, r5}
 80022f4:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 80022f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80022fa:	62ac      	str	r4, [r5, #40]	; 0x28
}
 80022fc:	2000      	movs	r0, #0
 80022fe:	bc30      	pop	{r4, r5}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop

08002304 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002304:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8002306:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8002308:	6259      	str	r1, [r3, #36]	; 0x24
}
 800230a:	4770      	bx	lr

0800230c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800230c:	2800      	cmp	r0, #0
 800230e:	f000 818b 	beq.w	8002628 <HAL_RCC_OscConfig+0x31c>
{
 8002312:	b5f0      	push	{r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002314:	6803      	ldr	r3, [r0, #0]
 8002316:	07dd      	lsls	r5, r3, #31
{
 8002318:	b083      	sub	sp, #12
 800231a:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231c:	d52f      	bpl.n	800237e <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231e:	49a8      	ldr	r1, [pc, #672]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
 8002320:	688a      	ldr	r2, [r1, #8]
 8002322:	f002 020c 	and.w	r2, r2, #12
 8002326:	2a04      	cmp	r2, #4
 8002328:	f000 8110 	beq.w	800254c <HAL_RCC_OscConfig+0x240>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232c:	688a      	ldr	r2, [r1, #8]
 800232e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002332:	2a08      	cmp	r2, #8
 8002334:	f000 8106 	beq.w	8002544 <HAL_RCC_OscConfig+0x238>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002338:	6863      	ldr	r3, [r4, #4]
 800233a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233e:	f000 8120 	beq.w	8002582 <HAL_RCC_OscConfig+0x276>
 8002342:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002346:	f000 80e6 	beq.w	8002516 <HAL_RCC_OscConfig+0x20a>
 800234a:	4d9d      	ldr	r5, [pc, #628]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
 800234c:	682a      	ldr	r2, [r5, #0]
 800234e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002352:	602a      	str	r2, [r5, #0]
 8002354:	682a      	ldr	r2, [r5, #0]
 8002356:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800235a:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800235c:	2b00      	cmp	r3, #0
 800235e:	f040 80e3 	bne.w	8002528 <HAL_RCC_OscConfig+0x21c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7fe fd51 	bl	8000e08 <HAL_GetTick>
 8002366:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002368:	e005      	b.n	8002376 <HAL_RCC_OscConfig+0x6a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800236a:	f7fe fd4d 	bl	8000e08 <HAL_GetTick>
 800236e:	1b80      	subs	r0, r0, r6
 8002370:	2864      	cmp	r0, #100	; 0x64
 8002372:	f200 80a3 	bhi.w	80024bc <HAL_RCC_OscConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	682b      	ldr	r3, [r5, #0]
 8002378:	039b      	lsls	r3, r3, #14
 800237a:	d4f6      	bmi.n	800236a <HAL_RCC_OscConfig+0x5e>
 800237c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237e:	079f      	lsls	r7, r3, #30
 8002380:	d527      	bpl.n	80023d2 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002382:	4a8f      	ldr	r2, [pc, #572]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
 8002384:	6891      	ldr	r1, [r2, #8]
 8002386:	f011 0f0c 	tst.w	r1, #12
 800238a:	f000 809e 	beq.w	80024ca <HAL_RCC_OscConfig+0x1be>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800238e:	6891      	ldr	r1, [r2, #8]
 8002390:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002394:	2908      	cmp	r1, #8
 8002396:	f000 8094 	beq.w	80024c2 <HAL_RCC_OscConfig+0x1b6>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800239a:	68e3      	ldr	r3, [r4, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80df 	beq.w	8002560 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a2:	4b88      	ldr	r3, [pc, #544]	; (80025c4 <HAL_RCC_OscConfig+0x2b8>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	4d86      	ldr	r5, [pc, #536]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_ENABLE();
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023aa:	f7fe fd2d 	bl	8000e08 <HAL_GetTick>
 80023ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	e004      	b.n	80023bc <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b2:	f7fe fd29 	bl	8000e08 <HAL_GetTick>
 80023b6:	1b80      	subs	r0, r0, r6
 80023b8:	2802      	cmp	r0, #2
 80023ba:	d87f      	bhi.n	80024bc <HAL_RCC_OscConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023bc:	682b      	ldr	r3, [r5, #0]
 80023be:	0798      	lsls	r0, r3, #30
 80023c0:	d5f7      	bpl.n	80023b2 <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c2:	682b      	ldr	r3, [r5, #0]
 80023c4:	6922      	ldr	r2, [r4, #16]
 80023c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80023ce:	602b      	str	r3, [r5, #0]
 80023d0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d2:	071a      	lsls	r2, r3, #28
 80023d4:	d420      	bmi.n	8002418 <HAL_RCC_OscConfig+0x10c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d6:	0759      	lsls	r1, r3, #29
 80023d8:	d434      	bmi.n	8002444 <HAL_RCC_OscConfig+0x138>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023da:	69a3      	ldr	r3, [r4, #24]
 80023dc:	b1cb      	cbz	r3, 8002412 <HAL_RCC_OscConfig+0x106>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023de:	4d78      	ldr	r5, [pc, #480]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
 80023e0:	68aa      	ldr	r2, [r5, #8]
 80023e2:	f002 020c 	and.w	r2, r2, #12
 80023e6:	2a08      	cmp	r2, #8
 80023e8:	d076      	beq.n	80024d8 <HAL_RCC_OscConfig+0x1cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ea:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ec:	4b76      	ldr	r3, [pc, #472]	; (80025c8 <HAL_RCC_OscConfig+0x2bc>)
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f4:	f000 80e0 	beq.w	80025b8 <HAL_RCC_OscConfig+0x2ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7fe fd06 	bl	8000e08 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fc:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80023fe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002400:	e004      	b.n	800240c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002402:	f7fe fd01 	bl	8000e08 <HAL_GetTick>
 8002406:	1b40      	subs	r0, r0, r5
 8002408:	2802      	cmp	r0, #2
 800240a:	d857      	bhi.n	80024bc <HAL_RCC_OscConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240c:	6823      	ldr	r3, [r4, #0]
 800240e:	019b      	lsls	r3, r3, #6
 8002410:	d4f7      	bmi.n	8002402 <HAL_RCC_OscConfig+0xf6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002412:	2000      	movs	r0, #0
}
 8002414:	b003      	add	sp, #12
 8002416:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002418:	6963      	ldr	r3, [r4, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d05f      	beq.n	80024de <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_LSI_ENABLE();
 800241e:	4b6b      	ldr	r3, [pc, #428]	; (80025cc <HAL_RCC_OscConfig+0x2c0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002420:	4d67      	ldr	r5, [pc, #412]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
      __HAL_RCC_LSI_ENABLE();
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002426:	f7fe fcef 	bl	8000e08 <HAL_GetTick>
 800242a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242c:	e004      	b.n	8002438 <HAL_RCC_OscConfig+0x12c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800242e:	f7fe fceb 	bl	8000e08 <HAL_GetTick>
 8002432:	1b80      	subs	r0, r0, r6
 8002434:	2802      	cmp	r0, #2
 8002436:	d841      	bhi.n	80024bc <HAL_RCC_OscConfig+0x1b0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002438:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800243a:	079f      	lsls	r7, r3, #30
 800243c:	d5f7      	bpl.n	800242e <HAL_RCC_OscConfig+0x122>
 800243e:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002440:	0759      	lsls	r1, r3, #29
 8002442:	d5ca      	bpl.n	80023da <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	4b5e      	ldr	r3, [pc, #376]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
    PWR->CR |= PWR_CR_DBP;
 8002446:	4d62      	ldr	r5, [pc, #392]	; (80025d0 <HAL_RCC_OscConfig+0x2c4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002448:	2200      	movs	r2, #0
 800244a:	9201      	str	r2, [sp, #4]
 800244c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800244e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800245e:	682b      	ldr	r3, [r5, #0]
 8002460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002464:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002466:	f7fe fccf 	bl	8000e08 <HAL_GetTick>
 800246a:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800246c:	e004      	b.n	8002478 <HAL_RCC_OscConfig+0x16c>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800246e:	f7fe fccb 	bl	8000e08 <HAL_GetTick>
 8002472:	1b80      	subs	r0, r0, r6
 8002474:	2802      	cmp	r0, #2
 8002476:	d821      	bhi.n	80024bc <HAL_RCC_OscConfig+0x1b0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002478:	682b      	ldr	r3, [r5, #0]
 800247a:	05da      	lsls	r2, r3, #23
 800247c:	d5f7      	bpl.n	800246e <HAL_RCC_OscConfig+0x162>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247e:	68a3      	ldr	r3, [r4, #8]
 8002480:	2b01      	cmp	r3, #1
 8002482:	f000 8084 	beq.w	800258e <HAL_RCC_OscConfig+0x282>
 8002486:	2b05      	cmp	r3, #5
 8002488:	f000 80d0 	beq.w	800262c <HAL_RCC_OscConfig+0x320>
 800248c:	4d4c      	ldr	r5, [pc, #304]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
 800248e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002490:	f022 0201 	bic.w	r2, r2, #1
 8002494:	672a      	str	r2, [r5, #112]	; 0x70
 8002496:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002498:	f022 0204 	bic.w	r2, r2, #4
 800249c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d17a      	bne.n	8002598 <HAL_RCC_OscConfig+0x28c>
      tickstart = HAL_GetTick();
 80024a2:	f7fe fcb1 	bl	8000e08 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80024aa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80024ae:	0798      	lsls	r0, r3, #30
 80024b0:	d593      	bpl.n	80023da <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7fe fca9 	bl	8000e08 <HAL_GetTick>
 80024b6:	1bc0      	subs	r0, r0, r7
 80024b8:	42b0      	cmp	r0, r6
 80024ba:	d9f7      	bls.n	80024ac <HAL_RCC_OscConfig+0x1a0>
            return HAL_TIMEOUT;
 80024bc:	2003      	movs	r0, #3
}
 80024be:	b003      	add	sp, #12
 80024c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c2:	6852      	ldr	r2, [r2, #4]
 80024c4:	0256      	lsls	r6, r2, #9
 80024c6:	f53f af68 	bmi.w	800239a <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	4a3d      	ldr	r2, [pc, #244]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	0795      	lsls	r5, r2, #30
 80024d0:	d515      	bpl.n	80024fe <HAL_RCC_OscConfig+0x1f2>
 80024d2:	68e2      	ldr	r2, [r4, #12]
 80024d4:	2a01      	cmp	r2, #1
 80024d6:	d012      	beq.n	80024fe <HAL_RCC_OscConfig+0x1f2>
    return HAL_ERROR;
 80024d8:	2001      	movs	r0, #1
}
 80024da:	b003      	add	sp, #12
 80024dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 80024de:	4a3b      	ldr	r2, [pc, #236]	; (80025cc <HAL_RCC_OscConfig+0x2c0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e0:	4d37      	ldr	r5, [pc, #220]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
      __HAL_RCC_LSI_DISABLE();
 80024e2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80024e4:	f7fe fc90 	bl	8000e08 <HAL_GetTick>
 80024e8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ea:	e004      	b.n	80024f6 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ec:	f7fe fc8c 	bl	8000e08 <HAL_GetTick>
 80024f0:	1b80      	subs	r0, r0, r6
 80024f2:	2802      	cmp	r0, #2
 80024f4:	d8e2      	bhi.n	80024bc <HAL_RCC_OscConfig+0x1b0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80024f8:	0798      	lsls	r0, r3, #30
 80024fa:	d4f7      	bmi.n	80024ec <HAL_RCC_OscConfig+0x1e0>
 80024fc:	e79f      	b.n	800243e <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fe:	4930      	ldr	r1, [pc, #192]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
 8002500:	6920      	ldr	r0, [r4, #16]
 8002502:	680a      	ldr	r2, [r1, #0]
 8002504:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002508:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800250c:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250e:	071a      	lsls	r2, r3, #28
 8002510:	f57f af61 	bpl.w	80023d6 <HAL_RCC_OscConfig+0xca>
 8002514:	e780      	b.n	8002418 <HAL_RCC_OscConfig+0x10c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002516:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002526:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002528:	f7fe fc6e 	bl	8000e08 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252c:	4d24      	ldr	r5, [pc, #144]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
        tickstart = HAL_GetTick();
 800252e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002530:	e004      	b.n	800253c <HAL_RCC_OscConfig+0x230>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002532:	f7fe fc69 	bl	8000e08 <HAL_GetTick>
 8002536:	1b80      	subs	r0, r0, r6
 8002538:	2864      	cmp	r0, #100	; 0x64
 800253a:	d8bf      	bhi.n	80024bc <HAL_RCC_OscConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253c:	682b      	ldr	r3, [r5, #0]
 800253e:	039a      	lsls	r2, r3, #14
 8002540:	d5f7      	bpl.n	8002532 <HAL_RCC_OscConfig+0x226>
 8002542:	e71b      	b.n	800237c <HAL_RCC_OscConfig+0x70>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002544:	684a      	ldr	r2, [r1, #4]
 8002546:	0250      	lsls	r0, r2, #9
 8002548:	f57f aef6 	bpl.w	8002338 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254c:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	0391      	lsls	r1, r2, #14
 8002552:	f57f af14 	bpl.w	800237e <HAL_RCC_OscConfig+0x72>
 8002556:	6862      	ldr	r2, [r4, #4]
 8002558:	2a00      	cmp	r2, #0
 800255a:	f47f af10 	bne.w	800237e <HAL_RCC_OscConfig+0x72>
 800255e:	e7bb      	b.n	80024d8 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_DISABLE();
 8002560:	4a18      	ldr	r2, [pc, #96]	; (80025c4 <HAL_RCC_OscConfig+0x2b8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	4d17      	ldr	r5, [pc, #92]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_DISABLE();
 8002564:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002566:	f7fe fc4f 	bl	8000e08 <HAL_GetTick>
 800256a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256c:	e004      	b.n	8002578 <HAL_RCC_OscConfig+0x26c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800256e:	f7fe fc4b 	bl	8000e08 <HAL_GetTick>
 8002572:	1b80      	subs	r0, r0, r6
 8002574:	2802      	cmp	r0, #2
 8002576:	d8a1      	bhi.n	80024bc <HAL_RCC_OscConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002578:	682b      	ldr	r3, [r5, #0]
 800257a:	0799      	lsls	r1, r3, #30
 800257c:	d4f7      	bmi.n	800256e <HAL_RCC_OscConfig+0x262>
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	e727      	b.n	80023d2 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002582:	4a0f      	ldr	r2, [pc, #60]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
 8002584:	6813      	ldr	r3, [r2, #0]
 8002586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	e7cc      	b.n	8002528 <HAL_RCC_OscConfig+0x21c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800258e:	4a0c      	ldr	r2, [pc, #48]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
 8002590:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002598:	f7fe fc36 	bl	8000e08 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259c:	4d08      	ldr	r5, [pc, #32]	; (80025c0 <HAL_RCC_OscConfig+0x2b4>)
      tickstart = HAL_GetTick();
 800259e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a0:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025a6:	079b      	lsls	r3, r3, #30
 80025a8:	f53f af17 	bmi.w	80023da <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f7fe fc2c 	bl	8000e08 <HAL_GetTick>
 80025b0:	1bc0      	subs	r0, r0, r7
 80025b2:	42b0      	cmp	r0, r6
 80025b4:	d9f6      	bls.n	80025a4 <HAL_RCC_OscConfig+0x298>
 80025b6:	e781      	b.n	80024bc <HAL_RCC_OscConfig+0x1b0>
        tickstart = HAL_GetTick();
 80025b8:	f7fe fc26 	bl	8000e08 <HAL_GetTick>
 80025bc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	e00f      	b.n	80025e0 <HAL_RCC_OscConfig+0x2d4>
 80025c0:	40023800 	.word	0x40023800
 80025c4:	42470000 	.word	0x42470000
 80025c8:	42470060 	.word	0x42470060
 80025cc:	42470e80 	.word	0x42470e80
 80025d0:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d4:	f7fe fc18 	bl	8000e08 <HAL_GetTick>
 80025d8:	1b80      	subs	r0, r0, r6
 80025da:	2802      	cmp	r0, #2
 80025dc:	f63f af6e 	bhi.w	80024bc <HAL_RCC_OscConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e0:	682b      	ldr	r3, [r5, #0]
 80025e2:	0199      	lsls	r1, r3, #6
 80025e4:	d4f6      	bmi.n	80025d4 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025e6:	69e3      	ldr	r3, [r4, #28]
 80025e8:	6a27      	ldr	r7, [r4, #32]
 80025ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80025ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80025ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80025f0:	4913      	ldr	r1, [pc, #76]	; (8002640 <HAL_RCC_OscConfig+0x334>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f2:	4c14      	ldr	r4, [pc, #80]	; (8002644 <HAL_RCC_OscConfig+0x338>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025f4:	433b      	orrs	r3, r7
 80025f6:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80025fa:	0852      	lsrs	r2, r2, #1
 80025fc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002600:	3a01      	subs	r2, #1
 8002602:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002606:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002608:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800260a:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 800260c:	f7fe fbfc 	bl	8000e08 <HAL_GetTick>
 8002610:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002612:	e005      	b.n	8002620 <HAL_RCC_OscConfig+0x314>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe fbf8 	bl	8000e08 <HAL_GetTick>
 8002618:	1b40      	subs	r0, r0, r5
 800261a:	2802      	cmp	r0, #2
 800261c:	f63f af4e 	bhi.w	80024bc <HAL_RCC_OscConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002620:	6823      	ldr	r3, [r4, #0]
 8002622:	019a      	lsls	r2, r3, #6
 8002624:	d5f6      	bpl.n	8002614 <HAL_RCC_OscConfig+0x308>
 8002626:	e6f4      	b.n	8002412 <HAL_RCC_OscConfig+0x106>
    return HAL_ERROR;
 8002628:	2001      	movs	r0, #1
}
 800262a:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCC_OscConfig+0x338>)
 800262e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002630:	f042 0204 	orr.w	r2, r2, #4
 8002634:	671a      	str	r2, [r3, #112]	; 0x70
 8002636:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	671a      	str	r2, [r3, #112]	; 0x70
 800263e:	e7ab      	b.n	8002598 <HAL_RCC_OscConfig+0x28c>
 8002640:	42470060 	.word	0x42470060
 8002644:	40023800 	.word	0x40023800

08002648 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002648:	4915      	ldr	r1, [pc, #84]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x58>)
{
 800264a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800264c:	688b      	ldr	r3, [r1, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b08      	cmp	r3, #8
 8002654:	d117      	bne.n	8002686 <HAL_RCC_GetSysClockFreq+0x3e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002656:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002658:	684b      	ldr	r3, [r1, #4]
 800265a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800265e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002662:	d112      	bne.n	800268a <HAL_RCC_GetSysClockFreq+0x42>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002664:	6849      	ldr	r1, [r1, #4]
 8002666:	480f      	ldr	r0, [pc, #60]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002668:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800266c:	fba1 0100 	umull	r0, r1, r1, r0
 8002670:	f7fe fa20 	bl	8000ab4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x58>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800267c:	3301      	adds	r3, #1
 800267e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002680:	fbb0 f0f3 	udiv	r0, r0, r3
 8002684:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002686:	4807      	ldr	r0, [pc, #28]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002688:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800268a:	684b      	ldr	r3, [r1, #4]
 800268c:	4805      	ldr	r0, [pc, #20]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x5c>)
 800268e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002692:	fba3 0100 	umull	r0, r1, r3, r0
 8002696:	2300      	movs	r3, #0
 8002698:	f7fe fa0c 	bl	8000ab4 <__aeabi_uldivmod>
 800269c:	e7ea      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x2c>
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	00f42400 	.word	0x00f42400

080026a8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80026a8:	b160      	cbz	r0, 80026c4 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026aa:	4a48      	ldr	r2, [pc, #288]	; (80027cc <HAL_RCC_ClockConfig+0x124>)
 80026ac:	6813      	ldr	r3, [r2, #0]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	428b      	cmp	r3, r1
 80026b4:	d208      	bcs.n	80026c8 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	b2cb      	uxtb	r3, r1
 80026b8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	6813      	ldr	r3, [r2, #0]
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	4299      	cmp	r1, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 80026c4:	2001      	movs	r0, #1
}
 80026c6:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c8:	6803      	ldr	r3, [r0, #0]
{
 80026ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ce:	079d      	lsls	r5, r3, #30
 80026d0:	d514      	bpl.n	80026fc <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d2:	075c      	lsls	r4, r3, #29
 80026d4:	d504      	bpl.n	80026e0 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d6:	4c3e      	ldr	r4, [pc, #248]	; (80027d0 <HAL_RCC_ClockConfig+0x128>)
 80026d8:	68a2      	ldr	r2, [r4, #8]
 80026da:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80026de:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e0:	071a      	lsls	r2, r3, #28
 80026e2:	d504      	bpl.n	80026ee <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e4:	4c3a      	ldr	r4, [pc, #232]	; (80027d0 <HAL_RCC_ClockConfig+0x128>)
 80026e6:	68a2      	ldr	r2, [r4, #8]
 80026e8:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80026ec:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ee:	4c38      	ldr	r4, [pc, #224]	; (80027d0 <HAL_RCC_ClockConfig+0x128>)
 80026f0:	6885      	ldr	r5, [r0, #8]
 80026f2:	68a2      	ldr	r2, [r4, #8]
 80026f4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80026f8:	432a      	orrs	r2, r5
 80026fa:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fc:	07df      	lsls	r7, r3, #31
 80026fe:	4604      	mov	r4, r0
 8002700:	460d      	mov	r5, r1
 8002702:	d522      	bpl.n	800274a <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002704:	6842      	ldr	r2, [r0, #4]
 8002706:	2a01      	cmp	r2, #1
 8002708:	d05b      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x11a>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270a:	1e93      	subs	r3, r2, #2
 800270c:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <HAL_RCC_ClockConfig+0x128>)
 8002710:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002712:	d950      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002714:	0799      	lsls	r1, r3, #30
 8002716:	d525      	bpl.n	8002764 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002718:	4e2d      	ldr	r6, [pc, #180]	; (80027d0 <HAL_RCC_ClockConfig+0x128>)
 800271a:	68b3      	ldr	r3, [r6, #8]
 800271c:	f023 0303 	bic.w	r3, r3, #3
 8002720:	4313      	orrs	r3, r2
 8002722:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002724:	f7fe fb70 	bl	8000e08 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002728:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800272c:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	e005      	b.n	800273c <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7fe fb6a 	bl	8000e08 <HAL_GetTick>
 8002734:	eba0 0008 	sub.w	r0, r0, r8
 8002738:	42b8      	cmp	r0, r7
 800273a:	d83f      	bhi.n	80027bc <HAL_RCC_ClockConfig+0x114>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273c:	68b3      	ldr	r3, [r6, #8]
 800273e:	6862      	ldr	r2, [r4, #4]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002748:	d1f2      	bne.n	8002730 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800274a:	4a20      	ldr	r2, [pc, #128]	; (80027cc <HAL_RCC_ClockConfig+0x124>)
 800274c:	6813      	ldr	r3, [r2, #0]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	429d      	cmp	r5, r3
 8002754:	d209      	bcs.n	800276a <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	b2eb      	uxtb	r3, r5
 8002758:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	6813      	ldr	r3, [r2, #0]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	429d      	cmp	r5, r3
 8002762:	d002      	beq.n	800276a <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8002764:	2001      	movs	r0, #1
 8002766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	075a      	lsls	r2, r3, #29
 800276e:	d506      	bpl.n	800277e <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002770:	4917      	ldr	r1, [pc, #92]	; (80027d0 <HAL_RCC_ClockConfig+0x128>)
 8002772:	68e0      	ldr	r0, [r4, #12]
 8002774:	688a      	ldr	r2, [r1, #8]
 8002776:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800277a:	4302      	orrs	r2, r0
 800277c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277e:	071b      	lsls	r3, r3, #28
 8002780:	d507      	bpl.n	8002792 <HAL_RCC_ClockConfig+0xea>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002782:	4a13      	ldr	r2, [pc, #76]	; (80027d0 <HAL_RCC_ClockConfig+0x128>)
 8002784:	6921      	ldr	r1, [r4, #16]
 8002786:	6893      	ldr	r3, [r2, #8]
 8002788:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800278c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002790:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002792:	f7ff ff59 	bl	8002648 <HAL_RCC_GetSysClockFreq>
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_RCC_ClockConfig+0x128>)
 8002798:	490e      	ldr	r1, [pc, #56]	; (80027d4 <HAL_RCC_ClockConfig+0x12c>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <HAL_RCC_ClockConfig+0x130>)
 800279e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 80027a8:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027aa:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80027ac:	f003 fa86 	bl	8005cbc <HAL_InitTick>
  return HAL_OK;
 80027b0:	2000      	movs	r0, #0
 80027b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b6:	0198      	lsls	r0, r3, #6
 80027b8:	d4ae      	bmi.n	8002718 <HAL_RCC_ClockConfig+0x70>
 80027ba:	e7d3      	b.n	8002764 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 80027bc:	2003      	movs	r0, #3
}
 80027be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_RCC_ClockConfig+0x128>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	039e      	lsls	r6, r3, #14
 80027c8:	d4a6      	bmi.n	8002718 <HAL_RCC_ClockConfig+0x70>
 80027ca:	e7cb      	b.n	8002764 <HAL_RCC_ClockConfig+0xbc>
 80027cc:	40023c00 	.word	0x40023c00
 80027d0:	40023800 	.word	0x40023800
 80027d4:	08006790 	.word	0x08006790
 80027d8:	20000114 	.word	0x20000114

080027dc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80027dc:	4b01      	ldr	r3, [pc, #4]	; (80027e4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000114 	.word	0x20000114

080027e8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <HAL_RCC_GetPCLK1Freq+0x14>)
 80027ea:	4a05      	ldr	r2, [pc, #20]	; (8002800 <HAL_RCC_GetPCLK1Freq+0x18>)
 80027ec:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80027ee:	4905      	ldr	r1, [pc, #20]	; (8002804 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027f0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80027f4:	6808      	ldr	r0, [r1, #0]
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
}
 80027f8:	40d8      	lsrs	r0, r3
 80027fa:	4770      	bx	lr
 80027fc:	40023800 	.word	0x40023800
 8002800:	080067a0 	.word	0x080067a0
 8002804:	20000114 	.word	0x20000114

08002808 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <HAL_RCC_GetPCLK2Freq+0x14>)
 800280a:	4a05      	ldr	r2, [pc, #20]	; (8002820 <HAL_RCC_GetPCLK2Freq+0x18>)
 800280c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800280e:	4905      	ldr	r1, [pc, #20]	; (8002824 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002810:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002814:	6808      	ldr	r0, [r1, #0]
 8002816:	5cd3      	ldrb	r3, [r2, r3]
}
 8002818:	40d8      	lsrs	r0, r3
 800281a:	4770      	bx	lr
 800281c:	40023800 	.word	0x40023800
 8002820:	080067a0 	.word	0x080067a0
 8002824:	20000114 	.word	0x20000114

08002828 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800282a:	220f      	movs	r2, #15
 800282c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	f002 0203 	and.w	r2, r2, #3
 8002834:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800283c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002844:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	08db      	lsrs	r3, r3, #3
{
 800284a:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800284c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002850:	4c05      	ldr	r4, [pc, #20]	; (8002868 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002852:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002854:	6823      	ldr	r3, [r4, #0]
}
 8002856:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	600b      	str	r3, [r1, #0]
}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40023c00 	.word	0x40023c00

0800286c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800286c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800286e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002870:	f8d1 e008 	ldr.w	lr, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8002874:	680e      	ldr	r6, [r1, #0]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002876:	4d13      	ldr	r5, [pc, #76]	; (80028c4 <TIM_OC1_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002878:	f024 0401 	bic.w	r4, r4, #1
 800287c:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800287e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002880:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002882:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8002884:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002888:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800288c:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 800288e:	ea43 030e 	orr.w	r3, r3, lr
  tmpccmrx |= OC_Config->OCMode;
 8002892:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002896:	d008      	beq.n	80028aa <TIM_OC1_SetConfig+0x3e>
 8002898:	4c0b      	ldr	r4, [pc, #44]	; (80028c8 <TIM_OC1_SetConfig+0x5c>)
 800289a:	42a0      	cmp	r0, r4
 800289c:	d005      	beq.n	80028aa <TIM_OC1_SetConfig+0x3e>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800289e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80028a0:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80028a2:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80028a4:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80028a6:	6203      	str	r3, [r0, #32]
} 
 80028a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer |= OC_Config->OCNPolarity;
 80028aa:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80028ac:	694d      	ldr	r5, [r1, #20]
 80028ae:	698c      	ldr	r4, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80028b0:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028b4:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 80028b8:	4333      	orrs	r3, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80028ba:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80028bc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80028c0:	4327      	orrs	r7, r4
 80028c2:	e7ec      	b.n	800289e <TIM_OC1_SetConfig+0x32>
 80028c4:	40010000 	.word	0x40010000
 80028c8:	40010400 	.word	0x40010400

080028cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028ce:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028d0:	f8d1 e008 	ldr.w	lr, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80028d4:	680e      	ldr	r6, [r1, #0]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80028d6:	4d14      	ldr	r5, [pc, #80]	; (8002928 <TIM_OC3_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028d8:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80028dc:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80028de:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80028e0:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80028e2:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80028e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80028e8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80028ec:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028ee:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80028f2:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80028f6:	d008      	beq.n	800290a <TIM_OC3_SetConfig+0x3e>
 80028f8:	4c0c      	ldr	r4, [pc, #48]	; (800292c <TIM_OC3_SetConfig+0x60>)
 80028fa:	42a0      	cmp	r0, r4
 80028fc:	d005      	beq.n	800290a <TIM_OC3_SetConfig+0x3e>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028fe:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002900:	6047      	str	r7, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002902:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002904:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002906:	6203      	str	r3, [r0, #32]
}
 8002908:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800290a:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800290c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800290e:	698c      	ldr	r4, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002914:	f427 5740 	bic.w	r7, r7, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002918:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800291c:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800291e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002922:	ea47 1704 	orr.w	r7, r7, r4, lsl #4
 8002926:	e7ea      	b.n	80028fe <TIM_OC3_SetConfig+0x32>
 8002928:	40010000 	.word	0x40010000
 800292c:	40010400 	.word	0x40010400

08002930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002930:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002932:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002934:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002936:	680e      	ldr	r6, [r1, #0]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002938:	4d10      	ldr	r5, [pc, #64]	; (800297c <TIM_OC4_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800293a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800293e:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8002940:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002942:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002944:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8002946:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800294a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800294e:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002950:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002954:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002958:	d00a      	beq.n	8002970 <TIM_OC4_SetConfig+0x40>
 800295a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800295e:	42a8      	cmp	r0, r5
 8002960:	d006      	beq.n	8002970 <TIM_OC4_SetConfig+0x40>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002962:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002964:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002966:	61c3      	str	r3, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002968:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 800296a:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800296c:	6202      	str	r2, [r0, #32]
}
 800296e:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002970:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002972:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002976:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800297a:	e7f2      	b.n	8002962 <TIM_OC4_SetConfig+0x32>
 800297c:	40010000 	.word	0x40010000

08002980 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002980:	6803      	ldr	r3, [r0, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	f042 0201 	orr.w	r2, r2, #1
 8002988:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	f042 0201 	orr.w	r2, r2, #1
 8002990:	601a      	str	r2, [r3, #0]
}
 8002992:	2000      	movs	r0, #0
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop

08002998 <HAL_TIM_PWM_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002998:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << Channel;
 800299a:	2201      	movs	r2, #1
  TIMx->CCER &= ~tmp;
 800299c:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800299e:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 80029a2:	ea20 0001 	bic.w	r0, r0, r1
{
 80029a6:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 80029a8:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80029aa:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80029ac:	4c0a      	ldr	r4, [pc, #40]	; (80029d8 <HAL_TIM_PWM_Start+0x40>)
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80029ae:	4311      	orrs	r1, r2
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80029b0:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80029b2:	6219      	str	r1, [r3, #32]
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80029b4:	d00a      	beq.n	80029cc <HAL_TIM_PWM_Start+0x34>
 80029b6:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_TIM_PWM_Start+0x44>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d007      	beq.n	80029cc <HAL_TIM_PWM_Start+0x34>
  __HAL_TIM_ENABLE(htim);
 80029bc:	681a      	ldr	r2, [r3, #0]
} 
 80029be:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_TIM_ENABLE(htim);
 80029c2:	f042 0201 	orr.w	r2, r2, #1
} 
 80029c6:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80029c8:	601a      	str	r2, [r3, #0]
} 
 80029ca:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 80029cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44
 80029d4:	e7f2      	b.n	80029bc <HAL_TIM_PWM_Start+0x24>
 80029d6:	bf00      	nop
 80029d8:	40010000 	.word	0x40010000
 80029dc:	40010400 	.word	0x40010400

080029e0 <HAL_TIM_OC_DelayElapsedCallback>:
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop

080029e4 <HAL_TIM_IC_CaptureCallback>:
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop

080029e8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop

080029ec <HAL_TIM_TriggerCallback>:
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop

080029f0 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029f0:	6803      	ldr	r3, [r0, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	0791      	lsls	r1, r2, #30
{
 80029f6:	b510      	push	{r4, lr}
 80029f8:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029fa:	d502      	bpl.n	8002a02 <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	0792      	lsls	r2, r2, #30
 8002a00:	d462      	bmi.n	8002ac8 <HAL_TIM_IRQHandler+0xd8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	0750      	lsls	r0, r2, #29
 8002a06:	d502      	bpl.n	8002a0e <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	0751      	lsls	r1, r2, #29
 8002a0c:	d449      	bmi.n	8002aa2 <HAL_TIM_IRQHandler+0xb2>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	0712      	lsls	r2, r2, #28
 8002a12:	d502      	bpl.n	8002a1a <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	0710      	lsls	r0, r2, #28
 8002a18:	d431      	bmi.n	8002a7e <HAL_TIM_IRQHandler+0x8e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	06d2      	lsls	r2, r2, #27
 8002a1e:	d502      	bpl.n	8002a26 <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	06d0      	lsls	r0, r2, #27
 8002a24:	d418      	bmi.n	8002a58 <HAL_TIM_IRQHandler+0x68>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	07d1      	lsls	r1, r2, #31
 8002a2a:	d502      	bpl.n	8002a32 <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	07d2      	lsls	r2, r2, #31
 8002a30:	d46b      	bmi.n	8002b0a <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	0610      	lsls	r0, r2, #24
 8002a36:	d502      	bpl.n	8002a3e <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	0611      	lsls	r1, r2, #24
 8002a3c:	d46d      	bmi.n	8002b1a <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	0652      	lsls	r2, r2, #25
 8002a42:	d502      	bpl.n	8002a4a <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	0650      	lsls	r0, r2, #25
 8002a48:	d457      	bmi.n	8002afa <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	0691      	lsls	r1, r2, #26
 8002a4e:	d502      	bpl.n	8002a56 <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	0692      	lsls	r2, r2, #26
 8002a54:	d449      	bmi.n	8002aea <HAL_TIM_IRQHandler+0xfa>
 8002a56:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a58:	f06f 0210 	mvn.w	r2, #16
 8002a5c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a5e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a60:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a62:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a66:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002a68:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a6a:	d161      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6c:	f7ff ffb8 	bl	80029e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a70:	4620      	mov	r0, r4
 8002a72:	f7ff ffb9 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a76:	2200      	movs	r2, #0
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	7622      	strb	r2, [r4, #24]
 8002a7c:	e7d3      	b.n	8002a26 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a7e:	f06f 0208 	mvn.w	r2, #8
 8002a82:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a84:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a86:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a88:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a8a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a8e:	d155      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a90:	f7ff ffa6 	bl	80029e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002a94:	4620      	mov	r0, r4
 8002a96:	f7ff ffa7 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	6823      	ldr	r3, [r4, #0]
 8002a9e:	7622      	strb	r2, [r4, #24]
 8002aa0:	e7bb      	b.n	8002a1a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aa2:	f06f 0204 	mvn.w	r2, #4
 8002aa6:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aa8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aaa:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aac:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab0:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ab4:	d13f      	bne.n	8002b36 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab6:	f7ff ff93 	bl	80029e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aba:	4620      	mov	r0, r4
 8002abc:	f7ff ff94 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	7622      	strb	r2, [r4, #24]
 8002ac6:	e7a2      	b.n	8002a0e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ac8:	f06f 0202 	mvn.w	r2, #2
 8002acc:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ace:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ad0:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ad2:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ad4:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ad6:	d128      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x13a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad8:	f7ff ff82 	bl	80029e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	4620      	mov	r0, r4
 8002ade:	f7ff ff83 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	7622      	strb	r2, [r4, #24]
 8002ae8:	e78b      	b.n	8002a02 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002aea:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002aee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002af0:	611a      	str	r2, [r3, #16]
}
 8002af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002af6:	f000 b991 	b.w	8002e1c <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002afa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002afe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002b00:	4620      	mov	r0, r4
 8002b02:	f7ff ff73 	bl	80029ec <HAL_TIM_TriggerCallback>
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	e79f      	b.n	8002a4a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b0a:	f06f 0201 	mvn.w	r2, #1
 8002b0e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b10:	4620      	mov	r0, r4
 8002b12:	f002 fb8d 	bl	8005230 <HAL_TIM_PeriodElapsedCallback>
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	e78b      	b.n	8002a32 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b1e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002b20:	4620      	mov	r0, r4
 8002b22:	f000 f97d 	bl	8002e20 <HAL_TIMEx_BreakCallback>
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	e789      	b.n	8002a3e <HAL_TIM_IRQHandler+0x4e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	f7ff ff5b 	bl	80029e4 <HAL_TIM_IC_CaptureCallback>
 8002b2e:	e7d8      	b.n	8002ae2 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b30:	f7ff ff58 	bl	80029e4 <HAL_TIM_IC_CaptureCallback>
 8002b34:	e79f      	b.n	8002a76 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b36:	f7ff ff55 	bl	80029e4 <HAL_TIM_IC_CaptureCallback>
 8002b3a:	e7c1      	b.n	8002ac0 <HAL_TIM_IRQHandler+0xd0>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3c:	f7ff ff52 	bl	80029e4 <HAL_TIM_IC_CaptureCallback>
 8002b40:	e7ab      	b.n	8002a9a <HAL_TIM_IRQHandler+0xaa>
 8002b42:	bf00      	nop

08002b44 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002b44:	4a36      	ldr	r2, [pc, #216]	; (8002c20 <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 8002b46:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002b48:	4290      	cmp	r0, r2
{
 8002b4a:	b470      	push	{r4, r5, r6}
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002b4c:	d054      	beq.n	8002bf8 <TIM_Base_SetConfig+0xb4>
 8002b4e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002b52:	d030      	beq.n	8002bb6 <TIM_Base_SetConfig+0x72>
 8002b54:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002b58:	4290      	cmp	r0, r2
 8002b5a:	d02c      	beq.n	8002bb6 <TIM_Base_SetConfig+0x72>
 8002b5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b60:	4290      	cmp	r0, r2
 8002b62:	d028      	beq.n	8002bb6 <TIM_Base_SetConfig+0x72>
 8002b64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b68:	4290      	cmp	r0, r2
 8002b6a:	d024      	beq.n	8002bb6 <TIM_Base_SetConfig+0x72>
 8002b6c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002b70:	4290      	cmp	r0, r2
 8002b72:	d020      	beq.n	8002bb6 <TIM_Base_SetConfig+0x72>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002b74:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002b78:	4290      	cmp	r0, r2
 8002b7a:	d030      	beq.n	8002bde <TIM_Base_SetConfig+0x9a>
 8002b7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b80:	4290      	cmp	r0, r2
 8002b82:	d02c      	beq.n	8002bde <TIM_Base_SetConfig+0x9a>
 8002b84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b88:	4290      	cmp	r0, r2
 8002b8a:	d028      	beq.n	8002bde <TIM_Base_SetConfig+0x9a>
 8002b8c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002b90:	4290      	cmp	r0, r2
 8002b92:	d024      	beq.n	8002bde <TIM_Base_SetConfig+0x9a>
 8002b94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b98:	4290      	cmp	r0, r2
 8002b9a:	d020      	beq.n	8002bde <TIM_Base_SetConfig+0x9a>
 8002b9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ba0:	4290      	cmp	r0, r2
 8002ba2:	d01c      	beq.n	8002bde <TIM_Base_SetConfig+0x9a>
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba4:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002ba6:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8002ba8:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8002baa:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bac:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002bae:	6282      	str	r2, [r0, #40]	; 0x28
}
 8002bb0:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8002bb2:	6143      	str	r3, [r0, #20]
}
 8002bb4:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002bb6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb8:	68ce      	ldr	r6, [r1, #12]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bba:	688d      	ldr	r5, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002bbc:	680c      	ldr	r4, [r1, #0]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002bc2:	4313      	orrs	r3, r2
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002bc4:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bca:	4333      	orrs	r3, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002bcc:	4290      	cmp	r0, r2
  TIMx->CR1 = tmpcr1;
 8002bce:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd0:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002bd2:	6284      	str	r4, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002bd4:	d01d      	beq.n	8002c12 <TIM_Base_SetConfig+0xce>
  TIMx->EGR = TIM_EGR_UG;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	6143      	str	r3, [r0, #20]
}
 8002bda:	bc70      	pop	{r4, r5, r6}
 8002bdc:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bde:	68cd      	ldr	r5, [r1, #12]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002be0:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002be2:	680a      	ldr	r2, [r1, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002be8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002bea:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8002bec:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bee:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002bf0:	6282      	str	r2, [r0, #40]	; 0x28
}
 8002bf2:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8002bf4:	6143      	str	r3, [r0, #20]
}
 8002bf6:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002bf8:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bfa:	68cc      	ldr	r4, [r1, #12]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bfc:	688d      	ldr	r5, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002bfe:	680a      	ldr	r2, [r1, #0]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c04:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0a:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8002c0c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c0e:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002c10:	6282      	str	r2, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002c12:	690b      	ldr	r3, [r1, #16]
 8002c14:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002c16:	2301      	movs	r3, #1
 8002c18:	6143      	str	r3, [r0, #20]
}
 8002c1a:	bc70      	pop	{r4, r5, r6}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40010400 	.word	0x40010400

08002c28 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002c28:	b1b8      	cbz	r0, 8002c5a <HAL_TIM_Base_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002c2a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{ 
 8002c2e:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8002c30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c34:	4604      	mov	r4, r0
 8002c36:	b15b      	cbz	r3, 8002c50 <HAL_TIM_Base_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002c3e:	6820      	ldr	r0, [r4, #0]
 8002c40:	1d21      	adds	r1, r4, #4
 8002c42:	f7ff ff7f 	bl	8002b44 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002c50:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002c54:	f002 ffa8 	bl	8005ba8 <HAL_TIM_Base_MspInit>
 8002c58:	e7ee      	b.n	8002c38 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop

08002c60 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8002c60:	b1b8      	cbz	r0, 8002c92 <HAL_TIM_PWM_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002c62:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8002c66:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8002c68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	b15b      	cbz	r3, 8002c88 <HAL_TIM_PWM_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002c70:	2302      	movs	r3, #2
 8002c72:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002c76:	6820      	ldr	r0, [r4, #0]
 8002c78:	1d21      	adds	r1, r4, #4
 8002c7a:	f7ff ff63 	bl	8002b44 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002c84:	2000      	movs	r0, #0
 8002c86:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002c88:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002c8c:	f002 ff4e 	bl	8005b2c <HAL_TIM_PWM_MspInit>
 8002c90:	e7ee      	b.n	8002c70 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8002c92:	2001      	movs	r0, #1
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop

08002c98 <TIM_OC2_SetConfig>:
{
 8002c98:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c9a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c9c:	f8d1 e008 	ldr.w	lr, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca0:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002ca2:	4d14      	ldr	r5, [pc, #80]	; (8002cf4 <TIM_OC2_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ca4:	f024 0410 	bic.w	r4, r4, #16
 8002ca8:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8002caa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002cac:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002cae:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8002cb0:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cb4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002cb8:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cba:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cbe:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002cc2:	d008      	beq.n	8002cd6 <TIM_OC2_SetConfig+0x3e>
 8002cc4:	4c0c      	ldr	r4, [pc, #48]	; (8002cf8 <TIM_OC2_SetConfig+0x60>)
 8002cc6:	42a0      	cmp	r0, r4
 8002cc8:	d005      	beq.n	8002cd6 <TIM_OC2_SetConfig+0x3e>
  TIMx->CCR2 = OC_Config->Pulse;
 8002cca:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002ccc:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002cce:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002cd0:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002cd2:	6203      	str	r3, [r0, #32]
}
 8002cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cd6:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cd8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cda:	698c      	ldr	r4, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ce0:	f427 6740 	bic.w	r7, r7, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ce4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ce8:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cee:	ea47 0784 	orr.w	r7, r7, r4, lsl #2
 8002cf2:	e7ea      	b.n	8002cca <TIM_OC2_SetConfig+0x32>
 8002cf4:	40010000 	.word	0x40010000
 8002cf8:	40010400 	.word	0x40010400

08002cfc <HAL_TIM_PWM_ConfigChannel>:
{
 8002cfc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002cfe:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d02b      	beq.n	8002d5e <HAL_TIM_PWM_ConfigChannel+0x62>
 8002d06:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8002d08:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002d12:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  switch (Channel)
 8002d16:	2a0c      	cmp	r2, #12
 8002d18:	d81a      	bhi.n	8002d50 <HAL_TIM_PWM_ConfigChannel+0x54>
 8002d1a:	e8df f002 	tbb	[pc, r2]
 8002d1e:	1935      	.short	0x1935
 8002d20:	19071919 	.word	0x19071919
 8002d24:	19471919 	.word	0x19471919
 8002d28:	1919      	.short	0x1919
 8002d2a:	22          	.byte	0x22
 8002d2b:	00          	.byte	0x00
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	6800      	ldr	r0, [r0, #0]
 8002d30:	f7ff ffb2 	bl	8002c98 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d34:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d36:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d38:	6999      	ldr	r1, [r3, #24]
 8002d3a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002d3e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d40:	6999      	ldr	r1, [r3, #24]
 8002d42:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002d46:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002d4e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002d50:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002d52:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002d54:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002d58:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8002d5c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002d5e:	2002      	movs	r0, #2
}
 8002d60:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d62:	4629      	mov	r1, r5
 8002d64:	6800      	ldr	r0, [r0, #0]
 8002d66:	f7ff fde3 	bl	8002930 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d6a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002d6c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d6e:	69d9      	ldr	r1, [r3, #28]
 8002d70:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002d74:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d76:	69d9      	ldr	r1, [r3, #28]
 8002d78:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002d7c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002d7e:	69da      	ldr	r2, [r3, #28]
 8002d80:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002d84:	61da      	str	r2, [r3, #28]
    break;
 8002d86:	e7e3      	b.n	8002d50 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d88:	4629      	mov	r1, r5
 8002d8a:	6800      	ldr	r0, [r0, #0]
 8002d8c:	f7ff fd6e 	bl	800286c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d90:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d92:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d94:	6999      	ldr	r1, [r3, #24]
 8002d96:	f041 0108 	orr.w	r1, r1, #8
 8002d9a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d9c:	6999      	ldr	r1, [r3, #24]
 8002d9e:	f021 0104 	bic.w	r1, r1, #4
 8002da2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	4302      	orrs	r2, r0
 8002da8:	619a      	str	r2, [r3, #24]
    break;
 8002daa:	e7d1      	b.n	8002d50 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dac:	4629      	mov	r1, r5
 8002dae:	6800      	ldr	r0, [r0, #0]
 8002db0:	f7ff fd8c 	bl	80028cc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002db4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002db6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002db8:	69d9      	ldr	r1, [r3, #28]
 8002dba:	f041 0108 	orr.w	r1, r1, #8
 8002dbe:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dc0:	69d9      	ldr	r1, [r3, #28]
 8002dc2:	f021 0104 	bic.w	r1, r1, #4
 8002dc6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	4302      	orrs	r2, r0
 8002dcc:	61da      	str	r2, [r3, #28]
    break;
 8002dce:	e7bf      	b.n	8002d50 <HAL_TIM_PWM_ConfigChannel+0x54>

08002dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002dd0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d01e      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8002dd8:	4602      	mov	r2, r0
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002dda:	2002      	movs	r0, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002ddc:	6813      	ldr	r3, [r2, #0]
{
 8002dde:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8002de0:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002de4:	685c      	ldr	r4, [r3, #4]
 8002de6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002dea:	e891 0060 	ldmia.w	r1, {r5, r6}
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002dee:	605c      	str	r4, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002df0:	6858      	ldr	r0, [r3, #4]
 8002df2:	4328      	orrs	r0, r5
 8002df4:	6058      	str	r0, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002df6:	6898      	ldr	r0, [r3, #8]
 8002df8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8002dfc:	6098      	str	r0, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002dfe:	6899      	ldr	r1, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
 8002e00:	2400      	movs	r4, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e02:	2501      	movs	r5, #1
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002e04:	4331      	orrs	r1, r6
 8002e06:	6099      	str	r1, [r3, #8]
  
  return HAL_OK;
 8002e08:	4620      	mov	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 8002e0a:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002e0e:	f882 4038 	strb.w	r4, [r2, #56]	; 0x38
} 
 8002e12:	bc70      	pop	{r4, r5, r6}
 8002e14:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002e16:	2002      	movs	r0, #2
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop

08002e1c <HAL_TIMEx_CommutationCallback>:
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop

08002e20 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop

08002e24 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e24:	b084      	sub	sp, #16
 8002e26:	b538      	push	{r3, r4, r5, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
 8002e2a:	ac05      	add	r4, sp, #20
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e2c:	2d01      	cmp	r5, #1
{
 8002e2e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8002e32:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e34:	d018      	beq.n	8002e68 <USB_CoreInit+0x44>
    USB_CoreReset(USBx); 
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e36:	68c3      	ldr	r3, [r0, #12]
 8002e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e3c:	60c3      	str	r3, [r0, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8002e3e:	f000 fc31 	bl	80036a4 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002e42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e46:	63a3      	str	r3, [r4, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8002e48:	9b08      	ldr	r3, [sp, #32]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d107      	bne.n	8002e5e <USB_CoreInit+0x3a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e4e:	68a3      	ldr	r3, [r4, #8]
 8002e50:	f043 0306 	orr.w	r3, r3, #6
 8002e54:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e56:	68a3      	ldr	r3, [r4, #8]
 8002e58:	f043 0320 	orr.w	r3, r3, #32
 8002e5c:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8002e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e62:	2000      	movs	r0, #0
 8002e64:	b004      	add	sp, #16
 8002e66:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e68:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if(cfg.use_external_vbus == 1U)
 8002e6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e70:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e72:	68c3      	ldr	r3, [r0, #12]
 8002e74:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e7c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e7e:	68c3      	ldr	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8002e80:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e82:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002e86:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8002e88:	d003      	beq.n	8002e92 <USB_CoreInit+0x6e>
    USB_CoreReset(USBx); 
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f000 fc0a 	bl	80036a4 <USB_CoreReset>
 8002e90:	e7da      	b.n	8002e48 <USB_CoreInit+0x24>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e92:	68c3      	ldr	r3, [r0, #12]
 8002e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e98:	60c3      	str	r3, [r0, #12]
 8002e9a:	e7f6      	b.n	8002e8a <USB_CoreInit+0x66>

08002e9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e9c:	4602      	mov	r2, r0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
  return HAL_OK;
}
 8002e9e:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ea0:	6893      	ldr	r3, [r2, #8]
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6093      	str	r3, [r2, #8]
}
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop

08002eac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002eac:	4602      	mov	r2, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
  return HAL_OK;
}
 8002eae:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002eb0:	6893      	ldr	r3, [r2, #8]
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	6093      	str	r3, [r2, #8]
}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop

08002ebc <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002ebc:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002ebe:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002ec0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002ec2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002ec6:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8002ec8:	d009      	beq.n	8002ede <USB_SetCurrentMode+0x22>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002eca:	b919      	cbnz	r1, 8002ed4 <USB_SetCurrentMode+0x18>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002ecc:	68c3      	ldr	r3, [r0, #12]
 8002ece:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ed2:	60c3      	str	r3, [r0, #12]
  }
  HAL_Delay(50U);
 8002ed4:	2032      	movs	r0, #50	; 0x32
 8002ed6:	f7fd ff9d 	bl	8000e14 <HAL_Delay>
  
  return HAL_OK;
}
 8002eda:	2000      	movs	r0, #0
 8002edc:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002ede:	68c3      	ldr	r3, [r0, #12]
 8002ee0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ee4:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002ee6:	2032      	movs	r0, #50	; 0x32
 8002ee8:	f7fd ff94 	bl	8000e14 <HAL_Delay>
}
 8002eec:	2000      	movs	r0, #0
 8002eee:	bd08      	pop	{r3, pc}

08002ef0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ef6:	ac08      	add	r4, sp, #32
 8002ef8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8002efc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8002efe:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f02:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002f04:	468e      	mov	lr, r1
  if (cfg.vbus_sensing_enable == 0U)
 8002f06:	2d00      	cmp	r5, #0
 8002f08:	f040 8086 	bne.w	8003018 <USB_DevInit+0x128>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f10:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8002f18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f1a:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
 8002f1e:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8002f22:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f24:	f500 6700 	add.w	r7, r0, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8002f28:	f000 8089 	beq.w	800303e <USB_DevInit+0x14e>
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8002f2c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002f30:	f043 0303 	orr.w	r3, r3, #3
 8002f34:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002f38:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002f3c:	6103      	str	r3, [r0, #16]
 8002f3e:	4b47      	ldr	r3, [pc, #284]	; (800305c <USB_DevInit+0x16c>)
 8002f40:	e001      	b.n	8002f46 <USB_DevInit+0x56>
    if (++count > 200000)
 8002f42:	3b01      	subs	r3, #1
 8002f44:	d002      	beq.n	8002f4c <USB_DevInit+0x5c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f46:	6902      	ldr	r2, [r0, #16]
 8002f48:	0691      	lsls	r1, r2, #26
 8002f4a:	d4fa      	bmi.n	8002f42 <USB_DevInit+0x52>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	6103      	str	r3, [r0, #16]
 8002f50:	4b42      	ldr	r3, [pc, #264]	; (800305c <USB_DevInit+0x16c>)
 8002f52:	e001      	b.n	8002f58 <USB_DevInit+0x68>
    if (++count > 200000)
 8002f54:	3b01      	subs	r3, #1
 8002f56:	d002      	beq.n	8002f5e <USB_DevInit+0x6e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f58:	6902      	ldr	r2, [r0, #16]
 8002f5a:	06d2      	lsls	r2, r2, #27
 8002f5c:	d4fa      	bmi.n	8002f54 <USB_DevInit+0x64>
  USBx_DEVICE->DIEPMSK = 0U;
 8002f5e:	2200      	movs	r2, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002f60:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0U;
 8002f64:	613a      	str	r2, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f66:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002f68:	61bb      	str	r3, [r7, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f6a:	61fa      	str	r2, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f6c:	f1be 0f00 	cmp.w	lr, #0
 8002f70:	d028      	beq.n	8002fc4 <USB_DevInit+0xd4>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f72:	4614      	mov	r4, r2
 8002f74:	f500 6310 	add.w	r3, r0, #2304	; 0x900
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002f78:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002f7c:	26ff      	movs	r6, #255	; 0xff
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f7e:	6819      	ldr	r1, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f80:	3201      	adds	r2, #1
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f82:	2900      	cmp	r1, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002f84:	bfb4      	ite	lt
 8002f86:	f8c3 8000 	strlt.w	r8, [r3]
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f8a:	601c      	strge	r4, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f8c:	4572      	cmp	r2, lr
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f8e:	611c      	str	r4, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002f90:	609e      	str	r6, [r3, #8]
 8002f92:	f103 0320 	add.w	r3, r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f96:	d1f2      	bne.n	8002f7e <USB_DevInit+0x8e>
 8002f98:	2100      	movs	r1, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002f9a:	460e      	mov	r6, r1
 8002f9c:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002fa0:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002fa4:	f04f 0cff 	mov.w	ip, #255	; 0xff
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002fa8:	681c      	ldr	r4, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002faa:	3101      	adds	r1, #1
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002fac:	2c00      	cmp	r4, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002fae:	bfb4      	ite	lt
 8002fb0:	f8c3 8000 	strlt.w	r8, [r3]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002fb4:	601e      	strge	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fb6:	428a      	cmp	r2, r1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002fb8:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002fba:	f8c3 c008 	str.w	ip, [r3, #8]
 8002fbe:	f103 0320 	add.w	r3, r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fc2:	d1f1      	bne.n	8002fa8 <USB_DevInit+0xb8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002fc4:	693b      	ldr	r3, [r7, #16]
  if (cfg.dma_enable == 1U)
 8002fc6:	f1b9 0f01 	cmp.w	r9, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002fca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fce:	613b      	str	r3, [r7, #16]
  if (cfg.dma_enable == 1U)
 8002fd0:	d026      	beq.n	8003020 <USB_DevInit+0x130>
  USBx->GINTMSK = 0U;
 8002fd2:	2200      	movs	r2, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002fd4:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8002fd8:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002fda:	6143      	str	r3, [r0, #20]
  if (cfg.dma_enable == DISABLE)
 8002fdc:	f1b9 0f00 	cmp.w	r9, #0
 8002fe0:	d103      	bne.n	8002fea <USB_DevInit+0xfa>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8002fe2:	6983      	ldr	r3, [r0, #24]
 8002fe4:	f043 0310 	orr.w	r3, r3, #16
 8002fe8:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8002fea:	6981      	ldr	r1, [r0, #24]
 8002fec:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <USB_DevInit+0x170>)
  if(cfg.Sof_enable)
 8002fee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	6183      	str	r3, [r0, #24]
  if(cfg.Sof_enable)
 8002ff4:	b11a      	cbz	r2, 8002ffe <USB_DevInit+0x10e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002ff6:	6983      	ldr	r3, [r0, #24]
 8002ff8:	f043 0308 	orr.w	r3, r3, #8
 8002ffc:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == ENABLE)
 8002ffe:	2d01      	cmp	r5, #1
 8003000:	d105      	bne.n	800300e <USB_DevInit+0x11e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8003002:	6983      	ldr	r3, [r0, #24]
 8003004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003008:	f043 0304 	orr.w	r3, r3, #4
 800300c:	6183      	str	r3, [r0, #24]
}
 800300e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003012:	2000      	movs	r0, #0
 8003014:	b004      	add	sp, #16
 8003016:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800301c:	6383      	str	r3, [r0, #56]	; 0x38
 800301e:	e778      	b.n	8002f12 <USB_DevInit+0x22>
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8003020:	4b10      	ldr	r3, [pc, #64]	; (8003064 <USB_DevInit+0x174>)
 8003022:	633b      	str	r3, [r7, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8003024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302a:	f043 0303 	orr.w	r3, r3, #3
 800302e:	633b      	str	r3, [r7, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8003030:	2200      	movs	r2, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003032:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
    i= USBx_DEVICE->DTHRCTL;
 8003036:	6b39      	ldr	r1, [r7, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8003038:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800303a:	6143      	str	r3, [r0, #20]
 800303c:	e7d5      	b.n	8002fea <USB_DevInit+0xfa>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 800303e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003040:	b923      	cbnz	r3, 800304c <USB_DevInit+0x15c>
  USBx_DEVICE->DCFG |= speed;
 8003042:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003046:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 800304a:	e775      	b.n	8002f38 <USB_DevInit+0x48>
 800304c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 8003058:	e76e      	b.n	8002f38 <USB_DevInit+0x48>
 800305a:	bf00      	nop
 800305c:	00030d40 	.word	0x00030d40
 8003060:	803c3800 	.word	0x803c3800
 8003064:	00800100 	.word	0x00800100

08003068 <USB_FlushTxFifo>:
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8003068:	0189      	lsls	r1, r1, #6
 800306a:	f041 0120 	orr.w	r1, r1, #32
 800306e:	6101      	str	r1, [r0, #16]
 8003070:	4a05      	ldr	r2, [pc, #20]	; (8003088 <USB_FlushTxFifo+0x20>)
 8003072:	e001      	b.n	8003078 <USB_FlushTxFifo+0x10>
    if (++count > 200000)
 8003074:	3a01      	subs	r2, #1
 8003076:	d005      	beq.n	8003084 <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003078:	6903      	ldr	r3, [r0, #16]
 800307a:	f013 0320 	ands.w	r3, r3, #32
 800307e:	d1f9      	bne.n	8003074 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 8003080:	4618      	mov	r0, r3
 8003082:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003084:	2003      	movs	r0, #3
}
 8003086:	4770      	bx	lr
 8003088:	00030d40 	.word	0x00030d40

0800308c <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800308c:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8003090:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 8003094:	f010 0006 	ands.w	r0, r0, #6
 8003098:	d012      	beq.n	80030c0 <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800309a:	6893      	ldr	r3, [r2, #8]
 800309c:	f003 0306 	and.w	r3, r3, #6
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d00c      	beq.n	80030be <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 80030a4:	6893      	ldr	r3, [r2, #8]
 80030a6:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d007      	beq.n	80030be <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80030ae:	6893      	ldr	r3, [r2, #8]
 80030b0:	f003 0306 	and.w	r3, r3, #6
 80030b4:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 80030b6:	bf14      	ite	ne
 80030b8:	2000      	movne	r0, #0
 80030ba:	2002      	moveq	r0, #2
 80030bc:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 80030be:	2003      	movs	r0, #3
  }
  
  return speed;
}
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop

080030c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80030c4:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 80030c6:	784b      	ldrb	r3, [r1, #1]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d020      	beq.n	800310e <USB_ActivateEndpoint+0x4a>
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80030cc:	780c      	ldrb	r4, [r1, #0]
 80030ce:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 80030d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d6:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 80030da:	40a3      	lsls	r3, r4
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80030dc:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80030e0:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80030e2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80030e6:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80030e8:	6803      	ldr	r3, [r0, #0]
 80030ea:	041b      	lsls	r3, r3, #16
 80030ec:	d40c      	bmi.n	8003108 <USB_ActivateEndpoint+0x44>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80030ee:	688a      	ldr	r2, [r1, #8]
 80030f0:	78cc      	ldrb	r4, [r1, #3]
 80030f2:	6801      	ldr	r1, [r0, #0]
 80030f4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80030f8:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 80030fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003100:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8003104:	430b      	orrs	r3, r1
 8003106:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8003108:	2000      	movs	r0, #0
 800310a:	bc30      	pop	{r4, r5}
 800310c:	4770      	bx	lr
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800310e:	780c      	ldrb	r4, [r1, #0]
 8003110:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8003114:	40a3      	lsls	r3, r4
 8003116:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800311a:	b29b      	uxth	r3, r3
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800311c:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8003120:	432b      	orrs	r3, r5
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003122:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8003126:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003128:	6803      	ldr	r3, [r0, #0]
 800312a:	041a      	lsls	r2, r3, #16
 800312c:	d4ec      	bmi.n	8003108 <USB_ActivateEndpoint+0x44>
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 800312e:	688a      	ldr	r2, [r1, #8]
 8003130:	78cd      	ldrb	r5, [r1, #3]
 8003132:	6801      	ldr	r1, [r0, #0]
 8003134:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003138:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 800313c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003140:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 8003144:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8003148:	430b      	orrs	r3, r1
 800314a:	6003      	str	r3, [r0, #0]
}
 800314c:	bc30      	pop	{r4, r5}
 800314e:	2000      	movs	r0, #0
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop

08003154 <USB_DeactivateEndpoint>:
 8003154:	f000 b800 	b.w	8003158 <USB_DeactivateDedicatedEndpoint>

08003158 <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003158:	b470      	push	{r4, r5, r6}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 800315a:	784b      	ldrb	r3, [r1, #1]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d026      	beq.n	80031ae <USB_DeactivateDedicatedEndpoint+0x56>
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8003160:	780d      	ldrb	r5, [r1, #0]
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8003162:	4a2a      	ldr	r2, [pc, #168]	; (800320c <USB_DeactivateDedicatedEndpoint+0xb4>)
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8003164:	f500 6130 	add.w	r1, r0, #2816	; 0xb00
 8003168:	eb01 1145 	add.w	r1, r1, r5, lsl #5
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800316c:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8003170:	680b      	ldr	r3, [r1, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8003172:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8003176:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800317a:	600b      	str	r3, [r1, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800317c:	600e      	str	r6, [r1, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 800317e:	600c      	str	r4, [r1, #0]
 8003180:	e001      	b.n	8003186 <USB_DeactivateDedicatedEndpoint+0x2e>
    
    do
    {
      if (++count > 200000U)
 8003182:	3a01      	subs	r2, #1
 8003184:	d03f      	beq.n	8003206 <USB_DeactivateDedicatedEndpoint+0xae>
        return HAL_TIMEOUT;
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8003186:	688b      	ldr	r3, [r1, #8]
 8003188:	f013 0310 	ands.w	r3, r3, #16
 800318c:	d1f9      	bne.n	8003182 <USB_DeactivateDedicatedEndpoint+0x2a>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800318e:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8003192:	6854      	ldr	r4, [r2, #4]
 8003194:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8003198:	6054      	str	r4, [r2, #4]
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 800319a:	69d1      	ldr	r1, [r2, #28]
 800319c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80031a0:	40a8      	lsls	r0, r5
 80031a2:	ea21 0100 	bic.w	r1, r1, r0
 80031a6:	61d1      	str	r1, [r2, #28]
  }
  return HAL_OK;
 80031a8:	4618      	mov	r0, r3

}
 80031aa:	bc70      	pop	{r4, r5, r6}
 80031ac:	4770      	bx	lr
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 80031ae:	780c      	ldrb	r4, [r1, #0]
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 80031b0:	4b16      	ldr	r3, [pc, #88]	; (800320c <USB_DeactivateDedicatedEndpoint+0xb4>)
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 80031b2:	f500 6110 	add.w	r1, r0, #2304	; 0x900
 80031b6:	eb01 1144 	add.w	r1, r1, r4, lsl #5
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80031ba:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 80031be:	680a      	ldr	r2, [r1, #0]
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 80031c0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 80031c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031c8:	600a      	str	r2, [r1, #0]
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80031ca:	600e      	str	r6, [r1, #0]
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 80031cc:	600d      	str	r5, [r1, #0]
 80031ce:	e001      	b.n	80031d4 <USB_DeactivateDedicatedEndpoint+0x7c>
      if (++count > 200000U)
 80031d0:	3b01      	subs	r3, #1
 80031d2:	d018      	beq.n	8003206 <USB_DeactivateDedicatedEndpoint+0xae>
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 80031d4:	688a      	ldr	r2, [r1, #8]
 80031d6:	0055      	lsls	r5, r2, #1
 80031d8:	d4fa      	bmi.n	80031d0 <USB_DeactivateDedicatedEndpoint+0x78>
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80031da:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80031de:	6103      	str	r3, [r0, #16]
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <USB_DeactivateDedicatedEndpoint+0xb4>)
 80031e2:	e001      	b.n	80031e8 <USB_DeactivateDedicatedEndpoint+0x90>
    if (++count > 200000)
 80031e4:	3b01      	subs	r3, #1
 80031e6:	d002      	beq.n	80031ee <USB_DeactivateDedicatedEndpoint+0x96>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031e8:	6902      	ldr	r2, [r0, #16]
 80031ea:	0692      	lsls	r2, r2, #26
 80031ec:	d4fa      	bmi.n	80031e4 <USB_DeactivateDedicatedEndpoint+0x8c>
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 80031ee:	2301      	movs	r3, #1
 80031f0:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80031f4:	40a3      	lsls	r3, r4
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	ea22 0303 	bic.w	r3, r2, r3
 80031fc:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8003200:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8003202:	2000      	movs	r0, #0
}
 8003204:	4770      	bx	lr
        return HAL_TIMEOUT;
 8003206:	2003      	movs	r0, #3
}
 8003208:	bc70      	pop	{r4, r5, r6}
 800320a:	4770      	bx	lr
 800320c:	00030d40 	.word	0x00030d40

08003210 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003214:	784c      	ldrb	r4, [r1, #1]
 8003216:	2c01      	cmp	r4, #1
 8003218:	d03c      	beq.n	8003294 <USB_EPStartXfer+0x84>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800321a:	780d      	ldrb	r5, [r1, #0]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 

    if (ep->xfer_len == 0U)
 800321c:	694c      	ldr	r4, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800321e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8003222:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8003226:	691d      	ldr	r5, [r3, #16]
 8003228:	0ced      	lsrs	r5, r5, #19
 800322a:	04ed      	lsls	r5, r5, #19
 800322c:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800322e:	691d      	ldr	r5, [r3, #16]
 8003230:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003234:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8003238:	611d      	str	r5, [r3, #16]
    if (ep->xfer_len == 0U)
 800323a:	b304      	cbz	r4, 800327e <USB_EPStartXfer+0x6e>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 800323c:	688d      	ldr	r5, [r1, #8]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 800323e:	4e62      	ldr	r6, [pc, #392]	; (80033c8 <USB_EPStartXfer+0x1b8>)
 8003240:	691f      	ldr	r7, [r3, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8003242:	442c      	add	r4, r5
 8003244:	3c01      	subs	r4, #1
 8003246:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 800324a:	ea06 46c4 	and.w	r6, r6, r4, lsl #19
 800324e:	433e      	orrs	r6, r7
 8003250:	611e      	str	r6, [r3, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8003252:	b2a4      	uxth	r4, r4
 8003254:	fb05 f404 	mul.w	r4, r5, r4
 8003258:	691d      	ldr	r5, [r3, #16]
 800325a:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800325e:	432c      	orrs	r4, r5
 8003260:	611c      	str	r4, [r3, #16]
    }

    if (dma == 1U)
 8003262:	2a01      	cmp	r2, #1
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8003264:	bf04      	itt	eq
 8003266:	68ca      	ldreq	r2, [r1, #12]
 8003268:	615a      	streq	r2, [r3, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 800326a:	78ca      	ldrb	r2, [r1, #3]
 800326c:	2a01      	cmp	r2, #1
 800326e:	d04c      	beq.n	800330a <USB_EPStartXfer+0xfa>
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003276:	601a      	str	r2, [r3, #0]
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8003278:	2000      	movs	r0, #0
 800327a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800327e:	688c      	ldr	r4, [r1, #8]
 8003280:	691d      	ldr	r5, [r3, #16]
 8003282:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003286:	432c      	orrs	r4, r5
 8003288:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 800328a:	691c      	ldr	r4, [r3, #16]
 800328c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003290:	611c      	str	r4, [r3, #16]
 8003292:	e7e6      	b.n	8003262 <USB_EPStartXfer+0x52>
    if (ep->xfer_len == 0U)
 8003294:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003296:	780e      	ldrb	r6, [r1, #0]
    if (ep->xfer_len == 0U)
 8003298:	2d00      	cmp	r5, #0
 800329a:	d042      	beq.n	8003322 <USB_EPStartXfer+0x112>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800329c:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 80032a0:	eb03 1346 	add.w	r3, r3, r6, lsl #5
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 80032a4:	f8d1 8008 	ldr.w	r8, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80032a8:	f8d3 c010 	ldr.w	ip, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 80032ac:	4f46      	ldr	r7, [pc, #280]	; (80033c8 <USB_EPStartXfer+0x1b8>)
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80032ae:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 80032b2:	ea4f 4ccc 	mov.w	ip, ip, lsl #19
 80032b6:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80032ba:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80032be:	f02c 5cff 	bic.w	ip, ip, #534773760	; 0x1fe00000
 80032c2:	f42c 1cc0 	bic.w	ip, ip, #1572864	; 0x180000
 80032c6:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 80032ca:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80032ce:	eb05 0e08 	add.w	lr, r5, r8
 80032d2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80032d6:	fbbe fef8 	udiv	lr, lr, r8
 80032da:	ea07 47ce 	and.w	r7, r7, lr, lsl #19
 80032de:	ea47 070c 	orr.w	r7, r7, ip
 80032e2:	611f      	str	r7, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80032e4:	f8d3 e010 	ldr.w	lr, [r3, #16]
 80032e8:	f3c5 0712 	ubfx	r7, r5, #0, #19
 80032ec:	ea47 070e 	orr.w	r7, r7, lr
 80032f0:	611f      	str	r7, [r3, #16]
      if (ep->type == EP_TYPE_ISOC)
 80032f2:	78cf      	ldrb	r7, [r1, #3]
 80032f4:	2f01      	cmp	r7, #1
 80032f6:	d056      	beq.n	80033a6 <USB_EPStartXfer+0x196>
    if (dma == 1U)
 80032f8:	2a01      	cmp	r2, #1
 80032fa:	d061      	beq.n	80033c0 <USB_EPStartXfer+0x1b0>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 80032fc:	40b4      	lsls	r4, r6
 80032fe:	f8d0 6834 	ldr.w	r6, [r0, #2100]	; 0x834
 8003302:	4334      	orrs	r4, r6
 8003304:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8003308:	e7b2      	b.n	8003270 <USB_EPStartXfer+0x60>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 800330a:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800330e:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	bf0c      	ite	eq
 8003316:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800331a:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e7a6      	b.n	8003270 <USB_EPStartXfer+0x60>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003322:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 8003326:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    if (dma == 1U)
 800332a:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800332c:	691c      	ldr	r4, [r3, #16]
 800332e:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003332:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8003336:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003338:	691c      	ldr	r4, [r3, #16]
 800333a:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800333e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003340:	691c      	ldr	r4, [r3, #16]
 8003342:	ea4f 44d4 	mov.w	r4, r4, lsr #19
 8003346:	ea4f 44c4 	mov.w	r4, r4, lsl #19
 800334a:	611c      	str	r4, [r3, #16]
 800334c:	78cc      	ldrb	r4, [r1, #3]
    if (dma == 1U)
 800334e:	d024      	beq.n	800339a <USB_EPStartXfer+0x18a>
      if (ep->type != EP_TYPE_ISOC)
 8003350:	2c01      	cmp	r4, #1
 8003352:	d18d      	bne.n	8003270 <USB_EPStartXfer+0x60>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003354:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8003358:	f414 7f80 	tst.w	r4, #256	; 0x100
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800335c:	681c      	ldr	r4, [r3, #0]
 800335e:	bf0c      	ite	eq
 8003360:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003364:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8003368:	601c      	str	r4, [r3, #0]
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800336a:	681c      	ldr	r4, [r3, #0]
 800336c:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003370:	601c      	str	r4, [r3, #0]
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8003372:	2a00      	cmp	r2, #0
 8003374:	d180      	bne.n	8003278 <USB_EPStartXfer+0x68>
  {
    count32b =  (len + 3U) / 4U;
 8003376:	b2ad      	uxth	r5, r5
 8003378:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++, src += 4U)
 800337a:	08ad      	lsrs	r5, r5, #2
 800337c:	f43f af7c 	beq.w	8003278 <USB_EPStartXfer+0x68>
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8003380:	68cb      	ldr	r3, [r1, #12]
 8003382:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003386:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 800338a:	eb00 3606 	add.w	r6, r0, r6, lsl #12
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800338e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003392:	6032      	str	r2, [r6, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003394:	428b      	cmp	r3, r1
 8003396:	d1fa      	bne.n	800338e <USB_EPStartXfer+0x17e>
 8003398:	e76e      	b.n	8003278 <USB_EPStartXfer+0x68>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800339a:	690f      	ldr	r7, [r1, #16]
 800339c:	615f      	str	r7, [r3, #20]
    if (ep->type == EP_TYPE_ISOC)
 800339e:	2c01      	cmp	r4, #1
 80033a0:	f47f af66 	bne.w	8003270 <USB_EPStartXfer+0x60>
 80033a4:	e7d6      	b.n	8003354 <USB_EPStartXfer+0x144>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 80033a6:	691c      	ldr	r4, [r3, #16]
 80033a8:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 80033ac:	611c      	str	r4, [r3, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 80033ae:	691c      	ldr	r4, [r3, #16]
    if (dma == 1U)
 80033b0:	2a01      	cmp	r2, #1
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 80033b2:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80033b6:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 80033b8:	d1cc      	bne.n	8003354 <USB_EPStartXfer+0x144>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80033ba:	690c      	ldr	r4, [r1, #16]
 80033bc:	615c      	str	r4, [r3, #20]
 80033be:	e7c9      	b.n	8003354 <USB_EPStartXfer+0x144>
 80033c0:	690a      	ldr	r2, [r1, #16]
 80033c2:	615a      	str	r2, [r3, #20]
 80033c4:	e754      	b.n	8003270 <USB_EPStartXfer+0x60>
 80033c6:	bf00      	nop
 80033c8:	1ff80000 	.word	0x1ff80000

080033cc <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 80033cc:	784b      	ldrb	r3, [r1, #1]
 80033ce:	2b01      	cmp	r3, #1
{
 80033d0:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 80033d2:	d027      	beq.n	8003424 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80033d4:	780b      	ldrb	r3, [r1, #0]
    if (ep->xfer_len > 0U)
 80033d6:	694c      	ldr	r4, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80033d8:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80033dc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80033e0:	6903      	ldr	r3, [r0, #16]
 80033e2:	0cdb      	lsrs	r3, r3, #19
 80033e4:	04db      	lsls	r3, r3, #19
 80033e6:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80033e8:	6903      	ldr	r3, [r0, #16]
 80033ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033f2:	6103      	str	r3, [r0, #16]
      ep->xfer_len = ep->maxpacket;
 80033f4:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 80033f6:	b99c      	cbnz	r4, 8003420 <USB_EP0StartXfer+0x54>
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80033f8:	6904      	ldr	r4, [r0, #16]
 80033fa:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80033fe:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003400:	6904      	ldr	r4, [r0, #16]
 8003402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003406:	4323      	orrs	r3, r4
    if (dma == 1U)
 8003408:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 800340a:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800340c:	bf04      	itt	eq
 800340e:	68cb      	ldreq	r3, [r1, #12]
 8003410:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8003412:	6803      	ldr	r3, [r0, #0]
 8003414:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003418:	6003      	str	r3, [r0, #0]
}
 800341a:	2000      	movs	r0, #0
 800341c:	bcf0      	pop	{r4, r5, r6, r7}
 800341e:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 8003420:	614b      	str	r3, [r1, #20]
 8003422:	e7e9      	b.n	80033f8 <USB_EP0StartXfer+0x2c>
    if (ep->xfer_len == 0U)
 8003424:	694c      	ldr	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003426:	780e      	ldrb	r6, [r1, #0]
    if (ep->xfer_len == 0U)
 8003428:	2c00      	cmp	r4, #0
 800342a:	d030      	beq.n	800348e <USB_EP0StartXfer+0xc2>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800342c:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 8003430:	eb03 1346 	add.w	r3, r3, r6, lsl #5
      if(ep->xfer_len > ep->maxpacket)
 8003434:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003436:	691d      	ldr	r5, [r3, #16]
 8003438:	0ced      	lsrs	r5, r5, #19
 800343a:	04ed      	lsls	r5, r5, #19
 800343c:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800343e:	691d      	ldr	r5, [r3, #16]
 8003440:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003444:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8003448:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 800344a:	691d      	ldr	r5, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 800344c:	42bc      	cmp	r4, r7
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 800344e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 8003452:	bf88      	it	hi
 8003454:	614f      	strhi	r7, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003456:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003458:	691d      	ldr	r5, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 800345a:	bf88      	it	hi
 800345c:	463c      	movhi	r4, r7
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800345e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003462:	432c      	orrs	r4, r5
 8003464:	611c      	str	r4, [r3, #16]
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8003466:	681c      	ldr	r4, [r3, #0]
    if (dma == 1)
 8003468:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 800346a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800346e:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 8003470:	d020      	beq.n	80034b4 <USB_EP0StartXfer+0xe8>
      if (ep->xfer_len > 0U)
 8003472:	694b      	ldr	r3, [r1, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0d0      	beq.n	800341a <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8003478:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800347c:	2301      	movs	r3, #1
 800347e:	fa03 f606 	lsl.w	r6, r3, r6
 8003482:	4316      	orrs	r6, r2
 8003484:	f8c0 6834 	str.w	r6, [r0, #2100]	; 0x834
}
 8003488:	2000      	movs	r0, #0
 800348a:	bcf0      	pop	{r4, r5, r6, r7}
 800348c:	4770      	bx	lr
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800348e:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 8003492:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8003496:	691c      	ldr	r4, [r3, #16]
 8003498:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800349c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80034a0:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80034a2:	691c      	ldr	r4, [r3, #16]
 80034a4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80034a8:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80034aa:	691c      	ldr	r4, [r3, #16]
 80034ac:	0ce4      	lsrs	r4, r4, #19
 80034ae:	04e4      	lsls	r4, r4, #19
 80034b0:	611c      	str	r4, [r3, #16]
 80034b2:	e7d8      	b.n	8003466 <USB_EP0StartXfer+0x9a>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80034b4:	690a      	ldr	r2, [r1, #16]
 80034b6:	615a      	str	r2, [r3, #20]
 80034b8:	e7af      	b.n	800341a <USB_EP0StartXfer+0x4e>
 80034ba:	bf00      	nop

080034bc <USB_WritePacket>:
{
 80034bc:	b410      	push	{r4}
 80034be:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 80034c2:	b96c      	cbnz	r4, 80034e0 <USB_WritePacket+0x24>
    count32b =  (len + 3U) / 4U;
 80034c4:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	d00a      	beq.n	80034e0 <USB_WritePacket+0x24>
 80034ca:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80034ce:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 80034d2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80034d6:	f851 3b04 	ldr.w	r3, [r1], #4
 80034da:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 80034dc:	4281      	cmp	r1, r0
 80034de:	d1fa      	bne.n	80034d6 <USB_WritePacket+0x1a>
    }
  }
  return HAL_OK;
}
 80034e0:	2000      	movs	r0, #0
 80034e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 80034e8:	3203      	adds	r2, #3
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80034ea:	0892      	lsrs	r2, r2, #2
 80034ec:	d008      	beq.n	8003500 <USB_ReadPacket+0x18>
 80034ee:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80034f2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80034f6:	6803      	ldr	r3, [r0, #0]
 80034f8:	f841 3b04 	str.w	r3, [r1], #4
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80034fc:	428a      	cmp	r2, r1
 80034fe:	d1fa      	bne.n	80034f6 <USB_ReadPacket+0xe>
    
  }
  return ((void *)dest);
}
 8003500:	4608      	mov	r0, r1
 8003502:	4770      	bx	lr

08003504 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8003504:	784b      	ldrb	r3, [r1, #1]
 8003506:	2b01      	cmp	r3, #1
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8003508:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800350a:	d010      	beq.n	800352e <USB_EPSetStall+0x2a>
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 800350c:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8003510:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003514:	6803      	ldr	r3, [r0, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	db03      	blt.n	8003522 <USB_EPSetStall+0x1e>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 800351a:	6803      	ldr	r3, [r0, #0]
 800351c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003520:	6003      	str	r3, [r0, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003522:	6803      	ldr	r3, [r0, #0]
 8003524:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003528:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 800352a:	2000      	movs	r0, #0
 800352c:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 800352e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8003532:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003536:	6803      	ldr	r3, [r0, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	daee      	bge.n	800351a <USB_EPSetStall+0x16>
 800353c:	e7f1      	b.n	8003522 <USB_EPSetStall+0x1e>
 800353e:	bf00      	nop

08003540 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8003540:	784b      	ldrb	r3, [r1, #1]
 8003542:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003544:	780b      	ldrb	r3, [r1, #0]
 8003546:	bf0c      	ite	eq
 8003548:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800354c:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8003550:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003554:	6803      	ldr	r3, [r0, #0]
 8003556:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800355a:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800355c:	78cb      	ldrb	r3, [r1, #3]
 800355e:	3b02      	subs	r3, #2
 8003560:	2b01      	cmp	r3, #1
 8003562:	d803      	bhi.n	800356c <USB_EPClearStall+0x2c>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003564:	6803      	ldr	r3, [r0, #0]
 8003566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356a:	6003      	str	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 800356c:	2000      	movs	r0, #0
 800356e:	4770      	bx	lr

08003570 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003570:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003574:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003578:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 800357c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003580:	0109      	lsls	r1, r1, #4
 8003582:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8003586:	4319      	orrs	r1, r3
 8003588:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 800358c:	2000      	movs	r0, #0
 800358e:	4770      	bx	lr

08003590 <USB_DevConnect>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8003590:	f500 6200 	add.w	r2, r0, #2048	; 0x800
{
 8003594:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8003596:	6853      	ldr	r3, [r2, #4]
 8003598:	f023 0302 	bic.w	r3, r3, #2
  HAL_Delay(3U);
 800359c:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 800359e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80035a0:	f7fd fc38 	bl	8000e14 <HAL_Delay>
  
  return HAL_OK;  
}
 80035a4:	2000      	movs	r0, #0
 80035a6:	bd08      	pop	{r3, pc}

080035a8 <USB_DevDisconnect>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80035a8:	f500 6200 	add.w	r2, r0, #2048	; 0x800
{
 80035ac:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80035ae:	6853      	ldr	r3, [r2, #4]
 80035b0:	f043 0302 	orr.w	r3, r3, #2
  HAL_Delay(3U);
 80035b4:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80035b6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80035b8:	f7fd fc2c 	bl	8000e14 <HAL_Delay>
  
  return HAL_OK;  
}
 80035bc:	2000      	movs	r0, #0
 80035be:	bd08      	pop	{r3, pc}

080035c0 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 80035c0:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 80035c2:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 80035c4:	4010      	ands	r0, r2
 80035c6:	4770      	bx	lr

080035c8 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80035c8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80035cc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 80035d0:	69c0      	ldr	r0, [r0, #28]
 80035d2:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 80035d4:	0c00      	lsrs	r0, r0, #16
 80035d6:	4770      	bx	lr

080035d8 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80035d8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80035dc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 80035e0:	69c0      	ldr	r0, [r0, #28]
 80035e2:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 80035e4:	b280      	uxth	r0, r0
 80035e6:	4770      	bx	lr

080035e8 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 80035e8:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80035ec:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 80035f0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 80035f4:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 80035f6:	6940      	ldr	r0, [r0, #20]
  return v;
}
 80035f8:	4010      	ands	r0, r2
 80035fa:	4770      	bx	lr

080035fc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80035fc:	b410      	push	{r4}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 80035fe:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003602:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003606:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800360a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 800360e:	40cb      	lsrs	r3, r1
 8003610:	01db      	lsls	r3, r3, #7
 8003612:	b2db      	uxtb	r3, r3
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003614:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003616:	4323      	orrs	r3, r4
  return v;
}
 8003618:	4018      	ands	r0, r3
 800361a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800361e:	4770      	bx	lr

08003620 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8003620:	6940      	ldr	r0, [r0, #20]
}
 8003622:	f000 0001 	and.w	r0, r0, #1
 8003626:	4770      	bx	lr

08003628 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003628:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800362c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003630:	f023 0307 	bic.w	r3, r3, #7
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003634:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003638:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800363c:	6893      	ldr	r3, [r2, #8]
 800363e:	f003 0306 	and.w	r3, r3, #6
 8003642:	2b04      	cmp	r3, #4
 8003644:	d105      	bne.n	8003652 <USB_ActivateSetup+0x2a>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003646:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800364a:	f043 0303 	orr.w	r3, r3, #3
 800364e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003652:	6853      	ldr	r3, [r2, #4]
 8003654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003658:	6053      	str	r3, [r2, #4]

  return HAL_OK;
}
 800365a:	2000      	movs	r0, #0
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop

08003660 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003660:	b410      	push	{r4}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003662:	2400      	movs	r4, #0
 8003664:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003668:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800366c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003670:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003674:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003678:	f044 0418 	orr.w	r4, r4, #24
 800367c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003680:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 8003684:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003686:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800368a:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 800368e:	d105      	bne.n	800369c <USB_EP0_OutStart+0x3c>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8003690:	f04f 2180 	mov.w	r1, #2147516416	; 0x80008000
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003694:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8003698:	f8c0 1b00 	str.w	r1, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 800369c:	2000      	movs	r0, #0
 800369e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <USB_CoreReset+0x30>)
 80036a6:	e001      	b.n	80036ac <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80036a8:	3b01      	subs	r3, #1
 80036aa:	d010      	beq.n	80036ce <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036ac:	6902      	ldr	r2, [r0, #16]
 80036ae:	2a00      	cmp	r2, #0
 80036b0:	dafa      	bge.n	80036a8 <USB_CoreReset+0x4>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80036b2:	6903      	ldr	r3, [r0, #16]
 80036b4:	4a07      	ldr	r2, [pc, #28]	; (80036d4 <USB_CoreReset+0x30>)
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	6103      	str	r3, [r0, #16]
 80036bc:	e001      	b.n	80036c2 <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 80036be:	3a01      	subs	r2, #1
 80036c0:	d005      	beq.n	80036ce <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80036c2:	6903      	ldr	r3, [r0, #16]
 80036c4:	f013 0301 	ands.w	r3, r3, #1
 80036c8:	d1f9      	bne.n	80036be <USB_CoreReset+0x1a>
  
  return HAL_OK;
 80036ca:	4618      	mov	r0, r3
}
 80036cc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80036ce:	2003      	movs	r0, #3
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	00030d40 	.word	0x00030d40

080036d8 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80036d8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 80036dc:	b11b      	cbz	r3, 80036e6 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 80036de:	2000      	movs	r0, #0
 80036e0:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 80036e4:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 80036e6:	2002      	movs	r0, #2
  }
}
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop

080036ec <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80036ec:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 80036f0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80036f2:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80036f6:	b15b      	cbz	r3, 8003710 <USBD_CDC_EP0_RxReady+0x24>
 80036f8:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80036fc:	28ff      	cmp	r0, #255	; 0xff
 80036fe:	d007      	beq.n	8003710 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003706:	4621      	mov	r1, r4
 8003708:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800370a:	23ff      	movs	r3, #255	; 0xff
 800370c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8003710:	2000      	movs	r0, #0
 8003712:	bd10      	pop	{r4, pc}

08003714 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8003714:	2343      	movs	r3, #67	; 0x43
 8003716:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003718:	4800      	ldr	r0, [pc, #0]	; (800371c <USBD_CDC_GetFSCfgDesc+0x8>)
 800371a:	4770      	bx	lr
 800371c:	20000038 	.word	0x20000038

08003720 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003720:	2343      	movs	r3, #67	; 0x43
 8003722:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003724:	4800      	ldr	r0, [pc, #0]	; (8003728 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003726:	4770      	bx	lr
 8003728:	2000007c 	.word	0x2000007c

0800372c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800372c:	2343      	movs	r3, #67	; 0x43
 800372e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003730:	4800      	ldr	r0, [pc, #0]	; (8003734 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003732:	4770      	bx	lr
 8003734:	200000cc 	.word	0x200000cc

08003738 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8003738:	230a      	movs	r3, #10
 800373a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800373c:	4800      	ldr	r0, [pc, #0]	; (8003740 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800373e:	4770      	bx	lr
 8003740:	200000c0 	.word	0x200000c0

08003744 <USBD_CDC_DataOut>:
{      
 8003744:	b538      	push	{r3, r4, r5, lr}
 8003746:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003748:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800374c:	f002 fcea 	bl	8006124 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8003750:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003754:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8003758:	b14b      	cbz	r3, 800376e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800375a:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800375e:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8003768:	4798      	blx	r3
    return USBD_OK;
 800376a:	2000      	movs	r0, #0
 800376c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800376e:	2002      	movs	r0, #2
}
 8003770:	bd38      	pop	{r3, r4, r5, pc}
 8003772:	bf00      	nop

08003774 <USBD_CDC_Setup>:
{
 8003774:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003776:	780b      	ldrb	r3, [r1, #0]
 8003778:	f013 0260 	ands.w	r2, r3, #96	; 0x60
{
 800377c:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800377e:	d012      	beq.n	80037a6 <USBD_CDC_Setup+0x32>
 8003780:	2a20      	cmp	r2, #32
 8003782:	d10e      	bne.n	80037a2 <USBD_CDC_Setup+0x2e>
    if (req->wLength)
 8003784:	88ca      	ldrh	r2, [r1, #6]
 8003786:	4605      	mov	r5, r0
 8003788:	b312      	cbz	r2, 80037d0 <USBD_CDC_Setup+0x5c>
      if (req->bmRequest & 0x80)
 800378a:	061b      	lsls	r3, r3, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800378c:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8003790:	d412      	bmi.n	80037b8 <USBD_CDC_Setup+0x44>
        hcdc->CmdOpCode = req->bRequest;
 8003792:	784b      	ldrb	r3, [r1, #1]
 8003794:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8003798:	f886 2201 	strb.w	r2, [r6, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 800379c:	4631      	mov	r1, r6
 800379e:	f000 fc35 	bl	800400c <USBD_CtlPrepareRx>
}
 80037a2:	2000      	movs	r0, #0
 80037a4:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 80037a6:	784b      	ldrb	r3, [r1, #1]
 80037a8:	2b0a      	cmp	r3, #10
 80037aa:	d1fa      	bne.n	80037a2 <USBD_CDC_Setup+0x2e>
      USBD_CtlSendData (pdev,
 80037ac:	2201      	movs	r2, #1
 80037ae:	490b      	ldr	r1, [pc, #44]	; (80037dc <USBD_CDC_Setup+0x68>)
 80037b0:	f000 fc16 	bl	8003fe0 <USBD_CtlSendData>
}
 80037b4:	2000      	movs	r0, #0
 80037b6:	bd70      	pop	{r4, r5, r6, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80037b8:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80037bc:	7848      	ldrb	r0, [r1, #1]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4631      	mov	r1, r6
 80037c2:	4798      	blx	r3
          USBD_CtlSendData (pdev, 
 80037c4:	88e2      	ldrh	r2, [r4, #6]
 80037c6:	4631      	mov	r1, r6
 80037c8:	4628      	mov	r0, r5
 80037ca:	f000 fc09 	bl	8003fe0 <USBD_CtlSendData>
 80037ce:	e7e8      	b.n	80037a2 <USBD_CDC_Setup+0x2e>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80037d0:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80037d4:	7848      	ldrb	r0, [r1, #1]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4798      	blx	r3
 80037da:	e7e2      	b.n	80037a2 <USBD_CDC_Setup+0x2e>
 80037dc:	20000348 	.word	0x20000348

080037e0 <USBD_CDC_DeInit>:
{
 80037e0:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 80037e2:	2181      	movs	r1, #129	; 0x81
{
 80037e4:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80037e6:	f002 fc35 	bl	8006054 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80037ea:	2101      	movs	r1, #1
 80037ec:	4620      	mov	r0, r4
 80037ee:	f002 fc31 	bl	8006054 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80037f2:	4620      	mov	r0, r4
 80037f4:	2182      	movs	r1, #130	; 0x82
 80037f6:	f002 fc2d 	bl	8006054 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 80037fa:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80037fe:	b153      	cbz	r3, 8003816 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003800:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003808:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800380c:	f002 fd56 	bl	80062bc <free>
    pdev->pClassData = NULL;
 8003810:	2300      	movs	r3, #0
 8003812:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8003816:	2000      	movs	r0, #0
 8003818:	bd10      	pop	{r4, pc}
 800381a:	bf00      	nop

0800381c <USBD_CDC_Init>:
{
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800381e:	7c03      	ldrb	r3, [r0, #16]
{
 8003820:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003822:	bb73      	cbnz	r3, 8003882 <USBD_CDC_Init+0x66>
    USBD_LL_OpenEP(pdev,
 8003824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003828:	2202      	movs	r2, #2
 800382a:	2181      	movs	r1, #129	; 0x81
 800382c:	f002 fc02 	bl	8006034 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8003830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003834:	2202      	movs	r2, #2
 8003836:	2101      	movs	r1, #1
 8003838:	4620      	mov	r0, r4
 800383a:	f002 fbfb 	bl	8006034 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800383e:	2308      	movs	r3, #8
 8003840:	2203      	movs	r2, #3
 8003842:	2182      	movs	r1, #130	; 0x82
 8003844:	4620      	mov	r0, r4
 8003846:	f002 fbf5 	bl	8006034 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800384a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800384e:	f002 fd2d 	bl	80062ac <malloc>
 8003852:	4605      	mov	r5, r0
 8003854:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8003858:	b330      	cbz	r0, 80038a8 <USBD_CDC_Init+0x8c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800385a:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003862:	7c27      	ldrb	r7, [r4, #16]
      USBD_LL_PrepareReceive(pdev,
 8003864:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    hcdc->TxState =0;
 8003868:	2600      	movs	r6, #0
 800386a:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
      USBD_LL_PrepareReceive(pdev,
 800386e:	4620      	mov	r0, r4
    hcdc->RxState =0;
 8003870:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003874:	b18f      	cbz	r7, 800389a <USBD_CDC_Init+0x7e>
      USBD_LL_PrepareReceive(pdev,
 8003876:	2340      	movs	r3, #64	; 0x40
 8003878:	2101      	movs	r1, #1
 800387a:	f002 fc45 	bl	8006108 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800387e:	4630      	mov	r0, r6
 8003880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8003882:	2340      	movs	r3, #64	; 0x40
 8003884:	2202      	movs	r2, #2
 8003886:	2181      	movs	r1, #129	; 0x81
 8003888:	f002 fbd4 	bl	8006034 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800388c:	2340      	movs	r3, #64	; 0x40
 800388e:	2202      	movs	r2, #2
 8003890:	2101      	movs	r1, #1
 8003892:	4620      	mov	r0, r4
 8003894:	f002 fbce 	bl	8006034 <USBD_LL_OpenEP>
 8003898:	e7d1      	b.n	800383e <USBD_CDC_Init+0x22>
      USBD_LL_PrepareReceive(pdev,
 800389a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800389e:	2101      	movs	r1, #1
 80038a0:	f002 fc32 	bl	8006108 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80038a4:	4638      	mov	r0, r7
 80038a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 80038a8:	2001      	movs	r0, #1
}
 80038aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080038ac <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80038ac:	b119      	cbz	r1, 80038b6 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80038ae:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80038b2:	2000      	movs	r0, #0
 80038b4:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80038b6:	2002      	movs	r0, #2
  }
  
  return ret;
}
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop

080038bc <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80038bc:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80038c0:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80038c2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80038c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80038ca:	4770      	bx	lr

080038cc <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 80038cc:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 80038d0:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80038d2:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80038d6:	4770      	bx	lr

080038d8 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80038d8:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 80038dc:	b18a      	cbz	r2, 8003902 <USBD_CDC_TransmitPacket+0x2a>
{      
 80038de:	b510      	push	{r4, lr}
  {
    if(hcdc->TxState == 0)
 80038e0:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 80038e4:	b10c      	cbz	r4, 80038ea <USBD_CDC_TransmitPacket+0x12>
      
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 80038e6:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80038e8:	bd10      	pop	{r4, pc}
      hcdc->TxState = 1;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev,
 80038f0:	2181      	movs	r1, #129	; 0x81
 80038f2:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 80038f6:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80038fa:	f002 fbf7 	bl	80060ec <USBD_LL_Transmit>
      return USBD_OK;
 80038fe:	4620      	mov	r0, r4
 8003900:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003902:	2002      	movs	r0, #2
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop

08003908 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003908:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800390c:	b18a      	cbz	r2, 8003932 <USBD_CDC_ReceivePacket+0x2a>
{      
 800390e:	b510      	push	{r4, lr}
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003910:	7c04      	ldrb	r4, [r0, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003912:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003916:	b12c      	cbz	r4, 8003924 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003918:	2340      	movs	r3, #64	; 0x40
 800391a:	2101      	movs	r1, #1
 800391c:	f002 fbf4 	bl	8006108 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003920:	2000      	movs	r0, #0
 8003922:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003928:	2101      	movs	r1, #1
 800392a:	f002 fbed 	bl	8006108 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800392e:	4620      	mov	r0, r4
 8003930:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 8003932:	2002      	movs	r0, #2
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop

08003938 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003938:	b188      	cbz	r0, 800395e <USBD_Init+0x26>
{
 800393a:	b508      	push	{r3, lr}
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800393c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003940:	b113      	cbz	r3, 8003948 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003942:	2300      	movs	r3, #0
 8003944:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003948:	b109      	cbz	r1, 800394e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800394a:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800394e:	2301      	movs	r3, #1
  pdev->id = id;
 8003950:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003952:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003956:	f002 fb21 	bl	8005f9c <USBD_LL_Init>
  
  return USBD_OK; 
 800395a:	2000      	movs	r0, #0
 800395c:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800395e:	2002      	movs	r0, #2
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop

08003964 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003964:	b119      	cbz	r1, 800396e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003966:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800396a:	2000      	movs	r0, #0
 800396c:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800396e:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop

08003974 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003974:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8003976:	f002 fb4f 	bl	8006018 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800397a:	2000      	movs	r0, #0
 800397c:	bd08      	pop	{r3, pc}
 800397e:	bf00      	nop

08003980 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003980:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003982:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003986:	b113      	cbz	r3, 800398e <USBD_SetClassConfig+0xe>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4798      	blx	r3
 800398c:	b108      	cbz	r0, 8003992 <USBD_SetClassConfig+0x12>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800398e:	2002      	movs	r0, #2
 8003990:	bd08      	pop	{r3, pc}
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8003992:	bd08      	pop	{r3, pc}

08003994 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003994:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8003996:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4798      	blx	r3
  return USBD_OK;
}
 800399e:	2000      	movs	r0, #0
 80039a0:	bd08      	pop	{r3, pc}
 80039a2:	bf00      	nop

080039a4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80039a8:	f500 7502 	add.w	r5, r0, #520	; 0x208
 80039ac:	4628      	mov	r0, r5
 80039ae:	f000 fadd 	bl	8003f6c <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80039b2:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_data_len = pdev->request.wLength;
 80039b6:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80039ba:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  pdev->ep0_state = USBD_EP0_SETUP;
 80039be:	2201      	movs	r2, #1
  switch (pdev->request.bmRequest & 0x1F) 
 80039c0:	f001 031f 	and.w	r3, r1, #31
 80039c4:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 80039c6:	f8c4 21f4 	str.w	r2, [r4, #500]	; 0x1f4
  switch (pdev->request.bmRequest & 0x1F) 
 80039ca:	d015      	beq.n	80039f8 <USBD_LL_SetupStage+0x54>
 80039cc:	d30e      	bcc.n	80039ec <USBD_LL_SetupStage+0x48>
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d006      	beq.n	80039e0 <USBD_LL_SetupStage+0x3c>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80039d2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80039d6:	4620      	mov	r0, r4
 80039d8:	f002 fb4a 	bl	8006070 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 80039dc:	2000      	movs	r0, #0
 80039de:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);   
 80039e0:	4629      	mov	r1, r5
 80039e2:	4620      	mov	r0, r4
 80039e4:	f000 fa5a 	bl	8003e9c <USBD_StdEPReq>
}
 80039e8:	2000      	movs	r0, #0
 80039ea:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 80039ec:	4629      	mov	r1, r5
 80039ee:	4620      	mov	r0, r4
 80039f0:	f000 f8e6 	bl	8003bc0 <USBD_StdDevReq>
}
 80039f4:	2000      	movs	r0, #0
 80039f6:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80039f8:	4629      	mov	r1, r5
 80039fa:	4620      	mov	r0, r4
 80039fc:	f000 fa30 	bl	8003e60 <USBD_StdItfReq>
}
 8003a00:	2000      	movs	r0, #0
 8003a02:	bd38      	pop	{r3, r4, r5, pc}

08003a04 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003a04:	b510      	push	{r4, lr}
 8003a06:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003a08:	b931      	cbnz	r1, 8003a18 <USBD_LL_DataOutStage+0x14>
 8003a0a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003a0c:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003a10:	2a03      	cmp	r2, #3
 8003a12:	d00c      	beq.n	8003a2e <USBD_LL_DataOutStage+0x2a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003a14:	2000      	movs	r0, #0
 8003a16:	bd10      	pop	{r4, pc}
  else if((pdev->pClass->DataOut != NULL)&&
 8003a18:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f8      	beq.n	8003a14 <USBD_LL_DataOutStage+0x10>
 8003a22:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003a26:	2a03      	cmp	r2, #3
 8003a28:	d1f4      	bne.n	8003a14 <USBD_LL_DataOutStage+0x10>
    pdev->pClass->DataOut(pdev, epnum); 
 8003a2a:	4798      	blx	r3
 8003a2c:	e7f2      	b.n	8003a14 <USBD_LL_DataOutStage+0x10>
      if(pep->rem_length > pep->maxpacket)
 8003a2e:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8003a32:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003a36:	4291      	cmp	r1, r2
 8003a38:	d80c      	bhi.n	8003a54 <USBD_LL_DataOutStage+0x50>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003a3a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	b11b      	cbz	r3, 8003a4a <USBD_LL_DataOutStage+0x46>
 8003a42:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003a46:	2a03      	cmp	r2, #3
 8003a48:	d00f      	beq.n	8003a6a <USBD_LL_DataOutStage+0x66>
        USBD_CtlSendStatus(pdev);
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f000 faf6 	bl	800403c <USBD_CtlSendStatus>
}
 8003a50:	2000      	movs	r0, #0
 8003a52:	bd10      	pop	{r4, pc}
        pep->rem_length -=  pep->maxpacket;
 8003a54:	1a89      	subs	r1, r1, r2
                            MIN(pep->rem_length ,pep->maxpacket));
 8003a56:	428a      	cmp	r2, r1
 8003a58:	bf28      	it	cs
 8003a5a:	460a      	movcs	r2, r1
        USBD_CtlContinueRx (pdev, 
 8003a5c:	b292      	uxth	r2, r2
        pep->rem_length -=  pep->maxpacket;
 8003a5e:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8003a62:	4619      	mov	r1, r3
 8003a64:	f000 fae2 	bl	800402c <USBD_CtlContinueRx>
 8003a68:	e7d4      	b.n	8003a14 <USBD_LL_DataOutStage+0x10>
          pdev->pClass->EP0_RxReady(pdev); 
 8003a6a:	4798      	blx	r3
 8003a6c:	e7ed      	b.n	8003a4a <USBD_LL_DataOutStage+0x46>
 8003a6e:	bf00      	nop

08003a70 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003a74:	b951      	cbnz	r1, 8003a8c <USBD_LL_DataInStage+0x1c>
 8003a76:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003a78:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003a7c:	2a02      	cmp	r2, #2
 8003a7e:	d015      	beq.n	8003aac <USBD_LL_DataInStage+0x3c>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8003a80:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d00c      	beq.n	8003aa2 <USBD_LL_DataInStage+0x32>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003a88:	2000      	movs	r0, #0
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL)&& 
 8003a8c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f8      	beq.n	8003a88 <USBD_LL_DataInStage+0x18>
 8003a96:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003a9a:	2a03      	cmp	r2, #3
 8003a9c:	d1f4      	bne.n	8003a88 <USBD_LL_DataInStage+0x18>
    pdev->pClass->DataIn(pdev, epnum); 
 8003a9e:	4798      	blx	r3
 8003aa0:	e7f2      	b.n	8003a88 <USBD_LL_DataInStage+0x18>
      pdev->dev_test_mode = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 8003aac:	69c6      	ldr	r6, [r0, #28]
 8003aae:	6a02      	ldr	r2, [r0, #32]
 8003ab0:	4296      	cmp	r6, r2
 8003ab2:	d823      	bhi.n	8003afc <USBD_LL_DataInStage+0x8c>
        if((pep->total_length % pep->maxpacket == 0) &&
 8003ab4:	6983      	ldr	r3, [r0, #24]
 8003ab6:	fbb3 f5f2 	udiv	r5, r3, r2
 8003aba:	fb02 3515 	mls	r5, r2, r5, r3
 8003abe:	b98d      	cbnz	r5, 8003ae4 <USBD_LL_DataInStage+0x74>
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d80f      	bhi.n	8003ae4 <USBD_LL_DataInStage+0x74>
           (pep->total_length >= pep->maxpacket) &&
 8003ac4:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d20b      	bcs.n	8003ae4 <USBD_LL_DataInStage+0x74>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003acc:	462a      	mov	r2, r5
 8003ace:	f000 fa95 	bl	8003ffc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003ad2:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8003ad6:	462b      	mov	r3, r5
 8003ad8:	462a      	mov	r2, r5
 8003ada:	4629      	mov	r1, r5
 8003adc:	4620      	mov	r0, r4
 8003ade:	f002 fb13 	bl	8006108 <USBD_LL_PrepareReceive>
 8003ae2:	e7cd      	b.n	8003a80 <USBD_LL_DataInStage+0x10>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003ae4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	b11b      	cbz	r3, 8003af4 <USBD_LL_DataInStage+0x84>
 8003aec:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8003af0:	2a03      	cmp	r2, #3
 8003af2:	d00b      	beq.n	8003b0c <USBD_LL_DataInStage+0x9c>
          USBD_CtlReceiveStatus(pdev);
 8003af4:	4620      	mov	r0, r4
 8003af6:	f000 faad 	bl	8004054 <USBD_CtlReceiveStatus>
 8003afa:	e7c1      	b.n	8003a80 <USBD_LL_DataInStage+0x10>
        pep->rem_length -=  pep->maxpacket;
 8003afc:	1ab2      	subs	r2, r6, r2
 8003afe:	460d      	mov	r5, r1
 8003b00:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8003b02:	4619      	mov	r1, r3
 8003b04:	b292      	uxth	r2, r2
 8003b06:	f000 fa79 	bl	8003ffc <USBD_CtlContinueSendData>
 8003b0a:	e7e4      	b.n	8003ad6 <USBD_LL_DataInStage+0x66>
            pdev->pClass->EP0_TxSent(pdev); 
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	4798      	blx	r3
 8003b10:	e7f0      	b.n	8003af4 <USBD_LL_DataInStage+0x84>
 8003b12:	bf00      	nop

08003b14 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003b14:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003b16:	2200      	movs	r2, #0
{
 8003b18:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8003b1a:	2340      	movs	r3, #64	; 0x40
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003b1c:	461d      	mov	r5, r3
  USBD_LL_OpenEP(pdev,
 8003b1e:	4611      	mov	r1, r2
 8003b20:	f002 fa88 	bl	8006034 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003b24:	462b      	mov	r3, r5
 8003b26:	2200      	movs	r2, #0
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003b28:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	2180      	movs	r1, #128	; 0x80
 8003b30:	f002 fa80 	bl	8006034 <USBD_LL_OpenEP>
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8003b34:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003b38:	6225      	str	r5, [r4, #32]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f884 21fc 	strb.w	r2, [r4, #508]	; 0x1fc
  if (pdev->pClassData) 
 8003b40:	b12b      	cbz	r3, 8003b4e <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003b42:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003b46:	7921      	ldrb	r1, [r4, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8003b4e:	2000      	movs	r0, #0
 8003b50:	bd38      	pop	{r3, r4, r5, pc}
 8003b52:	bf00      	nop

08003b54 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003b54:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8003b56:	2000      	movs	r0, #0
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop

08003b5c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003b5c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003b60:	f880 21fd 	strb.w	r2, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003b64:	2304      	movs	r3, #4
 8003b66:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop

08003b70 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8003b70:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;  
  return USBD_OK;
}
 8003b72:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;  
 8003b74:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8003b78:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
}
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop

08003b80 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003b80:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003b84:	2a03      	cmp	r2, #3
 8003b86:	d001      	beq.n	8003b8c <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8003b88:	2000      	movs	r0, #0
 8003b8a:	4770      	bx	lr
{
 8003b8c:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 8003b8e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	b103      	cbz	r3, 8003b98 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8003b96:	4798      	blx	r3
}
 8003b98:	2000      	movs	r0, #0
 8003b9a:	bd08      	pop	{r3, pc}

08003b9c <USBD_LL_IsoINIncomplete>:
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	4770      	bx	lr

08003ba0 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	4770      	bx	lr

08003ba4 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	4770      	bx	lr

08003ba8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8003ba8:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003baa:	2101      	movs	r1, #1
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003bac:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003bb0:	f880 11fc 	strb.w	r1, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003bb4:	6852      	ldr	r2, [r2, #4]
 8003bb6:	7901      	ldrb	r1, [r0, #4]
 8003bb8:	4790      	blx	r2
   
  return USBD_OK;
}
 8003bba:	2000      	movs	r0, #0
 8003bbc:	bd08      	pop	{r3, pc}
 8003bbe:	bf00      	nop

08003bc0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003bc0:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8003bc2:	784b      	ldrb	r3, [r1, #1]
{
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	460d      	mov	r5, r1
 8003bc8:	4604      	mov	r4, r0
  switch (req->bRequest) 
 8003bca:	2b09      	cmp	r3, #9
 8003bcc:	d80b      	bhi.n	8003be6 <USBD_StdDevReq+0x26>
 8003bce:	e8df f003 	tbb	[pc, r3]
 8003bd2:	4935      	.short	0x4935
 8003bd4:	050a590a 	.word	0x050a590a
 8003bd8:	157d0a66 	.word	0x157d0a66
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8003bdc:	888b      	ldrh	r3, [r1, #4]
 8003bde:	b913      	cbnz	r3, 8003be6 <USBD_StdDevReq+0x26>
 8003be0:	88cb      	ldrh	r3, [r1, #6]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d07f      	beq.n	8003ce6 <USBD_StdDevReq+0x126>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8003be6:	2180      	movs	r1, #128	; 0x80
 8003be8:	4620      	mov	r0, r4
 8003bea:	f002 fa41 	bl	8006070 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003bee:	4620      	mov	r0, r4
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	f002 fa3d 	bl	8006070 <USBD_LL_StallEP>
}
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	b003      	add	sp, #12
 8003bfa:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);                 
 8003bfc:	7889      	ldrb	r1, [r1, #2]
 8003bfe:	4d97      	ldr	r5, [pc, #604]	; (8003e5c <USBD_StdDevReq+0x29c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003c00:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8003c02:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003c04:	d8ef      	bhi.n	8003be6 <USBD_StdDevReq+0x26>
    switch (pdev->dev_state) 
 8003c06:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	f000 8089 	beq.w	8003d22 <USBD_StdDevReq+0x162>
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d1e8      	bne.n	8003be6 <USBD_StdDevReq+0x26>
      if (cfgidx == 0) 
 8003c14:	2900      	cmp	r1, #0
 8003c16:	f000 8116 	beq.w	8003e46 <USBD_StdDevReq+0x286>
      else  if (cfgidx != pdev->dev_config) 
 8003c1a:	6841      	ldr	r1, [r0, #4]
 8003c1c:	2901      	cmp	r1, #1
 8003c1e:	d009      	beq.n	8003c34 <USBD_StdDevReq+0x74>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8003c20:	b2c9      	uxtb	r1, r1
 8003c22:	f7ff feb7 	bl	8003994 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003c26:	7829      	ldrb	r1, [r5, #0]
 8003c28:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f7ff fea8 	bl	8003980 <USBD_SetClassConfig>
 8003c30:	2802      	cmp	r0, #2
 8003c32:	d0d8      	beq.n	8003be6 <USBD_StdDevReq+0x26>
      USBD_CtlSendStatus(pdev);
 8003c34:	4620      	mov	r0, r4
 8003c36:	f000 fa01 	bl	800403c <USBD_CtlSendStatus>
 8003c3a:	e7dc      	b.n	8003bf6 <USBD_StdDevReq+0x36>
  switch (pdev->dev_state) 
 8003c3c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003c40:	2201      	movs	r2, #1
 8003c42:	3b02      	subs	r3, #2
 8003c44:	4293      	cmp	r3, r2
 8003c46:	f04f 0103 	mov.w	r1, #3
 8003c4a:	d8cc      	bhi.n	8003be6 <USBD_StdDevReq+0x26>
    if (pdev->dev_remote_wakeup) 
 8003c4c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8003c50:	60c2      	str	r2, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8003c52:	b103      	cbz	r3, 8003c56 <USBD_StdDevReq+0x96>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003c54:	60c1      	str	r1, [r0, #12]
    USBD_CtlSendData (pdev, 
 8003c56:	2202      	movs	r2, #2
 8003c58:	f104 010c 	add.w	r1, r4, #12
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f000 f9bf 	bl	8003fe0 <USBD_CtlSendData>
 8003c62:	e7c8      	b.n	8003bf6 <USBD_StdDevReq+0x36>
  switch (pdev->dev_state)
 8003c64:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003c68:	3b02      	subs	r3, #2
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d8bb      	bhi.n	8003be6 <USBD_StdDevReq+0x26>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003c6e:	884b      	ldrh	r3, [r1, #2]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d1c0      	bne.n	8003bf6 <USBD_StdDevReq+0x36>
      pdev->pClass->Setup (pdev, req);   
 8003c74:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
      pdev->dev_remote_wakeup = 0; 
 8003c78:	2200      	movs	r2, #0
      pdev->pClass->Setup (pdev, req);   
 8003c7a:	689b      	ldr	r3, [r3, #8]
      pdev->dev_remote_wakeup = 0; 
 8003c7c:	f8c0 2204 	str.w	r2, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003c80:	4798      	blx	r3
 8003c82:	e7d7      	b.n	8003c34 <USBD_StdDevReq+0x74>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003c84:	884b      	ldrh	r3, [r1, #2]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d1b5      	bne.n	8003bf6 <USBD_StdDevReq+0x36>
    pdev->pClass->Setup (pdev, req);   
 8003c8a:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
    pdev->dev_remote_wakeup = 1;  
 8003c8e:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8003c92:	6893      	ldr	r3, [r2, #8]
 8003c94:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8003c96:	4620      	mov	r0, r4
 8003c98:	f000 f9d0 	bl	800403c <USBD_CtlSendStatus>
 8003c9c:	e7ab      	b.n	8003bf6 <USBD_StdDevReq+0x36>
 8003c9e:	884a      	ldrh	r2, [r1, #2]
  switch (req->wValue >> 8)
 8003ca0:	0a13      	lsrs	r3, r2, #8
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	2b06      	cmp	r3, #6
 8003ca6:	d89e      	bhi.n	8003be6 <USBD_StdDevReq+0x26>
 8003ca8:	a101      	add	r1, pc, #4	; (adr r1, 8003cb0 <USBD_StdDevReq+0xf0>)
 8003caa:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003d93 	.word	0x08003d93
 8003cb4:	08003db5 	.word	0x08003db5
 8003cb8:	08003da3 	.word	0x08003da3
 8003cbc:	08003be7 	.word	0x08003be7
 8003cc0:	08003be7 	.word	0x08003be7
 8003cc4:	08003d7d 	.word	0x08003d7d
 8003cc8:	08003d3d 	.word	0x08003d3d
  if (req->wLength != 1) 
 8003ccc:	88ca      	ldrh	r2, [r1, #6]
 8003cce:	2a01      	cmp	r2, #1
 8003cd0:	d189      	bne.n	8003be6 <USBD_StdDevReq+0x26>
    switch (pdev->dev_state )  
 8003cd2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d01c      	beq.n	8003d14 <USBD_StdDevReq+0x154>
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d183      	bne.n	8003be6 <USBD_StdDevReq+0x26>
      USBD_CtlSendData (pdev, 
 8003cde:	1d01      	adds	r1, r0, #4
 8003ce0:	f000 f97e 	bl	8003fe0 <USBD_CtlSendData>
 8003ce4:	e787      	b.n	8003bf6 <USBD_StdDevReq+0x36>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003ce6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003cea:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003cec:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003cee:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003cf2:	f43f af78 	beq.w	8003be6 <USBD_StdDevReq+0x26>
      pdev->dev_address = dev_addr;
 8003cf6:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	f002 f9e8 	bl	80060d0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003d00:	4620      	mov	r0, r4
 8003d02:	f000 f99b 	bl	800403c <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8003d06:	2d00      	cmp	r5, #0
 8003d08:	f000 8090 	beq.w	8003e2c <USBD_StdDevReq+0x26c>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8003d12:	e770      	b.n	8003bf6 <USBD_StdDevReq+0x36>
      pdev->dev_default_config = 0;
 8003d14:	4601      	mov	r1, r0
 8003d16:	2300      	movs	r3, #0
 8003d18:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8003d1c:	f000 f960 	bl	8003fe0 <USBD_CtlSendData>
 8003d20:	e769      	b.n	8003bf6 <USBD_StdDevReq+0x36>
      if (cfgidx) 
 8003d22:	2900      	cmp	r1, #0
 8003d24:	d086      	beq.n	8003c34 <USBD_StdDevReq+0x74>
        pdev->dev_config = cfgidx;
 8003d26:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003d28:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8003d2a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003d2c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003d30:	f7ff fe26 	bl	8003980 <USBD_SetClassConfig>
 8003d34:	2802      	cmp	r0, #2
 8003d36:	f47f af7d 	bne.w	8003c34 <USBD_StdDevReq+0x74>
 8003d3a:	e754      	b.n	8003be6 <USBD_StdDevReq+0x26>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003d3c:	7c03      	ldrb	r3, [r0, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f47f af51 	bne.w	8003be6 <USBD_StdDevReq+0x26>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003d44:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003d48:	f10d 0006 	add.w	r0, sp, #6
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003d50:	2307      	movs	r3, #7
 8003d52:	7043      	strb	r3, [r0, #1]
  if((len != 0)&& (req->wLength != 0))
 8003d54:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f43f af4c 	beq.w	8003bf6 <USBD_StdDevReq+0x36>
 8003d5e:	88ea      	ldrh	r2, [r5, #6]
 8003d60:	2a00      	cmp	r2, #0
 8003d62:	f43f af48 	beq.w	8003bf6 <USBD_StdDevReq+0x36>
    len = MIN(len , req->wLength);
 8003d66:	4293      	cmp	r3, r2
 8003d68:	bf28      	it	cs
 8003d6a:	4613      	movcs	r3, r2
    USBD_CtlSendData (pdev, 
 8003d6c:	4601      	mov	r1, r0
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4620      	mov	r0, r4
    len = MIN(len , req->wLength);
 8003d72:	f8ad 3006 	strh.w	r3, [sp, #6]
    USBD_CtlSendData (pdev, 
 8003d76:	f000 f933 	bl	8003fe0 <USBD_CtlSendData>
 8003d7a:	e73c      	b.n	8003bf6 <USBD_StdDevReq+0x36>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003d7c:	7c03      	ldrb	r3, [r0, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f47f af31 	bne.w	8003be6 <USBD_StdDevReq+0x26>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003d84:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003d88:	f10d 0006 	add.w	r0, sp, #6
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8e:	4798      	blx	r3
 8003d90:	e7e0      	b.n	8003d54 <USBD_StdDevReq+0x194>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003d92:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003d96:	7c00      	ldrb	r0, [r0, #16]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f10d 0106 	add.w	r1, sp, #6
 8003d9e:	4798      	blx	r3
 8003da0:	e7d8      	b.n	8003d54 <USBD_StdDevReq+0x194>
    switch ((uint8_t)(req->wValue))
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	2a05      	cmp	r2, #5
 8003da6:	f63f af1e 	bhi.w	8003be6 <USBD_StdDevReq+0x26>
 8003daa:	e8df f002 	tbb	[pc, r2]
 8003dae:	1f27      	.short	0x1f27
 8003db0:	2f370f17 	.word	0x2f370f17
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8003db4:	7c03      	ldrb	r3, [r0, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d13c      	bne.n	8003e34 <USBD_StdDevReq+0x274>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003dba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003dbe:	f10d 0006 	add.w	r0, sp, #6
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	7043      	strb	r3, [r0, #1]
 8003dca:	e7c3      	b.n	8003d54 <USBD_StdDevReq+0x194>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003dcc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003dd0:	7c00      	ldrb	r0, [r0, #16]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f10d 0106 	add.w	r1, sp, #6
 8003dd8:	4798      	blx	r3
 8003dda:	e7bb      	b.n	8003d54 <USBD_StdDevReq+0x194>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003ddc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003de0:	7c00      	ldrb	r0, [r0, #16]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f10d 0106 	add.w	r1, sp, #6
 8003de8:	4798      	blx	r3
 8003dea:	e7b3      	b.n	8003d54 <USBD_StdDevReq+0x194>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003dec:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003df0:	7c00      	ldrb	r0, [r0, #16]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f10d 0106 	add.w	r1, sp, #6
 8003df8:	4798      	blx	r3
 8003dfa:	e7ab      	b.n	8003d54 <USBD_StdDevReq+0x194>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003dfc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003e00:	7c00      	ldrb	r0, [r0, #16]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f10d 0106 	add.w	r1, sp, #6
 8003e08:	4798      	blx	r3
 8003e0a:	e7a3      	b.n	8003d54 <USBD_StdDevReq+0x194>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003e0c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003e10:	7c00      	ldrb	r0, [r0, #16]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f10d 0106 	add.w	r1, sp, #6
 8003e18:	4798      	blx	r3
 8003e1a:	e79b      	b.n	8003d54 <USBD_StdDevReq+0x194>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003e1c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003e20:	7c00      	ldrb	r0, [r0, #16]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	f10d 0106 	add.w	r1, sp, #6
 8003e28:	4798      	blx	r3
 8003e2a:	e793      	b.n	8003d54 <USBD_StdDevReq+0x194>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8003e32:	e6e0      	b.n	8003bf6 <USBD_StdDevReq+0x36>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003e34:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003e38:	f10d 0006 	add.w	r0, sp, #6
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003e40:	2302      	movs	r3, #2
 8003e42:	7043      	strb	r3, [r0, #1]
 8003e44:	e786      	b.n	8003d54 <USBD_StdDevReq+0x194>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003e46:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 8003e48:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003e4a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 8003e4e:	f7ff fda1 	bl	8003994 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8003e52:	4620      	mov	r0, r4
 8003e54:	f000 f8f2 	bl	800403c <USBD_CtlSendStatus>
 8003e58:	e6cd      	b.n	8003bf6 <USBD_StdDevReq+0x36>
 8003e5a:	bf00      	nop
 8003e5c:	20000349 	.word	0x20000349

08003e60 <USBD_StdItfReq>:
{
 8003e60:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8003e62:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003e66:	2b03      	cmp	r3, #3
{
 8003e68:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8003e6a:	d103      	bne.n	8003e74 <USBD_StdItfReq+0x14>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003e6c:	790b      	ldrb	r3, [r1, #4]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	460d      	mov	r5, r1
 8003e72:	d908      	bls.n	8003e86 <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev , 0x80);
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	f002 f8fb 	bl	8006070 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	f002 f8f7 	bl	8006070 <USBD_LL_StallEP>
}
 8003e82:	2000      	movs	r0, #0
 8003e84:	bd38      	pop	{r3, r4, r5, pc}
      pdev->pClass->Setup (pdev, req); 
 8003e86:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003e8e:	88eb      	ldrh	r3, [r5, #6]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f6      	bne.n	8003e82 <USBD_StdItfReq+0x22>
         USBD_CtlSendStatus(pdev);
 8003e94:	4620      	mov	r0, r4
 8003e96:	f000 f8d1 	bl	800403c <USBD_CtlSendStatus>
 8003e9a:	e7f2      	b.n	8003e82 <USBD_StdItfReq+0x22>

08003e9c <USBD_StdEPReq>:
{
 8003e9c:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8003e9e:	780b      	ldrb	r3, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8003ea0:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8003ea2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003ea6:	2b20      	cmp	r3, #32
{
 8003ea8:	4605      	mov	r5, r0
  if ((req->bmRequest & 0x60) == 0x20)
 8003eaa:	d057      	beq.n	8003f5c <USBD_StdEPReq+0xc0>
  switch (req->bRequest) 
 8003eac:	784b      	ldrb	r3, [r1, #1]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	460c      	mov	r4, r1
 8003eb2:	b2d6      	uxtb	r6, r2
 8003eb4:	d034      	beq.n	8003f20 <USBD_StdEPReq+0x84>
 8003eb6:	d319      	bcc.n	8003eec <USBD_StdEPReq+0x50>
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d115      	bne.n	8003ee8 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8003ebc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d031      	beq.n	8003f28 <USBD_StdEPReq+0x8c>
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d140      	bne.n	8003f4a <USBD_StdEPReq+0xae>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003ec8:	884b      	ldrh	r3, [r1, #2]
 8003eca:	b923      	cbnz	r3, 8003ed6 <USBD_StdEPReq+0x3a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003ecc:	0673      	lsls	r3, r6, #25
 8003ece:	d002      	beq.n	8003ed6 <USBD_StdEPReq+0x3a>
          USBD_LL_StallEP(pdev , ep_addr);
 8003ed0:	4631      	mov	r1, r6
 8003ed2:	f002 f8cd 	bl	8006070 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8003ed6:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8003eda:	4621      	mov	r1, r4
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	4628      	mov	r0, r5
 8003ee0:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	f000 f8aa 	bl	800403c <USBD_CtlSendStatus>
}
 8003ee8:	2000      	movs	r0, #0
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state) 
 8003eec:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d019      	beq.n	8003f28 <USBD_StdEPReq+0x8c>
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d128      	bne.n	8003f4a <USBD_StdEPReq+0xae>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003ef8:	f006 047f 	and.w	r4, r6, #127	; 0x7f
 8003efc:	0613      	lsls	r3, r2, #24
 8003efe:	eb00 1404 	add.w	r4, r0, r4, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003f02:	4631      	mov	r1, r6
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003f04:	bf4c      	ite	mi
 8003f06:	3414      	addmi	r4, #20
 8003f08:	f504 7482 	addpl.w	r4, r4, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003f0c:	f002 f8cc 	bl	80060a8 <USBD_LL_IsStallEP>
 8003f10:	bb48      	cbnz	r0, 8003f66 <USBD_StdEPReq+0xca>
        pep->status = 0x0000;  
 8003f12:	6020      	str	r0, [r4, #0]
      USBD_CtlSendData (pdev,
 8003f14:	4621      	mov	r1, r4
 8003f16:	4628      	mov	r0, r5
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f000 f861 	bl	8003fe0 <USBD_CtlSendData>
      break;
 8003f1e:	e7e3      	b.n	8003ee8 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8003f20:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d105      	bne.n	8003f34 <USBD_StdEPReq+0x98>
      if ((ep_addr & 0x7F) != 0x00) 
 8003f28:	0672      	lsls	r2, r6, #25
 8003f2a:	d0dd      	beq.n	8003ee8 <USBD_StdEPReq+0x4c>
        USBD_LL_StallEP(pdev , ep_addr);
 8003f2c:	4631      	mov	r1, r6
 8003f2e:	f002 f89f 	bl	8006070 <USBD_LL_StallEP>
 8003f32:	e7d9      	b.n	8003ee8 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d108      	bne.n	8003f4a <USBD_StdEPReq+0xae>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003f38:	884b      	ldrh	r3, [r1, #2]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1d4      	bne.n	8003ee8 <USBD_StdEPReq+0x4c>
        if ((ep_addr & 0x7F) != 0x00) 
 8003f3e:	0671      	lsls	r1, r6, #25
 8003f40:	d0cf      	beq.n	8003ee2 <USBD_StdEPReq+0x46>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8003f42:	4631      	mov	r1, r6
 8003f44:	f002 f8a2 	bl	800608c <USBD_LL_ClearStallEP>
 8003f48:	e7c5      	b.n	8003ed6 <USBD_StdEPReq+0x3a>
  USBD_LL_StallEP(pdev , 0x80);
 8003f4a:	2180      	movs	r1, #128	; 0x80
 8003f4c:	f002 f890 	bl	8006070 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003f50:	4628      	mov	r0, r5
 8003f52:	2100      	movs	r1, #0
 8003f54:	f002 f88c 	bl	8006070 <USBD_LL_StallEP>
}
 8003f58:	2000      	movs	r0, #0
 8003f5a:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClass->Setup (pdev, req);
 8003f5c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	4798      	blx	r3
    return USBD_OK;
 8003f64:	e7c0      	b.n	8003ee8 <USBD_StdEPReq+0x4c>
        pep->status = 0x0001;     
 8003f66:	2301      	movs	r3, #1
 8003f68:	6023      	str	r3, [r4, #0]
 8003f6a:	e7d3      	b.n	8003f14 <USBD_StdEPReq+0x78>

08003f6c <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003f6c:	780b      	ldrb	r3, [r1, #0]
 8003f6e:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003f70:	784b      	ldrb	r3, [r1, #1]
 8003f72:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003f74:	78ca      	ldrb	r2, [r1, #3]
 8003f76:	788b      	ldrb	r3, [r1, #2]
 8003f78:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003f7c:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003f7e:	794a      	ldrb	r2, [r1, #5]
 8003f80:	790b      	ldrb	r3, [r1, #4]
 8003f82:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003f86:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003f88:	79ca      	ldrb	r2, [r1, #7]
 8003f8a:	798b      	ldrb	r3, [r1, #6]
 8003f8c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003f90:	80c3      	strh	r3, [r0, #6]
 8003f92:	4770      	bx	lr

08003f94 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8003f94:	b300      	cbz	r0, 8003fd8 <USBD_GetString+0x44>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8003f96:	7803      	ldrb	r3, [r0, #0]
{
 8003f98:	b430      	push	{r4, r5}
    while (*buf != '\0') 
 8003f9a:	b1f3      	cbz	r3, 8003fda <USBD_GetString+0x46>
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    {
        len++;
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	b2db      	uxtb	r3, r3
    while (*buf != '\0') 
 8003fa8:	2d00      	cmp	r5, #0
 8003faa:	d1f9      	bne.n	8003fa0 <USBD_GetString+0xc>
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	3302      	adds	r3, #2
 8003fb0:	b2dc      	uxtb	r4, r3
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003fb2:	2503      	movs	r5, #3
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003fb4:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8003fb6:	700c      	strb	r4, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003fb8:	704d      	strb	r5, [r1, #1]
    while (*desc != '\0') 
 8003fba:	7804      	ldrb	r4, [r0, #0]
 8003fbc:	b15c      	cbz	r4, 8003fd6 <USBD_GetString+0x42>
 8003fbe:	2302      	movs	r3, #2
      unicode[idx++] =  0x00;
 8003fc0:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0x00;
 8003fc8:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0') 
 8003fca:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0x00;
 8003fce:	3302      	adds	r3, #2
 8003fd0:	b2db      	uxtb	r3, r3
    while (*desc != '\0') 
 8003fd2:	2c00      	cmp	r4, #0
 8003fd4:	d1f5      	bne.n	8003fc2 <USBD_GetString+0x2e>
}
 8003fd6:	bc30      	pop	{r4, r5}
 8003fd8:	4770      	bx	lr
    while (*buf != '\0') 
 8003fda:	2402      	movs	r4, #2
 8003fdc:	4623      	mov	r3, r4
 8003fde:	e7e8      	b.n	8003fb2 <USBD_GetString+0x1e>

08003fe0 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003fe4:	2502      	movs	r5, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003fe6:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
 8003fe8:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8003fea:	61c3      	str	r3, [r0, #28]
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003fec:	f8c0 51f4 	str.w	r5, [r0, #500]	; 0x1f4
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	f002 f87b 	bl	80060ec <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	bd38      	pop	{r3, r4, r5, pc}
 8003ffa:	bf00      	nop

08003ffc <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003ffc:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8003ffe:	4613      	mov	r3, r2
 8004000:	460a      	mov	r2, r1
 8004002:	2100      	movs	r1, #0
 8004004:	f002 f872 	bl	80060ec <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004008:	2000      	movs	r0, #0
 800400a:	bd08      	pop	{r3, pc}

0800400c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8004010:	2503      	movs	r5, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8004012:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 8004014:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8004018:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800401c:	f8c0 51f4 	str.w	r5, [r0, #500]	; 0x1f4
  USBD_LL_PrepareReceive (pdev,
 8004020:	2100      	movs	r1, #0
 8004022:	f002 f871 	bl	8006108 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8004026:	2000      	movs	r0, #0
 8004028:	bd38      	pop	{r3, r4, r5, pc}
 800402a:	bf00      	nop

0800402c <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800402c:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800402e:	4613      	mov	r3, r2
 8004030:	460a      	mov	r2, r1
 8004032:	2100      	movs	r1, #0
 8004034:	f002 f868 	bl	8006108 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8004038:	2000      	movs	r0, #0
 800403a:	bd08      	pop	{r3, pc}

0800403c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800403c:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800403e:	2204      	movs	r2, #4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004040:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004042:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004046:	4619      	mov	r1, r3
 8004048:	461a      	mov	r2, r3
 800404a:	f002 f84f 	bl	80060ec <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800404e:	2000      	movs	r0, #0
 8004050:	bd08      	pop	{r3, pc}
 8004052:	bf00      	nop

08004054 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8004054:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8004056:	2205      	movs	r2, #5
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004058:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800405a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  USBD_LL_PrepareReceive ( pdev,
 800405e:	4619      	mov	r1, r3
 8004060:	461a      	mov	r2, r3
 8004062:	f002 f851 	bl	8006108 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8004066:	2000      	movs	r0, #0
 8004068:	bd08      	pop	{r3, pc}
 800406a:	bf00      	nop

0800406c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800406c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800406e:	f000 fc1b 	bl	80048a8 <vTaskStartScheduler>
  
  return osOK;
}
 8004072:	2000      	movs	r0, #0
 8004074:	bd08      	pop	{r3, pc}
 8004076:	bf00      	nop

08004078 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004078:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800407a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800407e:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8004080:	2c84      	cmp	r4, #132	; 0x84
{
 8004082:	4602      	mov	r2, r0
    fpriority += (priority - osPriorityIdle);
 8004084:	bf14      	ite	ne
 8004086:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004088:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800408a:	ad03      	add	r5, sp, #12
{
 800408c:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800408e:	6840      	ldr	r0, [r0, #4]
 8004090:	6811      	ldr	r1, [r2, #0]
 8004092:	8a12      	ldrh	r2, [r2, #16]
 8004094:	e88d 0030 	stmia.w	sp, {r4, r5}
 8004098:	f000 fb18 	bl	80046cc <xTaskCreate>
 800409c:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800409e:	bf0c      	ite	eq
 80040a0:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80040a2:	2000      	movne	r0, #0
}
 80040a4:	b005      	add	sp, #20
 80040a6:	bd30      	pop	{r4, r5, pc}

080040a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80040a8:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80040aa:	2800      	cmp	r0, #0
 80040ac:	bf08      	it	eq
 80040ae:	2001      	moveq	r0, #1
 80040b0:	f000 fd6e 	bl	8004b90 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80040b4:	2000      	movs	r0, #0
 80040b6:	bd08      	pop	{r3, pc}

080040b8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80040b8:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80040ba:	f000 fe0f 	bl	8004cdc <xTaskGetSchedulerState>
 80040be:	2801      	cmp	r0, #1
 80040c0:	d003      	beq.n	80040ca <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80040c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80040c6:	f000 b915 	b.w	80042f4 <xPortSysTickHandler>
 80040ca:	bd08      	pop	{r3, pc}

080040cc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040cc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040d0:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040d4:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040d6:	6081      	str	r1, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040d8:	e880 000c 	stmia.w	r0, {r2, r3}
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040dc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040de:	6103      	str	r3, [r0, #16]
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop

080040e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	6103      	str	r3, [r0, #16]
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop

080040ec <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80040ec:	e890 000c 	ldmia.w	r0, {r2, r3}
{
 80040f0:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040f2:	689c      	ldr	r4, [r3, #8]
 80040f4:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040f6:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80040f8:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80040fa:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040fc:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040fe:	6099      	str	r1, [r3, #8]
}
 8004100:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004104:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004106:	6002      	str	r2, [r0, #0]
}
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop

0800410c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800410c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800410e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004110:	1c6b      	adds	r3, r5, #1
 8004112:	d011      	beq.n	8004138 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004114:	f100 0208 	add.w	r2, r0, #8
 8004118:	e000      	b.n	800411c <vListInsert+0x10>
 800411a:	461a      	mov	r2, r3
 800411c:	6853      	ldr	r3, [r2, #4]
 800411e:	681c      	ldr	r4, [r3, #0]
 8004120:	42a5      	cmp	r5, r4
 8004122:	d2fa      	bcs.n	800411a <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004124:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8004126:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8004128:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800412a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800412c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800412e:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004130:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004132:	6004      	str	r4, [r0, #0]
}
 8004134:	bc30      	pop	{r4, r5}
 8004136:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8004138:	6902      	ldr	r2, [r0, #16]
 800413a:	6853      	ldr	r3, [r2, #4]
 800413c:	e7f2      	b.n	8004124 <vListInsert+0x18>
 800413e:	bf00      	nop

08004140 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004140:	6843      	ldr	r3, [r0, #4]
 8004142:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004144:	6902      	ldr	r2, [r0, #16]
{
 8004146:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004148:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800414a:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800414c:	6854      	ldr	r4, [r2, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800414e:	604b      	str	r3, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8004150:	6813      	ldr	r3, [r2, #0]
	if( pxList->pxIndex == pxItemToRemove )
 8004152:	42a0      	cmp	r0, r4
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004154:	bf08      	it	eq
 8004156:	6051      	streq	r1, [r2, #4]
	( pxList->uxNumberOfItems )--;
 8004158:	3b01      	subs	r3, #1
	pxItemToRemove->pvContainer = NULL;
 800415a:	2100      	movs	r1, #0
 800415c:	6101      	str	r1, [r0, #16]

	return pxList->uxNumberOfItems;
}
 800415e:	f85d 4b04 	ldr.w	r4, [sp], #4
	( pxList->uxNumberOfItems )--;
 8004162:	6013      	str	r3, [r2, #0]
}
 8004164:	4618      	mov	r0, r3
 8004166:	4770      	bx	lr

08004168 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <prvTaskExitError+0x2c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	d008      	beq.n	8004182 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	e7fe      	b.n	8004180 <prvTaskExitError+0x18>
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	e7fe      	b.n	8004192 <prvTaskExitError+0x2a>
 8004194:	20000110 	.word	0x20000110

08004198 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004198:	4806      	ldr	r0, [pc, #24]	; (80041b4 <prvPortStartFirstTask+0x1c>)
 800419a:	6800      	ldr	r0, [r0, #0]
 800419c:	6800      	ldr	r0, [r0, #0]
 800419e:	f380 8808 	msr	MSP, r0
 80041a2:	b662      	cpsie	i
 80041a4:	b661      	cpsie	f
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	df00      	svc	0
 80041b0:	bf00      	nop
 80041b2:	0000      	.short	0x0000
 80041b4:	e000ed08 	.word	0xe000ed08

080041b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80041b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80041c8 <vPortEnableVFP+0x10>
 80041bc:	6801      	ldr	r1, [r0, #0]
 80041be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041c2:	6001      	str	r1, [r0, #0]
 80041c4:	4770      	bx	lr
 80041c6:	0000      	.short	0x0000
 80041c8:	e000ed88 	.word	0xe000ed88

080041cc <pxPortInitialiseStack>:
{
 80041cc:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041ce:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041d2:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041d6:	4c07      	ldr	r4, [pc, #28]	; (80041f4 <pxPortInitialiseStack+0x28>)
 80041d8:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80041dc:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041e0:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041e4:	e900 0022 	stmdb	r0, {r1, r5}
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80041e8:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80041ec:	bc30      	pop	{r4, r5}
 80041ee:	3844      	subs	r0, #68	; 0x44
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	08004169 	.word	0x08004169
	...

08004200 <SVC_Handler>:
	__asm volatile (
 8004200:	4b07      	ldr	r3, [pc, #28]	; (8004220 <pxCurrentTCBConst2>)
 8004202:	6819      	ldr	r1, [r3, #0]
 8004204:	6808      	ldr	r0, [r1, #0]
 8004206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420a:	f380 8809 	msr	PSP, r0
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f04f 0000 	mov.w	r0, #0
 8004216:	f380 8811 	msr	BASEPRI, r0
 800421a:	4770      	bx	lr
 800421c:	f3af 8000 	nop.w

08004220 <pxCurrentTCBConst2>:
 8004220:	20003f68 	.word	0x20003f68

08004224 <vPortEnterCritical>:
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8004234:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <vPortEnterCritical+0x3c>)
 8004236:	6813      	ldr	r3, [r2, #0]
 8004238:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800423a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800423c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800423e:	d000      	beq.n	8004242 <vPortEnterCritical+0x1e>
 8004240:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004242:	4b08      	ldr	r3, [pc, #32]	; (8004264 <vPortEnterCritical+0x40>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f013 0fff 	tst.w	r3, #255	; 0xff
 800424a:	d0f9      	beq.n	8004240 <vPortEnterCritical+0x1c>
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	e7fe      	b.n	800425c <vPortEnterCritical+0x38>
 800425e:	bf00      	nop
 8004260:	20000110 	.word	0x20000110
 8004264:	e000ed04 	.word	0xe000ed04

08004268 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004268:	4a08      	ldr	r2, [pc, #32]	; (800428c <vPortExitCritical+0x24>)
 800426a:	6813      	ldr	r3, [r2, #0]
 800426c:	b943      	cbnz	r3, 8004280 <vPortExitCritical+0x18>
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	e7fe      	b.n	800427e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004280:	3b01      	subs	r3, #1
 8004282:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004284:	b90b      	cbnz	r3, 800428a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	4770      	bx	lr
 800428c:	20000110 	.word	0x20000110

08004290 <PendSV_Handler>:
	__asm volatile
 8004290:	f3ef 8009 	mrs	r0, PSP
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <pxCurrentTCBConst>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	f01e 0f10 	tst.w	lr, #16
 80042a0:	bf08      	it	eq
 80042a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042aa:	6010      	str	r0, [r2, #0]
 80042ac:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80042b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042b4:	f380 8811 	msr	BASEPRI, r0
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f000 fcd4 	bl	8004c6c <vTaskSwitchContext>
 80042c4:	f04f 0000 	mov.w	r0, #0
 80042c8:	f380 8811 	msr	BASEPRI, r0
 80042cc:	bc08      	pop	{r3}
 80042ce:	6819      	ldr	r1, [r3, #0]
 80042d0:	6808      	ldr	r0, [r1, #0]
 80042d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d6:	f01e 0f10 	tst.w	lr, #16
 80042da:	bf08      	it	eq
 80042dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80042e0:	f380 8809 	msr	PSP, r0
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	f3af 8000 	nop.w

080042f0 <pxCurrentTCBConst>:
 80042f0:	20003f68 	.word	0x20003f68

080042f4 <xPortSysTickHandler>:
{
 80042f4:	b508      	push	{r3, lr}
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004306:	f000 fb13 	bl	8004930 <xTaskIncrementTick>
 800430a:	b118      	cbz	r0, 8004314 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800430c:	4b03      	ldr	r3, [pc, #12]	; (800431c <xPortSysTickHandler+0x28>)
 800430e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004312:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004314:	2300      	movs	r3, #0
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	bd08      	pop	{r3, pc}
 800431c:	e000ed04 	.word	0xe000ed04

08004320 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004320:	4b06      	ldr	r3, [pc, #24]	; (800433c <vPortSetupTimerInterrupt+0x1c>)
 8004322:	4907      	ldr	r1, [pc, #28]	; (8004340 <vPortSetupTimerInterrupt+0x20>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4807      	ldr	r0, [pc, #28]	; (8004344 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004328:	4a07      	ldr	r2, [pc, #28]	; (8004348 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800432a:	fba1 1303 	umull	r1, r3, r1, r3
 800432e:	099b      	lsrs	r3, r3, #6
 8004330:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004332:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004334:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004336:	6011      	str	r1, [r2, #0]
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000114 	.word	0x20000114
 8004340:	10624dd3 	.word	0x10624dd3
 8004344:	e000e014 	.word	0xe000e014
 8004348:	e000e010 	.word	0xe000e010

0800434c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800434c:	4b31      	ldr	r3, [pc, #196]	; (8004414 <xPortStartScheduler+0xc8>)
 800434e:	4a32      	ldr	r2, [pc, #200]	; (8004418 <xPortStartScheduler+0xcc>)
 8004350:	6819      	ldr	r1, [r3, #0]
 8004352:	4291      	cmp	r1, r2
 8004354:	d04c      	beq.n	80043f0 <xPortStartScheduler+0xa4>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4b30      	ldr	r3, [pc, #192]	; (800441c <xPortStartScheduler+0xd0>)
 800435a:	429a      	cmp	r2, r3
 800435c:	d051      	beq.n	8004402 <xPortStartScheduler+0xb6>
{
 800435e:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004360:	4b2f      	ldr	r3, [pc, #188]	; (8004420 <xPortStartScheduler+0xd4>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004362:	4c30      	ldr	r4, [pc, #192]	; (8004424 <xPortStartScheduler+0xd8>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004364:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004366:	4830      	ldr	r0, [pc, #192]	; (8004428 <xPortStartScheduler+0xdc>)
{
 8004368:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800436a:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800436c:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800436e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004370:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800437a:	f89d 2003 	ldrb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800437e:	f89d 1003 	ldrb.w	r1, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004382:	f002 0250 	and.w	r2, r2, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004386:	2307      	movs	r3, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004388:	0609      	lsls	r1, r1, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800438a:	7022      	strb	r2, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800438c:	6003      	str	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800438e:	d50e      	bpl.n	80043ae <xPortStartScheduler+0x62>
 8004390:	2306      	movs	r3, #6
 8004392:	e000      	b.n	8004396 <xPortStartScheduler+0x4a>
 8004394:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004396:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800439a:	0052      	lsls	r2, r2, #1
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80043a6:	0612      	lsls	r2, r2, #24
 80043a8:	f103 31ff 	add.w	r1, r3, #4294967295
 80043ac:	d4f2      	bmi.n	8004394 <xPortStartScheduler+0x48>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043ae:	9901      	ldr	r1, [sp, #4]
 80043b0:	4c1b      	ldr	r4, [pc, #108]	; (8004420 <xPortStartScheduler+0xd4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043b2:	4a1e      	ldr	r2, [pc, #120]	; (800442c <xPortStartScheduler+0xe0>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043b4:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043b6:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043bc:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043be:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043c0:	6813      	ldr	r3, [r2, #0]
 80043c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043c8:	6813      	ldr	r3, [r2, #0]
 80043ca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043ce:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 80043d0:	f7ff ffa6 	bl	8004320 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80043d4:	4b16      	ldr	r3, [pc, #88]	; (8004430 <xPortStartScheduler+0xe4>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80043da:	f7ff feed 	bl	80041b8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043de:	4a15      	ldr	r2, [pc, #84]	; (8004434 <xPortStartScheduler+0xe8>)
 80043e0:	6813      	ldr	r3, [r2, #0]
 80043e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043e6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80043e8:	f7ff fed6 	bl	8004198 <prvPortStartFirstTask>
	prvTaskExitError();
 80043ec:	f7ff febc 	bl	8004168 <prvTaskExitError>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	e7fe      	b.n	8004400 <xPortStartScheduler+0xb4>
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	e7fe      	b.n	8004412 <xPortStartScheduler+0xc6>
 8004414:	e000ed00 	.word	0xe000ed00
 8004418:	410fc271 	.word	0x410fc271
 800441c:	410fc270 	.word	0x410fc270
 8004420:	e000e400 	.word	0xe000e400
 8004424:	2000034a 	.word	0x2000034a
 8004428:	2000034c 	.word	0x2000034c
 800442c:	e000ed20 	.word	0xe000ed20
 8004430:	20000110 	.word	0x20000110
 8004434:	e000ef34 	.word	0xe000ef34

08004438 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004438:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800443a:	4b11      	ldr	r3, [pc, #68]	; (8004480 <prvInsertBlockIntoFreeList+0x48>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	4282      	cmp	r2, r0
 8004440:	d201      	bcs.n	8004446 <prvInsertBlockIntoFreeList+0xe>
 8004442:	4613      	mov	r3, r2
 8004444:	e7fa      	b.n	800443c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004446:	685c      	ldr	r4, [r3, #4]
 8004448:	1919      	adds	r1, r3, r4
 800444a:	4288      	cmp	r0, r1
 800444c:	d103      	bne.n	8004456 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800444e:	6841      	ldr	r1, [r0, #4]
 8004450:	4421      	add	r1, r4
 8004452:	6059      	str	r1, [r3, #4]
 8004454:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004456:	6844      	ldr	r4, [r0, #4]
 8004458:	1901      	adds	r1, r0, r4
 800445a:	428a      	cmp	r2, r1
 800445c:	d109      	bne.n	8004472 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800445e:	4909      	ldr	r1, [pc, #36]	; (8004484 <prvInsertBlockIntoFreeList+0x4c>)
 8004460:	6809      	ldr	r1, [r1, #0]
 8004462:	428a      	cmp	r2, r1
 8004464:	d005      	beq.n	8004472 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004466:	6851      	ldr	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800446c:	4421      	add	r1, r4
 800446e:	6041      	str	r1, [r0, #4]
 8004470:	e000      	b.n	8004474 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004472:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004474:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004476:	bf18      	it	ne
 8004478:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800447a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	20003f60 	.word	0x20003f60
 8004484:	20000350 	.word	0x20000350

08004488 <pvPortMalloc>:
{
 8004488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800448c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800448e:	f000 fa47 	bl	8004920 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004492:	4843      	ldr	r0, [pc, #268]	; (80045a0 <pvPortMalloc+0x118>)
 8004494:	6803      	ldr	r3, [r0, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d05c      	beq.n	8004554 <pvPortMalloc+0xcc>
 800449a:	4b42      	ldr	r3, [pc, #264]	; (80045a4 <pvPortMalloc+0x11c>)
 800449c:	681d      	ldr	r5, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800449e:	422c      	tst	r4, r5
 80044a0:	d151      	bne.n	8004546 <pvPortMalloc+0xbe>
			if( xWantedSize > 0 )
 80044a2:	2c00      	cmp	r4, #0
 80044a4:	d04f      	beq.n	8004546 <pvPortMalloc+0xbe>
				xWantedSize += xHeapStructSize;
 80044a6:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044aa:	0759      	lsls	r1, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044ac:	bf1c      	itt	ne
 80044ae:	f023 0307 	bicne.w	r3, r3, #7
 80044b2:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d046      	beq.n	8004546 <pvPortMalloc+0xbe>
 80044b8:	4f3b      	ldr	r7, [pc, #236]	; (80045a8 <pvPortMalloc+0x120>)
 80044ba:	683e      	ldr	r6, [r7, #0]
 80044bc:	42b3      	cmp	r3, r6
 80044be:	d842      	bhi.n	8004546 <pvPortMalloc+0xbe>
				pxBlock = xStart.pxNextFreeBlock;
 80044c0:	493a      	ldr	r1, [pc, #232]	; (80045ac <pvPortMalloc+0x124>)
 80044c2:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044c4:	e006      	b.n	80044d4 <pvPortMalloc+0x4c>
 80044c6:	f8d4 e000 	ldr.w	lr, [r4]
 80044ca:	f1be 0f00 	cmp.w	lr, #0
 80044ce:	d004      	beq.n	80044da <pvPortMalloc+0x52>
 80044d0:	4621      	mov	r1, r4
 80044d2:	4674      	mov	r4, lr
 80044d4:	6862      	ldr	r2, [r4, #4]
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d8f5      	bhi.n	80044c6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80044da:	6800      	ldr	r0, [r0, #0]
 80044dc:	4284      	cmp	r4, r0
 80044de:	d032      	beq.n	8004546 <pvPortMalloc+0xbe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044e0:	6820      	ldr	r0, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044e2:	f8d1 8000 	ldr.w	r8, [r1]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044e6:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044e8:	1ad1      	subs	r1, r2, r3
 80044ea:	2910      	cmp	r1, #16
 80044ec:	d910      	bls.n	8004510 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044ee:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044f0:	0742      	lsls	r2, r0, #29
 80044f2:	d008      	beq.n	8004506 <pvPortMalloc+0x7e>
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	e7fe      	b.n	8004504 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004506:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004508:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800450a:	f7ff ff95 	bl	8004438 <prvInsertBlockIntoFreeList>
 800450e:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004510:	4827      	ldr	r0, [pc, #156]	; (80045b0 <pvPortMalloc+0x128>)
 8004512:	6801      	ldr	r1, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004514:	1ab6      	subs	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8004516:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004518:	432a      	orrs	r2, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800451a:	428e      	cmp	r6, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800451c:	6062      	str	r2, [r4, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800451e:	f108 0808 	add.w	r8, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8004522:	6023      	str	r3, [r4, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004524:	bf38      	it	cc
 8004526:	6006      	strcc	r6, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004528:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 800452a:	f000 faa9 	bl	8004a80 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800452e:	f018 0f07 	tst.w	r8, #7
 8004532:	d00c      	beq.n	800454e <pvPortMalloc+0xc6>
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	e7fe      	b.n	8004544 <pvPortMalloc+0xbc>
	( void ) xTaskResumeAll();
 8004546:	f000 fa9b 	bl	8004a80 <xTaskResumeAll>
 800454a:	f04f 0800 	mov.w	r8, #0
}
 800454e:	4640      	mov	r0, r8
 8004550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 8004554:	4a17      	ldr	r2, [pc, #92]	; (80045b4 <pvPortMalloc+0x12c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004556:	0755      	lsls	r5, r2, #29
 8004558:	d01f      	beq.n	800459a <pvPortMalloc+0x112>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800455a:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800455c:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004560:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
 8004564:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004566:	460a      	mov	r2, r1
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004568:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800456a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800456c:	f023 0307 	bic.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004570:	4e0d      	ldr	r6, [pc, #52]	; (80045a8 <pvPortMalloc+0x120>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004572:	4d0e      	ldr	r5, [pc, #56]	; (80045ac <pvPortMalloc+0x124>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004574:	f8df e038 	ldr.w	lr, [pc, #56]	; 80045b0 <pvPortMalloc+0x128>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004578:	4f0a      	ldr	r7, [pc, #40]	; (80045a4 <pvPortMalloc+0x11c>)
	pxEnd = ( void * ) uxAddress;
 800457a:	6003      	str	r3, [r0, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800457c:	1a99      	subs	r1, r3, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800457e:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004580:	2600      	movs	r6, #0
 8004582:	e885 0044 	stmia.w	r5, {r2, r6}
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004586:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	pxEnd->xBlockSize = 0;
 800458a:	605e      	str	r6, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800458c:	601e      	str	r6, [r3, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800458e:	f8ce 1000 	str.w	r1, [lr]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004592:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004594:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	e781      	b.n	800449e <pvPortMalloc+0x16>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800459a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800459e:	e7e3      	b.n	8004568 <pvPortMalloc+0xe0>
 80045a0:	20000350 	.word	0x20000350
 80045a4:	20003f54 	.word	0x20003f54
 80045a8:	20003f58 	.word	0x20003f58
 80045ac:	20003f60 	.word	0x20003f60
 80045b0:	20003f5c 	.word	0x20003f5c
 80045b4:	20000354 	.word	0x20000354

080045b8 <vPortFree>:
	if( pv != NULL )
 80045b8:	b1d0      	cbz	r0, 80045f0 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045ba:	4a19      	ldr	r2, [pc, #100]	; (8004620 <vPortFree+0x68>)
 80045bc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	4213      	tst	r3, r2
 80045c4:	d108      	bne.n	80045d8 <vPortFree+0x20>
 80045c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	e7fe      	b.n	80045d6 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045d8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80045dc:	b149      	cbz	r1, 80045f2 <vPortFree+0x3a>
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	e7fe      	b.n	80045ee <vPortFree+0x36>
 80045f0:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045f2:	ea23 0302 	bic.w	r3, r3, r2
{
 80045f6:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045f8:	f840 3c04 	str.w	r3, [r0, #-4]
 80045fc:	4604      	mov	r4, r0
				vTaskSuspendAll();
 80045fe:	f000 f98f 	bl	8004920 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004602:	4a08      	ldr	r2, [pc, #32]	; (8004624 <vPortFree+0x6c>)
 8004604:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004608:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800460a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800460e:	440b      	add	r3, r1
 8004610:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004612:	f7ff ff11 	bl	8004438 <prvInsertBlockIntoFreeList>
}
 8004616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800461a:	f000 ba31 	b.w	8004a80 <xTaskResumeAll>
 800461e:	bf00      	nop
 8004620:	20003f54 	.word	0x20003f54
 8004624:	20003f58 	.word	0x20003f58

08004628 <prvResetNextTaskUnblockTime.part.1>:
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004628:	4a03      	ldr	r2, [pc, #12]	; (8004638 <prvResetNextTaskUnblockTime.part.1+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800462a:	4b04      	ldr	r3, [pc, #16]	; (800463c <prvResetNextTaskUnblockTime.part.1+0x14>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004630:	68d2      	ldr	r2, [r2, #12]
 8004632:	6852      	ldr	r2, [r2, #4]
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	4770      	bx	lr
 8004638:	20003f6c 	.word	0x20003f6c
 800463c:	20004044 	.word	0x20004044

08004640 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004642:	4b1b      	ldr	r3, [pc, #108]	; (80046b0 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004644:	4d1b      	ldr	r5, [pc, #108]	; (80046b4 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8004646:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004648:	682b      	ldr	r3, [r5, #0]
{
 800464a:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800464c:	1d18      	adds	r0, r3, #4
{
 800464e:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004650:	f7ff fd76 	bl	8004140 <uxListRemove>
 8004654:	b940      	cbnz	r0, 8004668 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004656:	682b      	ldr	r3, [r5, #0]
 8004658:	4917      	ldr	r1, [pc, #92]	; (80046b8 <prvAddCurrentTaskToDelayedList+0x78>)
 800465a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800465c:	680b      	ldr	r3, [r1, #0]
 800465e:	2201      	movs	r2, #1
 8004660:	4082      	lsls	r2, r0
 8004662:	ea23 0302 	bic.w	r3, r3, r2
 8004666:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004668:	1c63      	adds	r3, r4, #1
 800466a:	d018      	beq.n	800469e <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800466c:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800466e:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
 8004670:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004672:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004674:	d80b      	bhi.n	800468e <prvAddCurrentTaskToDelayedList+0x4e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004676:	4b11      	ldr	r3, [pc, #68]	; (80046bc <prvAddCurrentTaskToDelayedList+0x7c>)
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	6829      	ldr	r1, [r5, #0]
 800467c:	3104      	adds	r1, #4
 800467e:	f7ff fd45 	bl	800410c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8004682:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <prvAddCurrentTaskToDelayedList+0x80>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8004688:	bf38      	it	cc
 800468a:	601c      	strcc	r4, [r3, #0]
 800468c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800468e:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <prvAddCurrentTaskToDelayedList+0x84>)
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004694:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004698:	3104      	adds	r1, #4
 800469a:	f7ff bd37 	b.w	800410c <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800469e:	2f00      	cmp	r7, #0
 80046a0:	d0e4      	beq.n	800466c <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046a2:	6829      	ldr	r1, [r5, #0]
 80046a4:	4808      	ldr	r0, [pc, #32]	; (80046c8 <prvAddCurrentTaskToDelayedList+0x88>)
 80046a6:	3104      	adds	r1, #4
}
 80046a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ac:	f7ff bd1e 	b.w	80040ec <vListInsertEnd>
 80046b0:	2000408c 	.word	0x2000408c
 80046b4:	20003f68 	.word	0x20003f68
 80046b8:	20004014 	.word	0x20004014
 80046bc:	20003f6c 	.word	0x20003f6c
 80046c0:	20004044 	.word	0x20004044
 80046c4:	20003f70 	.word	0x20003f70
 80046c8:	20004064 	.word	0x20004064

080046cc <xTaskCreate>:
	{
 80046cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046d0:	ea4f 0882 	mov.w	r8, r2, lsl #2
	{
 80046d4:	4606      	mov	r6, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046d6:	4640      	mov	r0, r8
	{
 80046d8:	4689      	mov	r9, r1
 80046da:	461f      	mov	r7, r3
 80046dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046de:	f7ff fed3 	bl	8004488 <pvPortMalloc>
			if( pxStack != NULL )
 80046e2:	2800      	cmp	r0, #0
 80046e4:	f000 808a 	beq.w	80047fc <xTaskCreate+0x130>
 80046e8:	4682      	mov	sl, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80046ea:	2054      	movs	r0, #84	; 0x54
 80046ec:	f7ff fecc 	bl	8004488 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80046f0:	4604      	mov	r4, r0
 80046f2:	2800      	cmp	r0, #0
 80046f4:	f000 808f 	beq.w	8004816 <xTaskCreate+0x14a>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80046f8:	f1a8 0804 	sub.w	r8, r8, #4
 80046fc:	44d0      	add	r8, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80046fe:	f028 0807 	bic.w	r8, r8, #7
					pxNewTCB->pxStack = pxStack;
 8004702:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
 8004706:	f109 33ff 	add.w	r3, r9, #4294967295
 800470a:	f109 010f 	add.w	r1, r9, #15
 800470e:	f100 0233 	add.w	r2, r0, #51	; 0x33
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004712:	7858      	ldrb	r0, [r3, #1]
 8004714:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8004718:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800471c:	b108      	cbz	r0, 8004722 <xTaskCreate+0x56>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800471e:	428b      	cmp	r3, r1
 8004720:	d1f7      	bne.n	8004712 <xTaskCreate+0x46>
 8004722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004724:	2b06      	cmp	r3, #6
 8004726:	bf28      	it	cs
 8004728:	2306      	movcs	r3, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800472a:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800472e:	f104 0a04 	add.w	sl, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8004732:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004734:	6463      	str	r3, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004736:	4650      	mov	r0, sl
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004738:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800473c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8004740:	4699      	mov	r9, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004742:	f7ff fccf 	bl	80040e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004746:	f104 0018 	add.w	r0, r4, #24
 800474a:	f7ff fccb 	bl	80040e4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800474e:	f1c9 0307 	rsb	r3, r9, #7
		pxNewTCB->ulNotifiedValue = 0;
 8004752:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004756:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004758:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800475a:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800475e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004760:	463a      	mov	r2, r7
 8004762:	4631      	mov	r1, r6
 8004764:	4640      	mov	r0, r8
 8004766:	f7ff fd31 	bl	80041cc <pxPortInitialiseStack>
 800476a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800476c:	b105      	cbz	r5, 8004770 <xTaskCreate+0xa4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800476e:	602c      	str	r4, [r5, #0]
	taskENTER_CRITICAL();
 8004770:	f7ff fd58 	bl	8004224 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004774:	4a3e      	ldr	r2, [pc, #248]	; (8004870 <xTaskCreate+0x1a4>)
		if( pxCurrentTCB == NULL )
 8004776:	4e3f      	ldr	r6, [pc, #252]	; (8004874 <xTaskCreate+0x1a8>)
		uxCurrentNumberOfTasks++;
 8004778:	6813      	ldr	r3, [r2, #0]
 800477a:	3301      	adds	r3, #1
 800477c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800477e:	6833      	ldr	r3, [r6, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d03f      	beq.n	8004804 <xTaskCreate+0x138>
			if( xSchedulerRunning == pdFALSE )
 8004784:	4f3c      	ldr	r7, [pc, #240]	; (8004878 <xTaskCreate+0x1ac>)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	b363      	cbz	r3, 80047e4 <xTaskCreate+0x118>
 800478a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800478c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800489c <xTaskCreate+0x1d0>
		uxTaskNumber++;
 8004790:	4a3a      	ldr	r2, [pc, #232]	; (800487c <xTaskCreate+0x1b0>)
		prvAddTaskToReadyList( pxNewTCB );
 8004792:	f8df e10c 	ldr.w	lr, [pc, #268]	; 80048a0 <xTaskCreate+0x1d4>
		uxTaskNumber++;
 8004796:	6810      	ldr	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004798:	f8de c000 	ldr.w	ip, [lr]
 800479c:	2501      	movs	r5, #1
		uxTaskNumber++;
 800479e:	4428      	add	r0, r5
 80047a0:	6010      	str	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80047a2:	fa05 f203 	lsl.w	r2, r5, r3
 80047a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80047aa:	ea42 020c 	orr.w	r2, r2, ip
 80047ae:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 80047b2:	4651      	mov	r1, sl
 80047b4:	f8ce 2000 	str.w	r2, [lr]
 80047b8:	f7ff fc98 	bl	80040ec <vListInsertEnd>
	taskEXIT_CRITICAL();
 80047bc:	f7ff fd54 	bl	8004268 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	b1c3      	cbz	r3, 80047f6 <xTaskCreate+0x12a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047c4:	6832      	ldr	r2, [r6, #0]
 80047c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80047c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d213      	bcs.n	80047f6 <xTaskCreate+0x12a>
			taskYIELD_IF_USING_PREEMPTION();
 80047ce:	4b2c      	ldr	r3, [pc, #176]	; (8004880 <xTaskCreate+0x1b4>)
 80047d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 80047de:	4628      	mov	r0, r5
 80047e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80047e4:	6832      	ldr	r2, [r6, #0]
 80047e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80047e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047ea:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800489c <xTaskCreate+0x1d0>
 80047ee:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80047f0:	bf98      	it	ls
 80047f2:	6034      	strls	r4, [r6, #0]
 80047f4:	e7cc      	b.n	8004790 <xTaskCreate+0xc4>
			xReturn = pdPASS;
 80047f6:	4628      	mov	r0, r5
	}
 80047f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 8004804:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004806:	6813      	ldr	r3, [r2, #0]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d00b      	beq.n	8004824 <xTaskCreate+0x158>
 800480c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800480e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800489c <xTaskCreate+0x1d0>
 8004812:	4f19      	ldr	r7, [pc, #100]	; (8004878 <xTaskCreate+0x1ac>)
 8004814:	e7bc      	b.n	8004790 <xTaskCreate+0xc4>
					vPortFree( pxStack );
 8004816:	4650      	mov	r0, sl
 8004818:	f7ff fece 	bl	80045b8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800481c:	f04f 30ff 	mov.w	r0, #4294967295
 8004820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004824:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800489c <xTaskCreate+0x1d0>
 8004828:	4645      	mov	r5, r8
 800482a:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800482e:	4628      	mov	r0, r5
 8004830:	3514      	adds	r5, #20
 8004832:	f7ff fc4b 	bl	80040cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004836:	42af      	cmp	r7, r5
 8004838:	d1f9      	bne.n	800482e <xTaskCreate+0x162>
	vListInitialise( &xDelayedTaskList1 );
 800483a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80048a4 <xTaskCreate+0x1d8>
	vListInitialise( &xDelayedTaskList2 );
 800483e:	4d11      	ldr	r5, [pc, #68]	; (8004884 <xTaskCreate+0x1b8>)
 8004840:	4f0d      	ldr	r7, [pc, #52]	; (8004878 <xTaskCreate+0x1ac>)
	vListInitialise( &xDelayedTaskList1 );
 8004842:	4648      	mov	r0, r9
 8004844:	f7ff fc42 	bl	80040cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004848:	4628      	mov	r0, r5
 800484a:	f7ff fc3f 	bl	80040cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800484e:	480e      	ldr	r0, [pc, #56]	; (8004888 <xTaskCreate+0x1bc>)
 8004850:	f7ff fc3c 	bl	80040cc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004854:	480d      	ldr	r0, [pc, #52]	; (800488c <xTaskCreate+0x1c0>)
 8004856:	f7ff fc39 	bl	80040cc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800485a:	480d      	ldr	r0, [pc, #52]	; (8004890 <xTaskCreate+0x1c4>)
 800485c:	f7ff fc36 	bl	80040cc <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <xTaskCreate+0x1c8>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8004862:	4a0d      	ldr	r2, [pc, #52]	; (8004898 <xTaskCreate+0x1cc>)
 8004864:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004868:	601d      	str	r5, [r3, #0]
 800486a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800486c:	e790      	b.n	8004790 <xTaskCreate+0xc4>
 800486e:	bf00      	nop
 8004870:	20004000 	.word	0x20004000
 8004874:	20003f68 	.word	0x20003f68
 8004878:	20004060 	.word	0x20004060
 800487c:	20004010 	.word	0x20004010
 8004880:	e000ed04 	.word	0xe000ed04
 8004884:	2000402c 	.word	0x2000402c
 8004888:	2000404c 	.word	0x2000404c
 800488c:	20004078 	.word	0x20004078
 8004890:	20004064 	.word	0x20004064
 8004894:	20003f70 	.word	0x20003f70
 8004898:	20003f6c 	.word	0x20003f6c
 800489c:	20003f74 	.word	0x20003f74
 80048a0:	20004014 	.word	0x20004014
 80048a4:	20004018 	.word	0x20004018

080048a8 <vTaskStartScheduler>:
{
 80048a8:	b530      	push	{r4, r5, lr}
 80048aa:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 80048ac:	4b16      	ldr	r3, [pc, #88]	; (8004908 <vTaskStartScheduler+0x60>)
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	2400      	movs	r4, #0
 80048b2:	9400      	str	r4, [sp, #0]
 80048b4:	4623      	mov	r3, r4
 80048b6:	2280      	movs	r2, #128	; 0x80
 80048b8:	4914      	ldr	r1, [pc, #80]	; (800490c <vTaskStartScheduler+0x64>)
 80048ba:	4815      	ldr	r0, [pc, #84]	; (8004910 <vTaskStartScheduler+0x68>)
 80048bc:	f7ff ff06 	bl	80046cc <xTaskCreate>
	if( xReturn == pdPASS )
 80048c0:	2801      	cmp	r0, #1
 80048c2:	d00c      	beq.n	80048de <vTaskStartScheduler+0x36>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048c4:	3001      	adds	r0, #1
 80048c6:	d001      	beq.n	80048cc <vTaskStartScheduler+0x24>
}
 80048c8:	b003      	add	sp, #12
 80048ca:	bd30      	pop	{r4, r5, pc}
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	e7fe      	b.n	80048dc <vTaskStartScheduler+0x34>
 80048de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80048ee:	4909      	ldr	r1, [pc, #36]	; (8004914 <vTaskStartScheduler+0x6c>)
		xSchedulerRunning = pdTRUE;
 80048f0:	4a09      	ldr	r2, [pc, #36]	; (8004918 <vTaskStartScheduler+0x70>)
		xTickCount = ( TickType_t ) 0U;
 80048f2:	4b0a      	ldr	r3, [pc, #40]	; (800491c <vTaskStartScheduler+0x74>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80048f4:	f04f 35ff 	mov.w	r5, #4294967295
 80048f8:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 80048fa:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 80048fc:	601c      	str	r4, [r3, #0]
}
 80048fe:	b003      	add	sp, #12
 8004900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004904:	f7ff bd22 	b.w	800434c <xPortStartScheduler>
 8004908:	20004040 	.word	0x20004040
 800490c:	080066a0 	.word	0x080066a0
 8004910:	08004bdd 	.word	0x08004bdd
 8004914:	20004044 	.word	0x20004044
 8004918:	20004060 	.word	0x20004060
 800491c:	2000408c 	.word	0x2000408c

08004920 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004920:	4a02      	ldr	r2, [pc, #8]	; (800492c <vTaskSuspendAll+0xc>)
 8004922:	6813      	ldr	r3, [r2, #0]
 8004924:	3301      	adds	r3, #1
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	2000400c 	.word	0x2000400c

08004930 <xTaskIncrementTick>:
{
 8004930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004934:	4b47      	ldr	r3, [pc, #284]	; (8004a54 <xTaskIncrementTick+0x124>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d153      	bne.n	80049e4 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 800493c:	4b46      	ldr	r3, [pc, #280]	; (8004a58 <xTaskIncrementTick+0x128>)
 800493e:	681e      	ldr	r6, [r3, #0]
 8004940:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8004942:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8004944:	2e00      	cmp	r6, #0
 8004946:	d05a      	beq.n	80049fe <xTaskIncrementTick+0xce>
 8004948:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8004a78 <xTaskIncrementTick+0x148>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800494c:	f8db 2000 	ldr.w	r2, [fp]
 8004950:	4296      	cmp	r6, r2
 8004952:	d361      	bcc.n	8004a18 <xTaskIncrementTick+0xe8>
 8004954:	4d41      	ldr	r5, [pc, #260]	; (8004a5c <xTaskIncrementTick+0x12c>)
 8004956:	4f42      	ldr	r7, [pc, #264]	; (8004a60 <xTaskIncrementTick+0x130>)
 8004958:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8004a7c <xTaskIncrementTick+0x14c>
 800495c:	2400      	movs	r4, #0
 800495e:	e02e      	b.n	80049be <xTaskIncrementTick+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004960:	682a      	ldr	r2, [r5, #0]
 8004962:	68d2      	ldr	r2, [r2, #12]
 8004964:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004968:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800496c:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 8004970:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004972:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8004974:	d364      	bcc.n	8004a40 <xTaskIncrementTick+0x110>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004976:	f7ff fbe3 	bl	8004140 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800497a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800497e:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004982:	b109      	cbz	r1, 8004988 <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004984:	f7ff fbdc 	bl	8004140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004988:	4b36      	ldr	r3, [pc, #216]	; (8004a64 <xTaskIncrementTick+0x134>)
 800498a:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2201      	movs	r2, #1
 8004992:	fa02 fe00 	lsl.w	lr, r2, r0
 8004996:	ea4e 0e03 	orr.w	lr, lr, r3
 800499a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800499e:	4b31      	ldr	r3, [pc, #196]	; (8004a64 <xTaskIncrementTick+0x134>)
 80049a0:	4651      	mov	r1, sl
 80049a2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80049a6:	f8c3 e000 	str.w	lr, [r3]
 80049aa:	f7ff fb9f 	bl	80040ec <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049ae:	f8d8 0000 	ldr.w	r0, [r8]
 80049b2:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 80049b6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80049b8:	4291      	cmp	r1, r2
 80049ba:	bf28      	it	cs
 80049bc:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049be:	682a      	ldr	r2, [r5, #0]
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	2a00      	cmp	r2, #0
 80049c4:	d1cc      	bne.n	8004960 <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049c6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ca:	f8cb 2000 	str.w	r2, [fp]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049ce:	f8d8 3000 	ldr.w	r3, [r8]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80049d8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
 80049dc:	2b02      	cmp	r3, #2
 80049de:	bf28      	it	cs
 80049e0:	2401      	movcs	r4, #1
 80049e2:	e004      	b.n	80049ee <xTaskIncrementTick+0xbe>
		++uxPendedTicks;
 80049e4:	4a20      	ldr	r2, [pc, #128]	; (8004a68 <xTaskIncrementTick+0x138>)
 80049e6:	6813      	ldr	r3, [r2, #0]
 80049e8:	3301      	adds	r3, #1
 80049ea:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80049ec:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 80049ee:	4b1f      	ldr	r3, [pc, #124]	; (8004a6c <xTaskIncrementTick+0x13c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bf18      	it	ne
 80049f6:	2401      	movne	r4, #1
}
 80049f8:	4620      	mov	r0, r4
 80049fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80049fe:	4d17      	ldr	r5, [pc, #92]	; (8004a5c <xTaskIncrementTick+0x12c>)
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	b16b      	cbz	r3, 8004a22 <xTaskIncrementTick+0xf2>
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	e7fe      	b.n	8004a16 <xTaskIncrementTick+0xe6>
 8004a18:	4f11      	ldr	r7, [pc, #68]	; (8004a60 <xTaskIncrementTick+0x130>)
 8004a1a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8004a7c <xTaskIncrementTick+0x14c>
BaseType_t xSwitchRequired = pdFALSE;
 8004a1e:	2400      	movs	r4, #0
 8004a20:	e7d5      	b.n	80049ce <xTaskIncrementTick+0x9e>
			taskSWITCH_DELAYED_LISTS();
 8004a22:	4b13      	ldr	r3, [pc, #76]	; (8004a70 <xTaskIncrementTick+0x140>)
 8004a24:	6829      	ldr	r1, [r5, #0]
 8004a26:	4a13      	ldr	r2, [pc, #76]	; (8004a74 <xTaskIncrementTick+0x144>)
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	6028      	str	r0, [r5, #0]
 8004a2c:	6019      	str	r1, [r3, #0]
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	b12b      	cbz	r3, 8004a46 <xTaskIncrementTick+0x116>
 8004a3a:	f7ff fdf5 	bl	8004628 <prvResetNextTaskUnblockTime.part.1>
 8004a3e:	e783      	b.n	8004948 <xTaskIncrementTick+0x18>
						xNextTaskUnblockTime = xItemValue;
 8004a40:	f8cb 1000 	str.w	r1, [fp]
						break;
 8004a44:	e7c3      	b.n	80049ce <xTaskIncrementTick+0x9e>
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a46:	f8df b030 	ldr.w	fp, [pc, #48]	; 8004a78 <xTaskIncrementTick+0x148>
 8004a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4e:	f8cb 2000 	str.w	r2, [fp]
 8004a52:	e77b      	b.n	800494c <xTaskIncrementTick+0x1c>
 8004a54:	2000400c 	.word	0x2000400c
 8004a58:	2000408c 	.word	0x2000408c
 8004a5c:	20003f6c 	.word	0x20003f6c
 8004a60:	20003f74 	.word	0x20003f74
 8004a64:	20004014 	.word	0x20004014
 8004a68:	20004008 	.word	0x20004008
 8004a6c:	20004090 	.word	0x20004090
 8004a70:	20003f70 	.word	0x20003f70
 8004a74:	20004048 	.word	0x20004048
 8004a78:	20004044 	.word	0x20004044
 8004a7c:	20003f68 	.word	0x20003f68

08004a80 <xTaskResumeAll>:
{
 8004a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8004a84:	4c37      	ldr	r4, [pc, #220]	; (8004b64 <xTaskResumeAll+0xe4>)
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	b943      	cbnz	r3, 8004a9c <xTaskResumeAll+0x1c>
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	e7fe      	b.n	8004a9a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8004a9c:	f7ff fbc2 	bl	8004224 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aa6:	6824      	ldr	r4, [r4, #0]
 8004aa8:	2c00      	cmp	r4, #0
 8004aaa:	d151      	bne.n	8004b50 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004aac:	4b2e      	ldr	r3, [pc, #184]	; (8004b68 <xTaskResumeAll+0xe8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d04d      	beq.n	8004b50 <xTaskResumeAll+0xd0>
 8004ab4:	4d2d      	ldr	r5, [pc, #180]	; (8004b6c <xTaskResumeAll+0xec>)
 8004ab6:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8004b84 <xTaskResumeAll+0x104>
					prvAddTaskToReadyList( pxTCB );
 8004aba:	4e2d      	ldr	r6, [pc, #180]	; (8004b70 <xTaskResumeAll+0xf0>)
 8004abc:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8004b88 <xTaskResumeAll+0x108>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ac0:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8004b8c <xTaskResumeAll+0x10c>
 8004ac4:	e01f      	b.n	8004b06 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004ac6:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004aca:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004acc:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ad0:	f104 0018 	add.w	r0, r4, #24
 8004ad4:	f7ff fb34 	bl	8004140 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ad8:	4640      	mov	r0, r8
 8004ada:	f7ff fb31 	bl	8004140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ade:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004ae0:	6832      	ldr	r2, [r6, #0]
 8004ae2:	fa07 f300 	lsl.w	r3, r7, r0
 8004ae6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004aea:	4313      	orrs	r3, r2
 8004aec:	4641      	mov	r1, r8
 8004aee:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8004af2:	6033      	str	r3, [r6, #0]
 8004af4:	f7ff fafa 	bl	80040ec <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004af8:	f8db 3000 	ldr.w	r3, [fp]
 8004afc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8004b02:	bf28      	it	cs
 8004b04:	602f      	strcs	r7, [r5, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b06:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 8004b0a:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1da      	bne.n	8004ac6 <xTaskResumeAll+0x46>
				if( pxTCB != NULL )
 8004b10:	b13c      	cbz	r4, 8004b22 <xTaskResumeAll+0xa2>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b12:	4b18      	ldr	r3, [pc, #96]	; (8004b74 <xTaskResumeAll+0xf4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	bb03      	cbnz	r3, 8004b5c <xTaskResumeAll+0xdc>
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b1a:	4b17      	ldr	r3, [pc, #92]	; (8004b78 <xTaskResumeAll+0xf8>)
 8004b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b20:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b22:	4e16      	ldr	r6, [pc, #88]	; (8004b7c <xTaskResumeAll+0xfc>)
 8004b24:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b26:	b13c      	cbz	r4, 8004b38 <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 8004b28:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004b2a:	f7ff ff01 	bl	8004930 <xTaskIncrementTick>
 8004b2e:	b100      	cbz	r0, 8004b32 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8004b30:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b32:	3c01      	subs	r4, #1
 8004b34:	d1f9      	bne.n	8004b2a <xTaskResumeAll+0xaa>
						uxPendedTicks = 0;
 8004b36:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	b14b      	cbz	r3, 8004b50 <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
 8004b3c:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <xTaskResumeAll+0x100>)
 8004b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004b4c:	2401      	movs	r4, #1
 8004b4e:	e000      	b.n	8004b52 <xTaskResumeAll+0xd2>
BaseType_t xAlreadyYielded = pdFALSE;
 8004b50:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004b52:	f7ff fb89 	bl	8004268 <vPortExitCritical>
}
 8004b56:	4620      	mov	r0, r4
 8004b58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b5c:	f7ff fd64 	bl	8004628 <prvResetNextTaskUnblockTime.part.1>
 8004b60:	e7df      	b.n	8004b22 <xTaskResumeAll+0xa2>
 8004b62:	bf00      	nop
 8004b64:	2000400c 	.word	0x2000400c
 8004b68:	20004000 	.word	0x20004000
 8004b6c:	20004090 	.word	0x20004090
 8004b70:	20004014 	.word	0x20004014
 8004b74:	20003f6c 	.word	0x20003f6c
 8004b78:	20004044 	.word	0x20004044
 8004b7c:	20004008 	.word	0x20004008
 8004b80:	e000ed04 	.word	0xe000ed04
 8004b84:	2000404c 	.word	0x2000404c
 8004b88:	20003f74 	.word	0x20003f74
 8004b8c:	20003f68 	.word	0x20003f68

08004b90 <vTaskDelay>:
	{
 8004b90:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b92:	b158      	cbz	r0, 8004bac <vTaskDelay+0x1c>
			configASSERT( uxSchedulerSuspended == 0 );
 8004b94:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <vTaskDelay+0x44>)
 8004b96:	6819      	ldr	r1, [r3, #0]
 8004b98:	b189      	cbz	r1, 8004bbe <vTaskDelay+0x2e>
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	e7fe      	b.n	8004baa <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <vTaskDelay+0x48>)
 8004bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	bd08      	pop	{r3, pc}
	++uxSchedulerSuspended;
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	3201      	adds	r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bc4:	f7ff fd3c 	bl	8004640 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004bc8:	f7ff ff5a 	bl	8004a80 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d0ed      	beq.n	8004bac <vTaskDelay+0x1c>
 8004bd0:	bd08      	pop	{r3, pc}
 8004bd2:	bf00      	nop
 8004bd4:	2000400c 	.word	0x2000400c
 8004bd8:	e000ed04 	.word	0xe000ed04

08004bdc <prvIdleTask>:
{
 8004bdc:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 8004be0:	4c1c      	ldr	r4, [pc, #112]	; (8004c54 <prvIdleTask+0x78>)
 8004be2:	4e1d      	ldr	r6, [pc, #116]	; (8004c58 <prvIdleTask+0x7c>)
 8004be4:	4d1d      	ldr	r5, [pc, #116]	; (8004c5c <prvIdleTask+0x80>)
 8004be6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8004c64 <prvIdleTask+0x88>
				taskYIELD();
 8004bea:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8004c68 <prvIdleTask+0x8c>
 8004bee:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 8004bf2:	e006      	b.n	8004c02 <prvIdleTask+0x26>
	++uxSchedulerSuspended;
 8004bf4:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004bf6:	6837      	ldr	r7, [r6, #0]
	++uxSchedulerSuspended;
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
 8004bfc:	f7ff ff40 	bl	8004a80 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8004c00:	b96f      	cbnz	r7, 8004c1e <prvIdleTask+0x42>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c02:	682b      	ldr	r3, [r5, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1f5      	bne.n	8004bf4 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c08:	f8d8 3000 	ldr.w	r3, [r8]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d9f8      	bls.n	8004c02 <prvIdleTask+0x26>
				taskYIELD();
 8004c10:	f8ca 9000 	str.w	r9, [sl]
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	e7f1      	b.n	8004c02 <prvIdleTask+0x26>
				taskENTER_CRITICAL();
 8004c1e:	f7ff fb01 	bl	8004224 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004c22:	68f3      	ldr	r3, [r6, #12]
 8004c24:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c28:	f10b 0004 	add.w	r0, fp, #4
 8004c2c:	f7ff fa88 	bl	8004140 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <prvIdleTask+0x84>)
 8004c32:	4a0b      	ldr	r2, [pc, #44]	; (8004c60 <prvIdleTask+0x84>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004c3a:	682b      	ldr	r3, [r5, #0]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
 8004c40:	f7ff fb12 	bl	8004268 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8004c44:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 8004c48:	f7ff fcb6 	bl	80045b8 <vPortFree>
			vPortFree( pxTCB );
 8004c4c:	4658      	mov	r0, fp
 8004c4e:	f7ff fcb3 	bl	80045b8 <vPortFree>
 8004c52:	e7d6      	b.n	8004c02 <prvIdleTask+0x26>
 8004c54:	2000400c 	.word	0x2000400c
 8004c58:	20004078 	.word	0x20004078
 8004c5c:	20004004 	.word	0x20004004
 8004c60:	20004000 	.word	0x20004000
 8004c64:	20003f74 	.word	0x20003f74
 8004c68:	e000ed04 	.word	0xe000ed04

08004c6c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c6c:	4b16      	ldr	r3, [pc, #88]	; (8004cc8 <vTaskSwitchContext+0x5c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	bb33      	cbnz	r3, 8004cc0 <vTaskSwitchContext+0x54>
		xYieldPending = pdFALSE;
 8004c72:	4916      	ldr	r1, [pc, #88]	; (8004ccc <vTaskSwitchContext+0x60>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c74:	4a16      	ldr	r2, [pc, #88]	; (8004cd0 <vTaskSwitchContext+0x64>)
		xYieldPending = pdFALSE;
 8004c76:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c78:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004c7a:	fab3 f383 	clz	r3, r3
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	f1c3 031f 	rsb	r3, r3, #31
 8004c84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4912      	ldr	r1, [pc, #72]	; (8004cd4 <vTaskSwitchContext+0x68>)
 8004c8c:	58ca      	ldr	r2, [r1, r3]
 8004c8e:	18c8      	adds	r0, r1, r3
 8004c90:	b942      	cbnz	r2, 8004ca4 <vTaskSwitchContext+0x38>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	e7fe      	b.n	8004ca2 <vTaskSwitchContext+0x36>
 8004ca4:	6842      	ldr	r2, [r0, #4]
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	6852      	ldr	r2, [r2, #4]
 8004caa:	6042      	str	r2, [r0, #4]
 8004cac:	440b      	add	r3, r1
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	bf08      	it	eq
 8004cb2:	6852      	ldreq	r2, [r2, #4]
 8004cb4:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <vTaskSwitchContext+0x6c>)
 8004cb6:	bf08      	it	eq
 8004cb8:	6042      	streq	r2, [r0, #4]
 8004cba:	68d2      	ldr	r2, [r2, #12]
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	4770      	bx	lr
		xYieldPending = pdTRUE;
 8004cc0:	4b02      	ldr	r3, [pc, #8]	; (8004ccc <vTaskSwitchContext+0x60>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	4770      	bx	lr
 8004cc8:	2000400c 	.word	0x2000400c
 8004ccc:	20004090 	.word	0x20004090
 8004cd0:	20004014 	.word	0x20004014
 8004cd4:	20003f74 	.word	0x20003f74
 8004cd8:	20003f68 	.word	0x20003f68

08004cdc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <xTaskGetSchedulerState+0x18>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	b133      	cbz	r3, 8004cf0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ce2:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <xTaskGetSchedulerState+0x1c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ce8:	bf0c      	ite	eq
 8004cea:	2002      	moveq	r0, #2
 8004cec:	2000      	movne	r0, #0
 8004cee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cf0:	2001      	movs	r0, #1
	}
 8004cf2:	4770      	bx	lr
 8004cf4:	20004060 	.word	0x20004060
 8004cf8:	2000400c 	.word	0x2000400c

08004cfc <StartDefaultTask>:
}
/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8004cfc:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8004cfe:	f001 f85d 	bl	8005dbc <MX_USB_DEVICE_Init>
//  htim5.Instance->CCR4 = 1500;

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004d02:	2001      	movs	r0, #1
 8004d04:	f7ff f9d0 	bl	80040a8 <osDelay>
 8004d08:	e7fb      	b.n	8004d02 <StartDefaultTask+0x6>
 8004d0a:	bf00      	nop

08004d0c <SystemClock_Config>:
{
 8004d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d0e:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d10:	2000      	movs	r0, #0
 8004d12:	4a28      	ldr	r2, [pc, #160]	; (8004db4 <SystemClock_Config+0xa8>)
 8004d14:	9001      	str	r0, [sp, #4]
 8004d16:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d18:	4b27      	ldr	r3, [pc, #156]	; (8004db8 <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d1a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004d1e:	6411      	str	r1, [r2, #64]	; 0x40
 8004d20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d22:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004d26:	9201      	str	r2, [sp, #4]
 8004d28:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d2a:	9002      	str	r0, [sp, #8]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d3a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d3c:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d3e:	2701      	movs	r7, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d40:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d44:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004d48:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004d4a:	2248      	movs	r2, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004d4c:	2303      	movs	r3, #3
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d4e:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d50:	f8dd e008 	ldr.w	lr, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d54:	9708      	str	r7, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d56:	9609      	str	r6, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d58:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d5a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d5c:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004d5e:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004d60:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004d62:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d64:	f7fd fad2 	bl	800230c <HAL_RCC_OscConfig>
 8004d68:	b100      	cbz	r0, 8004d6c <SystemClock_Config+0x60>
 8004d6a:	e7fe      	b.n	8004d6a <SystemClock_Config+0x5e>
 8004d6c:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004d6e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004d70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d74:	250f      	movs	r5, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004d76:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d78:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d7a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d7c:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d7e:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004d80:	9206      	str	r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004d82:	f7fd fc91 	bl	80026a8 <HAL_RCC_ClockConfig>
 8004d86:	4604      	mov	r4, r0
 8004d88:	b100      	cbz	r0, 8004d8c <SystemClock_Config+0x80>
 8004d8a:	e7fe      	b.n	8004d8a <SystemClock_Config+0x7e>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004d8c:	f7fd fd26 	bl	80027dc <HAL_RCC_GetHCLKFreq>
 8004d90:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <SystemClock_Config+0xb0>)
 8004d92:	fba3 3000 	umull	r3, r0, r3, r0
 8004d96:	0980      	lsrs	r0, r0, #6
 8004d98:	f7fc f8a2 	bl	8000ee0 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004d9c:	2004      	movs	r0, #4
 8004d9e:	f7fc f8b9 	bl	8000f14 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8004da2:	4622      	mov	r2, r4
 8004da4:	4629      	mov	r1, r5
 8004da6:	f04f 30ff 	mov.w	r0, #4294967295
 8004daa:	f7fc f857 	bl	8000e5c <HAL_NVIC_SetPriority>
}
 8004dae:	b015      	add	sp, #84	; 0x54
 8004db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40023800 	.word	0x40023800
 8004db8:	40007000 	.word	0x40007000
 8004dbc:	10624dd3 	.word	0x10624dd3

08004dc0 <main>:
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dc4:	2400      	movs	r4, #0
  HAL_Init();
 8004dc6:	f7fb fffd 	bl	8000dc4 <HAL_Init>
  SystemClock_Config();
 8004dca:	f7ff ff9f 	bl	8004d0c <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dce:	4b9c      	ldr	r3, [pc, #624]	; (8005040 <main+0x280>)
 8004dd0:	9401      	str	r4, [sp, #4]
 8004dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, HeartBeat3_Pin|HeartBeat4_Pin, GPIO_PIN_RESET);
 8004dd4:	489b      	ldr	r0, [pc, #620]	; (8005044 <main+0x284>)
  htim2.Instance = TIM2;
 8004dd6:	4d9c      	ldr	r5, [pc, #624]	; (8005048 <main+0x288>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dd8:	f042 0204 	orr.w	r2, r2, #4
 8004ddc:	631a      	str	r2, [r3, #48]	; 0x30
 8004dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de0:	f002 0204 	and.w	r2, r2, #4
 8004de4:	9201      	str	r2, [sp, #4]
 8004de6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004de8:	9402      	str	r4, [sp, #8]
 8004dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30
 8004df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004df8:	9202      	str	r2, [sp, #8]
 8004dfa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dfc:	9403      	str	r4, [sp, #12]
 8004dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e00:	f042 0201 	orr.w	r2, r2, #1
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30
 8004e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e08:	f002 0201 	and.w	r2, r2, #1
 8004e0c:	9203      	str	r2, [sp, #12]
 8004e0e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e10:	9404      	str	r4, [sp, #16]
 8004e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e14:	f042 0202 	orr.w	r2, r2, #2
 8004e18:	631a      	str	r2, [r3, #48]	; 0x30
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, HeartBeat3_Pin|HeartBeat4_Pin, GPIO_PIN_RESET);
 8004e22:	4622      	mov	r2, r4
 8004e24:	2130      	movs	r1, #48	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e26:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, HeartBeat3_Pin|HeartBeat4_Pin, GPIO_PIN_RESET);
 8004e28:	f7fc f99c 	bl	8001164 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, PC4_LED_Pin|PC5_LED_Pin|HeartBeat1_Pin|HeartBeat2_Pin, GPIO_PIN_RESET);
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	21f0      	movs	r1, #240	; 0xf0
 8004e30:	4886      	ldr	r0, [pc, #536]	; (800504c <main+0x28c>)
 8004e32:	f7fc f997 	bl	8001164 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = PC13_Header_Pin|KillSwitch_Pin|MissionStart_Pin;
 8004e36:	f24a 0301 	movw	r3, #40961	; 0xa001
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e3a:	a907      	add	r1, sp, #28
 8004e3c:	4883      	ldr	r0, [pc, #524]	; (800504c <main+0x28c>)
  GPIO_InitStruct.Pin = PC13_Header_Pin|KillSwitch_Pin|MissionStart_Pin;
 8004e3e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e40:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e42:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e44:	f7fc f872 	bl	8000f2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Switch6_Pin|Switch3_Pin|Switch4_Pin|Switch5_Pin;
 8004e48:	f244 020e 	movw	r2, #16398	; 0x400e
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004e4c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e4e:	a907      	add	r1, sp, #28
 8004e50:	487e      	ldr	r0, [pc, #504]	; (800504c <main+0x28c>)
  GPIO_InitStruct.Pin = Switch6_Pin|Switch3_Pin|Switch4_Pin|Switch5_Pin;
 8004e52:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e54:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004e56:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e58:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e5a:	f7fc f867 	bl	8000f2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HeartBeat3_Pin|HeartBeat4_Pin;
 8004e5e:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e60:	a907      	add	r1, sp, #28
 8004e62:	4878      	ldr	r0, [pc, #480]	; (8005044 <main+0x284>)
  GPIO_InitStruct.Pin = HeartBeat3_Pin|HeartBeat4_Pin;
 8004e64:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e66:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e68:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e6a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e6c:	f7fc f85e 	bl	8000f2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PC4_LED_Pin|PC5_LED_Pin|HeartBeat1_Pin|HeartBeat2_Pin;
 8004e70:	23f0      	movs	r3, #240	; 0xf0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e72:	a907      	add	r1, sp, #28
 8004e74:	4875      	ldr	r0, [pc, #468]	; (800504c <main+0x28c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e76:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = PC4_LED_Pin|PC5_LED_Pin|HeartBeat1_Pin|HeartBeat2_Pin;
 8004e78:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e7c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e7e:	f7fc f855 	bl	8000f2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PB8_Header_Pin|DebugSwitch_Pin;
 8004e82:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e86:	4872      	ldr	r0, [pc, #456]	; (8005050 <main+0x290>)
  GPIO_InitStruct.Pin = PB8_Header_Pin|DebugSwitch_Pin;
 8004e88:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e8a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e8c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8e:	9409      	str	r4, [sp, #36]	; 0x24
  htim2.Init.Prescaler = 72;
 8004e90:	2748      	movs	r7, #72	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e92:	f7fc f84b 	bl	8000f2c <HAL_GPIO_Init>
  htim2.Init.Period = 2000;
 8004e96:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
  htim2.Instance = TIM2;
 8004e9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004e9e:	4628      	mov	r0, r5
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ea0:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ea2:	612c      	str	r4, [r5, #16]
  htim2.Init.Prescaler = 72;
 8004ea4:	e885 0088 	stmia.w	r5, {r3, r7}
  htim2.Init.Period = 2000;
 8004ea8:	60ee      	str	r6, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004eaa:	f7fd fed9 	bl	8002c60 <HAL_TIM_PWM_Init>
 8004eae:	b100      	cbz	r0, 8004eb2 <main+0xf2>
 8004eb0:	e7fe      	b.n	8004eb0 <main+0xf0>
 8004eb2:	4603      	mov	r3, r0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004eb4:	a905      	add	r1, sp, #20
 8004eb6:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004eb8:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eba:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ebc:	f7fd ff88 	bl	8002dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	b100      	cbz	r0, 8004ec6 <main+0x106>
 8004ec4:	e7fe      	b.n	8004ec4 <main+0x104>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ec6:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ec8:	f04f 0960 	mov.w	r9, #96	; 0x60
  sConfigOC.Pulse = 1500;
 8004ecc:	f240 58dc 	movw	r8, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ed0:	a907      	add	r1, sp, #28
 8004ed2:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ed4:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ed6:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ed8:	f8cd 901c 	str.w	r9, [sp, #28]
  sConfigOC.Pulse = 1500;
 8004edc:	f8cd 8020 	str.w	r8, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ee0:	f7fd ff0c 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 8004ee4:	b100      	cbz	r0, 8004ee8 <main+0x128>
 8004ee6:	e7fe      	b.n	8004ee6 <main+0x126>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ee8:	2204      	movs	r2, #4
 8004eea:	a907      	add	r1, sp, #28
 8004eec:	4628      	mov	r0, r5
 8004eee:	f7fd ff05 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 8004ef2:	b100      	cbz	r0, 8004ef6 <main+0x136>
 8004ef4:	e7fe      	b.n	8004ef4 <main+0x134>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	a907      	add	r1, sp, #28
 8004efa:	4628      	mov	r0, r5
 8004efc:	f7fd fefe 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 8004f00:	b100      	cbz	r0, 8004f04 <main+0x144>
 8004f02:	e7fe      	b.n	8004f02 <main+0x142>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004f04:	220c      	movs	r2, #12
 8004f06:	a907      	add	r1, sp, #28
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f7fd fef7 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 8004f0e:	4682      	mov	sl, r0
 8004f10:	b100      	cbz	r0, 8004f14 <main+0x154>
 8004f12:	e7fe      	b.n	8004f12 <main+0x152>
  htim13.Instance = TIM13;
 8004f14:	4c4f      	ldr	r4, [pc, #316]	; (8005054 <main+0x294>)
  HAL_TIM_MspPostInit(&htim2);
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 fe72 	bl	8005c00 <HAL_TIM_MspPostInit>
  htim13.Instance = TIM13;
 8004f1c:	4b4e      	ldr	r3, [pc, #312]	; (8005058 <main+0x298>)
  htim13.Init.Prescaler = 72;
 8004f1e:	6067      	str	r7, [r4, #4]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004f20:	4620      	mov	r0, r4
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f22:	f8c4 a008 	str.w	sl, [r4, #8]
  htim13.Init.Period = 2000;
 8004f26:	60e6      	str	r6, [r4, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f28:	f8c4 a010 	str.w	sl, [r4, #16]
  htim13.Instance = TIM13;
 8004f2c:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004f2e:	f7fd fe7b 	bl	8002c28 <HAL_TIM_Base_Init>
 8004f32:	b100      	cbz	r0, 8004f36 <main+0x176>
 8004f34:	e7fe      	b.n	8004f34 <main+0x174>
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004f36:	4620      	mov	r0, r4
 8004f38:	f7fd fe92 	bl	8002c60 <HAL_TIM_PWM_Init>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	b100      	cbz	r0, 8004f42 <main+0x182>
 8004f40:	e7fe      	b.n	8004f40 <main+0x180>
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f42:	4602      	mov	r2, r0
 8004f44:	a907      	add	r1, sp, #28
 8004f46:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f48:	f8cd 901c 	str.w	r9, [sp, #28]
  sConfigOC.Pulse = 1500;
 8004f4c:	f8cd 8020 	str.w	r8, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f50:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f52:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f54:	f7fd fed2 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 8004f58:	4605      	mov	r5, r0
 8004f5a:	b100      	cbz	r0, 8004f5e <main+0x19e>
 8004f5c:	e7fe      	b.n	8004f5c <main+0x19c>
  HAL_TIM_MspPostInit(&htim13);
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 fe4e 	bl	8005c00 <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 8004f64:	4b3d      	ldr	r3, [pc, #244]	; (800505c <main+0x29c>)
 8004f66:	4a3e      	ldr	r2, [pc, #248]	; (8005060 <main+0x2a0>)
  htim14.Init.Prescaler = 72;
 8004f68:	605f      	str	r7, [r3, #4]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004f6a:	4618      	mov	r0, r3
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f6c:	609d      	str	r5, [r3, #8]
  htim14.Init.Period = 2000;
 8004f6e:	60de      	str	r6, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f70:	611d      	str	r5, [r3, #16]
  htim14.Instance = TIM14;
 8004f72:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004f74:	f7fd fe58 	bl	8002c28 <HAL_TIM_Base_Init>
 8004f78:	b100      	cbz	r0, 8004f7c <main+0x1bc>
 8004f7a:	e7fe      	b.n	8004f7a <main+0x1ba>
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004f7c:	4837      	ldr	r0, [pc, #220]	; (800505c <main+0x29c>)
 8004f7e:	f7fd fe6f 	bl	8002c60 <HAL_TIM_PWM_Init>
 8004f82:	4603      	mov	r3, r0
 8004f84:	b100      	cbz	r0, 8004f88 <main+0x1c8>
 8004f86:	e7fe      	b.n	8004f86 <main+0x1c6>
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f88:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f8a:	2660      	movs	r6, #96	; 0x60
  sConfigOC.Pulse = 1500;
 8004f8c:	f240 55dc 	movw	r5, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f90:	a907      	add	r1, sp, #28
 8004f92:	4832      	ldr	r0, [pc, #200]	; (800505c <main+0x29c>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f94:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f96:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f98:	9607      	str	r6, [sp, #28]
  sConfigOC.Pulse = 1500;
 8004f9a:	9508      	str	r5, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f9c:	f7fd feae 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	b100      	cbz	r0, 8004fa6 <main+0x1e6>
 8004fa4:	e7fe      	b.n	8004fa4 <main+0x1e4>
  HAL_TIM_MspPostInit(&htim14);
 8004fa6:	482d      	ldr	r0, [pc, #180]	; (800505c <main+0x29c>)
  hi2c3.Init.ClockSpeed = 100000;
 8004fa8:	4f2e      	ldr	r7, [pc, #184]	; (8005064 <main+0x2a4>)
  HAL_TIM_MspPostInit(&htim14);
 8004faa:	f000 fe29 	bl	8005c00 <HAL_TIM_MspPostInit>
  hi2c3.Instance = I2C3;
 8004fae:	4b2e      	ldr	r3, [pc, #184]	; (8005068 <main+0x2a8>)
 8004fb0:	4a2e      	ldr	r2, [pc, #184]	; (800506c <main+0x2ac>)
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004fb2:	609c      	str	r4, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004fb4:	60dc      	str	r4, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004fb6:	615c      	str	r4, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004fb8:	619c      	str	r4, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004fba:	61dc      	str	r4, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004fbc:	621c      	str	r4, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004fbe:	4618      	mov	r0, r3
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004fc0:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hi2c3.Init.ClockSpeed = 100000;
 8004fc4:	e883 0084 	stmia.w	r3, {r2, r7}
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004fc8:	611c      	str	r4, [r3, #16]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004fca:	f7fc f9dd 	bl	8001388 <HAL_I2C_Init>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	b100      	cbz	r0, 8004fd4 <main+0x214>
 8004fd2:	e7fe      	b.n	8004fd2 <main+0x212>
  hi2c1.Instance = I2C1;
 8004fd4:	4b26      	ldr	r3, [pc, #152]	; (8005070 <main+0x2b0>)
 8004fd6:	4927      	ldr	r1, [pc, #156]	; (8005074 <main+0x2b4>)
  hi2c1.Init.ClockSpeed = 100000;
 8004fd8:	605f      	str	r7, [r3, #4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004fda:	4618      	mov	r0, r3
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004fdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004fde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004fe0:	611c      	str	r4, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004fe2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004fe4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004fe6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004fe8:	621a      	str	r2, [r3, #32]
  hi2c1.Instance = I2C1;
 8004fea:	6019      	str	r1, [r3, #0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004fec:	f7fc f9cc 	bl	8001388 <HAL_I2C_Init>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	b100      	cbz	r0, 8004ff6 <main+0x236>
 8004ff4:	e7fe      	b.n	8004ff4 <main+0x234>
  htim3.Instance = TIM3;
 8004ff6:	4c20      	ldr	r4, [pc, #128]	; (8005078 <main+0x2b8>)
 8004ff8:	4a20      	ldr	r2, [pc, #128]	; (800507c <main+0x2bc>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ffa:	60a0      	str	r0, [r4, #8]
  htim3.Init.Prescaler = 72;
 8004ffc:	f04f 0848 	mov.w	r8, #72	; 0x48
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005000:	4620      	mov	r0, r4
  htim3.Init.Period = 2000;
 8005002:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005006:	6123      	str	r3, [r4, #16]
  htim3.Init.Prescaler = 72;
 8005008:	e884 0104 	stmia.w	r4, {r2, r8}
  htim3.Init.Period = 2000;
 800500c:	60e7      	str	r7, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800500e:	f7fd fe27 	bl	8002c60 <HAL_TIM_PWM_Init>
 8005012:	4603      	mov	r3, r0
 8005014:	b100      	cbz	r0, 8005018 <main+0x258>
 8005016:	e7fe      	b.n	8005016 <main+0x256>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005018:	a905      	add	r1, sp, #20
 800501a:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800501c:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800501e:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005020:	f7fd fed6 	bl	8002dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8005024:	4603      	mov	r3, r0
 8005026:	b100      	cbz	r0, 800502a <main+0x26a>
 8005028:	e7fe      	b.n	8005028 <main+0x268>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800502a:	2208      	movs	r2, #8
 800502c:	a907      	add	r1, sp, #28
 800502e:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005030:	9607      	str	r6, [sp, #28]
  sConfigOC.Pulse = 1500;
 8005032:	9508      	str	r5, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005034:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005036:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005038:	f7fd fe60 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 800503c:	b300      	cbz	r0, 8005080 <main+0x2c0>
 800503e:	e7fe      	b.n	800503e <main+0x27e>
 8005040:	40023800 	.word	0x40023800
 8005044:	40020000 	.word	0x40020000
 8005048:	20004204 	.word	0x20004204
 800504c:	40020800 	.word	0x40020800
 8005050:	40020400 	.word	0x40020400
 8005054:	200041c8 	.word	0x200041c8
 8005058:	40001c00 	.word	0x40001c00
 800505c:	20004240 	.word	0x20004240
 8005060:	40002000 	.word	0x40002000
 8005064:	000186a0 	.word	0x000186a0
 8005068:	200040a8 	.word	0x200040a8
 800506c:	40005c00 	.word	0x40005c00
 8005070:	200040fc 	.word	0x200040fc
 8005074:	40005400 	.word	0x40005400
 8005078:	2000418c 	.word	0x2000418c
 800507c:	40000400 	.word	0x40000400
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005080:	220c      	movs	r2, #12
 8005082:	a907      	add	r1, sp, #28
 8005084:	4620      	mov	r0, r4
 8005086:	f7fd fe39 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 800508a:	4606      	mov	r6, r0
 800508c:	b100      	cbz	r0, 8005090 <main+0x2d0>
 800508e:	e7fe      	b.n	800508e <main+0x2ce>
  htim5.Instance = TIM5;
 8005090:	4d35      	ldr	r5, [pc, #212]	; (8005168 <main+0x3a8>)
  HAL_TIM_MspPostInit(&htim3);
 8005092:	4620      	mov	r0, r4
 8005094:	f000 fdb4 	bl	8005c00 <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8005098:	4b34      	ldr	r3, [pc, #208]	; (800516c <main+0x3ac>)
 800509a:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800509c:	4628      	mov	r0, r5
  htim5.Init.Prescaler = 72;
 800509e:	f8c5 8004 	str.w	r8, [r5, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050a2:	60ae      	str	r6, [r5, #8]
  htim5.Init.Period = 2000;
 80050a4:	60ef      	str	r7, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050a6:	612e      	str	r6, [r5, #16]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80050a8:	f7fd fdda 	bl	8002c60 <HAL_TIM_PWM_Init>
 80050ac:	4603      	mov	r3, r0
 80050ae:	b100      	cbz	r0, 80050b2 <main+0x2f2>
 80050b0:	e7fe      	b.n	80050b0 <main+0x2f0>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80050b2:	a905      	add	r1, sp, #20
 80050b4:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050b6:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050b8:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80050ba:	f7fd fe89 	bl	8002dd0 <HAL_TIMEx_MasterConfigSynchronization>
 80050be:	b100      	cbz	r0, 80050c2 <main+0x302>
 80050c0:	e7fe      	b.n	80050c0 <main+0x300>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050c2:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050c4:	2560      	movs	r5, #96	; 0x60
  sConfigOC.Pulse = 1500;
 80050c6:	f240 54dc 	movw	r4, #1500	; 0x5dc
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80050ca:	2208      	movs	r2, #8
 80050cc:	a907      	add	r1, sp, #28
 80050ce:	4826      	ldr	r0, [pc, #152]	; (8005168 <main+0x3a8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050d0:	9507      	str	r5, [sp, #28]
  sConfigOC.Pulse = 1500;
 80050d2:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050d4:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80050d6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80050d8:	f7fd fe10 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 80050dc:	b100      	cbz	r0, 80050e0 <main+0x320>
 80050de:	e7fe      	b.n	80050de <main+0x31e>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80050e0:	220c      	movs	r2, #12
 80050e2:	a907      	add	r1, sp, #28
 80050e4:	4820      	ldr	r0, [pc, #128]	; (8005168 <main+0x3a8>)
 80050e6:	f7fd fe09 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 80050ea:	4606      	mov	r6, r0
 80050ec:	b100      	cbz	r0, 80050f0 <main+0x330>
 80050ee:	e7fe      	b.n	80050ee <main+0x32e>
  HAL_TIM_MspPostInit(&htim5);
 80050f0:	481d      	ldr	r0, [pc, #116]	; (8005168 <main+0x3a8>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80050f2:	4d1f      	ldr	r5, [pc, #124]	; (8005170 <main+0x3b0>)
  HAL_TIM_MspPostInit(&htim5);
 80050f4:	f000 fd84 	bl	8005c00 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80050f8:	4631      	mov	r1, r6
 80050fa:	481e      	ldr	r0, [pc, #120]	; (8005174 <main+0x3b4>)
 80050fc:	f7fd fc4c 	bl	8002998 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8005100:	2104      	movs	r1, #4
 8005102:	481c      	ldr	r0, [pc, #112]	; (8005174 <main+0x3b4>)
 8005104:	f7fd fc48 	bl	8002998 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8005108:	2108      	movs	r1, #8
 800510a:	481a      	ldr	r0, [pc, #104]	; (8005174 <main+0x3b4>)
 800510c:	f7fd fc44 	bl	8002998 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8005110:	210c      	movs	r1, #12
 8005112:	4818      	ldr	r0, [pc, #96]	; (8005174 <main+0x3b4>)
 8005114:	f7fd fc40 	bl	8002998 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8005118:	2108      	movs	r1, #8
 800511a:	4817      	ldr	r0, [pc, #92]	; (8005178 <main+0x3b8>)
 800511c:	f7fd fc3c 	bl	8002998 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8005120:	210c      	movs	r1, #12
 8005122:	4815      	ldr	r0, [pc, #84]	; (8005178 <main+0x3b8>)
 8005124:	f7fd fc38 	bl	8002998 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8005128:	2108      	movs	r1, #8
 800512a:	480f      	ldr	r0, [pc, #60]	; (8005168 <main+0x3a8>)
 800512c:	f7fd fc34 	bl	8002998 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8005130:	210c      	movs	r1, #12
 8005132:	480d      	ldr	r0, [pc, #52]	; (8005168 <main+0x3a8>)
 8005134:	f7fd fc30 	bl	8002998 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8005138:	4631      	mov	r1, r6
 800513a:	4810      	ldr	r0, [pc, #64]	; (800517c <main+0x3bc>)
 800513c:	f7fd fc2c 	bl	8002998 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8005140:	4631      	mov	r1, r6
 8005142:	480f      	ldr	r0, [pc, #60]	; (8005180 <main+0x3c0>)
 8005144:	f7fd fc28 	bl	8002998 <HAL_TIM_PWM_Start>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8005148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800514a:	ac07      	add	r4, sp, #28
 800514c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800514e:	682b      	ldr	r3, [r5, #0]
 8005150:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005152:	4631      	mov	r1, r6
 8005154:	a807      	add	r0, sp, #28
 8005156:	f7fe ff8f 	bl	8004078 <osThreadCreate>
 800515a:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <main+0x3c4>)
 800515c:	6018      	str	r0, [r3, #0]
  riptideMain();
 800515e:	f000 fa73 	bl	8005648 <riptideMain>
  osKernelStart();
 8005162:	f7fe ff83 	bl	800406c <osKernelStart>
 8005166:	e7fe      	b.n	8005166 <main+0x3a6>
 8005168:	20004150 	.word	0x20004150
 800516c:	40000c00 	.word	0x40000c00
 8005170:	0800668c 	.word	0x0800668c
 8005174:	20004204 	.word	0x20004204
 8005178:	2000418c 	.word	0x2000418c
 800517c:	200041c8 	.word	0x200041c8
 8005180:	20004240 	.word	0x20004240
 8005184:	200040a4 	.word	0x200040a4

08005188 <writePWM>:
	  htim2.Instance->CCR1 = values[0];
 8005188:	4b10      	ldr	r3, [pc, #64]	; (80051cc <writePWM+0x44>)
	  htim5.Instance->CCR4 = values[2];
 800518a:	4911      	ldr	r1, [pc, #68]	; (80051d0 <writePWM+0x48>)
	  htim2.Instance->CCR1 = values[0];
 800518c:	681b      	ldr	r3, [r3, #0]
	  htim5.Instance->CCR4 = values[2];
 800518e:	6809      	ldr	r1, [r1, #0]
	  htim3.Instance->CCR4 = values[6];
 8005190:	4a10      	ldr	r2, [pc, #64]	; (80051d4 <writePWM+0x4c>)
void writePWM(uint16_t * values) {
 8005192:	b5f0      	push	{r4, r5, r6, r7, lr}
	  htim2.Instance->CCR1 = values[0];
 8005194:	8806      	ldrh	r6, [r0, #0]
	  htim14.Instance->CCR1 = values[7];
 8005196:	4d10      	ldr	r5, [pc, #64]	; (80051d8 <writePWM+0x50>)
	  htim13.Instance->CCR1 = values[8];
 8005198:	4c10      	ldr	r4, [pc, #64]	; (80051dc <writePWM+0x54>)
	  htim2.Instance->CCR3 = values[1];
 800519a:	8847      	ldrh	r7, [r0, #2]
	  htim2.Instance->CCR1 = values[0];
 800519c:	635e      	str	r6, [r3, #52]	; 0x34
	  htim5.Instance->CCR4 = values[2];
 800519e:	8886      	ldrh	r6, [r0, #4]
	  htim5.Instance->CCR3 = values[5];
 80051a0:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
	  htim2.Instance->CCR3 = values[1];
 80051a4:	63df      	str	r7, [r3, #60]	; 0x3c
	  htim3.Instance->CCR4 = values[6];
 80051a6:	6812      	ldr	r2, [r2, #0]
	  htim2.Instance->CCR2 = values[3];
 80051a8:	88c7      	ldrh	r7, [r0, #6]
	  htim14.Instance->CCR1 = values[7];
 80051aa:	682d      	ldr	r5, [r5, #0]
	  htim5.Instance->CCR4 = values[2];
 80051ac:	640e      	str	r6, [r1, #64]	; 0x40
	  htim13.Instance->CCR1 = values[8];
 80051ae:	6824      	ldr	r4, [r4, #0]
	  htim2.Instance->CCR4 = values[4];
 80051b0:	8906      	ldrh	r6, [r0, #8]
	  htim2.Instance->CCR2 = values[3];
 80051b2:	639f      	str	r7, [r3, #56]	; 0x38
	  htim2.Instance->CCR4 = values[4];
 80051b4:	641e      	str	r6, [r3, #64]	; 0x40
	  htim3.Instance->CCR4 = values[6];
 80051b6:	8987      	ldrh	r7, [r0, #12]
	  htim14.Instance->CCR1 = values[7];
 80051b8:	89c6      	ldrh	r6, [r0, #14]
	  htim3.Instance->CCR3 = values[9];
 80051ba:	8a43      	ldrh	r3, [r0, #18]
	  htim5.Instance->CCR3 = values[5];
 80051bc:	f8c1 e03c 	str.w	lr, [r1, #60]	; 0x3c
	  htim13.Instance->CCR1 = values[8];
 80051c0:	8a01      	ldrh	r1, [r0, #16]
	  htim3.Instance->CCR4 = values[6];
 80051c2:	6417      	str	r7, [r2, #64]	; 0x40
	  htim14.Instance->CCR1 = values[7];
 80051c4:	636e      	str	r6, [r5, #52]	; 0x34
	  htim13.Instance->CCR1 = values[8];
 80051c6:	6361      	str	r1, [r4, #52]	; 0x34
	  htim3.Instance->CCR3 = values[9];
 80051c8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80051ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051cc:	20004204 	.word	0x20004204
 80051d0:	20004150 	.word	0x20004150
 80051d4:	2000418c 	.word	0x2000418c
 80051d8:	20004240 	.word	0x20004240
 80051dc:	200041c8 	.word	0x200041c8

080051e0 <resetPWM>:
void resetPWM() {
 80051e0:	b430      	push	{r4, r5}
	  htim13.Instance->CCR1 = 1500;
 80051e2:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <resetPWM+0x34>)
	  htim14.Instance->CCR1 = 1500;
 80051e4:	4c0c      	ldr	r4, [pc, #48]	; (8005218 <resetPWM+0x38>)
	  htim2.Instance->CCR1 = 1500;
 80051e6:	4a0d      	ldr	r2, [pc, #52]	; (800521c <resetPWM+0x3c>)
	  htim5.Instance->CCR3 = 1500;
 80051e8:	480d      	ldr	r0, [pc, #52]	; (8005220 <resetPWM+0x40>)
	  htim3.Instance->CCR4 = 1500;
 80051ea:	490e      	ldr	r1, [pc, #56]	; (8005224 <resetPWM+0x44>)
	  htim2.Instance->CCR1 = 1500;
 80051ec:	6812      	ldr	r2, [r2, #0]
	  htim14.Instance->CCR1 = 1500;
 80051ee:	6825      	ldr	r5, [r4, #0]
	  htim5.Instance->CCR3 = 1500;
 80051f0:	6800      	ldr	r0, [r0, #0]
	  htim13.Instance->CCR1 = 1500;
 80051f2:	681c      	ldr	r4, [r3, #0]
	  htim3.Instance->CCR4 = 1500;
 80051f4:	6809      	ldr	r1, [r1, #0]
	  htim2.Instance->CCR1 = 1500;
 80051f6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80051fa:	6353      	str	r3, [r2, #52]	; 0x34
	  htim5.Instance->CCR3 = 1500;
 80051fc:	63c3      	str	r3, [r0, #60]	; 0x3c
	  htim5.Instance->CCR4 = 1500;
 80051fe:	6403      	str	r3, [r0, #64]	; 0x40
	  htim2.Instance->CCR2 = 1500;
 8005200:	6393      	str	r3, [r2, #56]	; 0x38
	  htim2.Instance->CCR4 = 1500;
 8005202:	6413      	str	r3, [r2, #64]	; 0x40
	  htim2.Instance->CCR3 = 1500;
 8005204:	63d3      	str	r3, [r2, #60]	; 0x3c
	  htim3.Instance->CCR4 = 1500;
 8005206:	640b      	str	r3, [r1, #64]	; 0x40
	  htim14.Instance->CCR1 = 1500;
 8005208:	636b      	str	r3, [r5, #52]	; 0x34
	  htim13.Instance->CCR1 = 1500;
 800520a:	6363      	str	r3, [r4, #52]	; 0x34
	  htim3.Instance->CCR3 = 1500;
 800520c:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 800520e:	bc30      	pop	{r4, r5}
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	200041c8 	.word	0x200041c8
 8005218:	20004240 	.word	0x20004240
 800521c:	20004204 	.word	0x20004204
 8005220:	20004150 	.word	0x20004150
 8005224:	2000418c 	.word	0x2000418c

08005228 <getI2CRef>:
}
 8005228:	4800      	ldr	r0, [pc, #0]	; (800522c <getI2CRef+0x4>)
 800522a:	4770      	bx	lr
 800522c:	200040fc 	.word	0x200040fc

08005230 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005230:	6802      	ldr	r2, [r0, #0]
 8005232:	4b03      	ldr	r3, [pc, #12]	; (8005240 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8005234:	429a      	cmp	r2, r3
 8005236:	d000      	beq.n	800523a <HAL_TIM_PeriodElapsedCallback+0xa>
 8005238:	4770      	bx	lr
    HAL_IncTick();
 800523a:	f7fb bddd 	b.w	8000df8 <HAL_IncTick>
 800523e:	bf00      	nop
 8005240:	40010000 	.word	0x40010000

08005244 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8005244:	e7fe      	b.n	8005244 <_Error_Handler>
 8005246:	bf00      	nop

08005248 <MessageCheck>:
 *          char* end       -the characters that are the last
 *          int compNumber  -the number of characters that start and end the message
 *          uint8_t* Buf    -the message sent
 *          uint32_t *Len   -the length of the message
 */
bool MessageCheck(char* start, char* end, int compNumber,uint8_t* Buf, uint32_t *Len ){
 8005248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800524c:	9e06      	ldr	r6, [sp, #24]
    if (*Len != 48 || HAL_GPIO_ReadPin(KillSwitch_GPIO_Port, KillSwitch_Pin) == GPIO_PIN_RESET) {
 800524e:	6835      	ldr	r5, [r6, #0]
 8005250:	2d30      	cmp	r5, #48	; 0x30
 8005252:	d002      	beq.n	800525a <MessageCheck+0x12>
    	return false;
 8005254:	2000      	movs	r0, #0
 8005256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800525a:	4688      	mov	r8, r1
 800525c:	4607      	mov	r7, r0
    if (*Len != 48 || HAL_GPIO_ReadPin(KillSwitch_GPIO_Port, KillSwitch_Pin) == GPIO_PIN_RESET) {
 800525e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005262:	4812      	ldr	r0, [pc, #72]	; (80052ac <MessageCheck+0x64>)
 8005264:	461c      	mov	r4, r3
 8005266:	4615      	mov	r5, r2
 8005268:	f7fb ff76 	bl	8001158 <HAL_GPIO_ReadPin>
 800526c:	2800      	cmp	r0, #0
 800526e:	d0f1      	beq.n	8005254 <MessageCheck+0xc>
    }
	int i = 0;
    while( i < compNumber ){
 8005270:	2d00      	cmp	r5, #0
 8005272:	dd18      	ble.n	80052a6 <MessageCheck+0x5e>
        if (Buf[i] == *start && Buf[*Len - (1+i)] == *end){
 8005274:	783f      	ldrb	r7, [r7, #0]
 8005276:	7823      	ldrb	r3, [r4, #0]
 8005278:	42bb      	cmp	r3, r7
 800527a:	d1eb      	bne.n	8005254 <MessageCheck+0xc>
 800527c:	6833      	ldr	r3, [r6, #0]
 800527e:	f898 2000 	ldrb.w	r2, [r8]
 8005282:	3b01      	subs	r3, #1
 8005284:	18e1      	adds	r1, r4, r3
 8005286:	5ce6      	ldrb	r6, [r4, r3]
 8005288:	42b2      	cmp	r2, r6
 800528a:	d1e3      	bne.n	8005254 <MessageCheck+0xc>
 800528c:	1960      	adds	r0, r4, r5
 800528e:	1c63      	adds	r3, r4, #1
 8005290:	e007      	b.n	80052a2 <MessageCheck+0x5a>
 8005292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005296:	4297      	cmp	r7, r2
 8005298:	d1dc      	bne.n	8005254 <MessageCheck+0xc>
 800529a:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
 800529e:	42b2      	cmp	r2, r6
 80052a0:	d1d8      	bne.n	8005254 <MessageCheck+0xc>
    while( i < compNumber ){
 80052a2:	4283      	cmp	r3, r0
 80052a4:	d1f5      	bne.n	8005292 <MessageCheck+0x4a>
        }
        else {
            return false;
        }
    }
    return true;
 80052a6:	2001      	movs	r0, #1

}
 80052a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052ac:	40020800 	.word	0x40020800

080052b0 <parse>:
  }

  return (USBD_OK);
}

void parse(uint8_t * raw, uint16_t * values) {
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	4604      	mov	r4, r0
 80052b4:	b082      	sub	sp, #8
 80052b6:	1e8d      	subs	r5, r1, #2
 80052b8:	f100 0628 	add.w	r6, r0, #40	; 0x28
	uint8_t string[4];
	for (int i = 1; i <= 10; i++) {
		string[0] = raw[4 * i];
 80052bc:	7920      	ldrb	r0, [r4, #4]
		string[1] = raw[4 * i + 1];
 80052be:	7961      	ldrb	r1, [r4, #5]
		string[2] = raw[4 * i + 2];
 80052c0:	79a2      	ldrb	r2, [r4, #6]
		string[3] = raw[4 * i + 3];
 80052c2:	79e3      	ldrb	r3, [r4, #7]
		string[0] = raw[4 * i];
 80052c4:	f88d 0004 	strb.w	r0, [sp, #4]
		values[i - 1] = atoi(string);
 80052c8:	a801      	add	r0, sp, #4
		string[1] = raw[4 * i + 1];
 80052ca:	f88d 1005 	strb.w	r1, [sp, #5]
		string[2] = raw[4 * i + 2];
 80052ce:	f88d 2006 	strb.w	r2, [sp, #6]
		string[3] = raw[4 * i + 3];
 80052d2:	f88d 3007 	strb.w	r3, [sp, #7]
		values[i - 1] = atoi(string);
 80052d6:	f000 ffa6 	bl	8006226 <atoi>
 80052da:	3404      	adds	r4, #4
	for (int i = 1; i <= 10; i++) {
 80052dc:	42a6      	cmp	r6, r4
		values[i - 1] = atoi(string);
 80052de:	f825 0f02 	strh.w	r0, [r5, #2]!
	for (int i = 1; i <= 10; i++) {
 80052e2:	d1eb      	bne.n	80052bc <parse+0xc>
	}
}
 80052e4:	b002      	add	sp, #8
 80052e6:	bd70      	pop	{r4, r5, r6, pc}

080052e8 <Riptide_CDC_Receive>:
int8_t Riptide_CDC_Receive(uint8_t* Buf, uint32_t *Len, uint16_t * values){
 80052e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t Successmsg[] = "thrust hell yeah\n";
 80052ec:	4f1c      	ldr	r7, [pc, #112]	; (8005360 <Riptide_CDC_Receive+0x78>)
  uint8_t failmsg[] = "not good enough kid\n";
 80052ee:	4d1d      	ldr	r5, [pc, #116]	; (8005364 <Riptide_CDC_Receive+0x7c>)
int8_t Riptide_CDC_Receive(uint8_t* Buf, uint32_t *Len, uint16_t * values){
 80052f0:	4680      	mov	r8, r0
 80052f2:	468a      	mov	sl, r1
 80052f4:	4691      	mov	r9, r2
  uint8_t Successmsg[] = "thrust hell yeah\n";
 80052f6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
int8_t Riptide_CDC_Receive(uint8_t* Buf, uint32_t *Len, uint16_t * values){
 80052f8:	b08e      	sub	sp, #56	; 0x38
  uint8_t Successmsg[] = "thrust hell yeah\n";
 80052fa:	ae03      	add	r6, sp, #12
 80052fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  uint8_t failmsg[] = "not good enough kid\n";
 80052fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005300:	ac08      	add	r4, sp, #32
 8005302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005304:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005308:	f844 0b04 	str.w	r0, [r4], #4
  uint8_t Successmsg[] = "thrust hell yeah\n";
 800530c:	683b      	ldr	r3, [r7, #0]
  uint8_t failmsg[] = "not good enough kid\n";
 800530e:	7021      	strb	r1, [r4, #0]
  HAL_GPIO_TogglePin(PC5_LED_GPIO_Port, PC5_LED_Pin);
 8005310:	4815      	ldr	r0, [pc, #84]	; (8005368 <Riptide_CDC_Receive+0x80>)
  uint8_t Successmsg[] = "thrust hell yeah\n";
 8005312:	8033      	strh	r3, [r6, #0]
  HAL_GPIO_TogglePin(PC5_LED_GPIO_Port, PC5_LED_Pin);
 8005314:	2120      	movs	r1, #32
 8005316:	f7fb ff29 	bl	800116c <HAL_GPIO_TogglePin>
  thrustsuccess = MessageCheck(thrustst, thrustend, thrustComp, Buf, Len);
 800531a:	f8cd a000 	str.w	sl, [sp]
 800531e:	4643      	mov	r3, r8
 8005320:	2204      	movs	r2, #4
 8005322:	4912      	ldr	r1, [pc, #72]	; (800536c <Riptide_CDC_Receive+0x84>)
 8005324:	4812      	ldr	r0, [pc, #72]	; (8005370 <Riptide_CDC_Receive+0x88>)
 8005326:	f7ff ff8f 	bl	8005248 <MessageCheck>
  if (thrustsuccess){
 800532a:	b960      	cbnz	r0, 8005346 <Riptide_CDC_Receive+0x5e>
 800532c:	4604      	mov	r4, r0
	resetPWM();
 800532e:	f7ff ff57 	bl	80051e0 <resetPWM>
    CDC_Transmit_HS(failmsg, sizeof(failmsg));
 8005332:	a808      	add	r0, sp, #32
 8005334:	2115      	movs	r1, #21
 8005336:	f000 fd8f 	bl	8005e58 <CDC_Transmit_HS>
}
 800533a:	2000      	movs	r0, #0
    *values = NULL;
 800533c:	f8a9 4000 	strh.w	r4, [r9]
}
 8005340:	b00e      	add	sp, #56	; 0x38
 8005342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    CDC_Transmit_HS(Successmsg, sizeof(Successmsg));
 8005346:	a803      	add	r0, sp, #12
 8005348:	2112      	movs	r1, #18
 800534a:	f000 fd85 	bl	8005e58 <CDC_Transmit_HS>
    parse(Buf, values);
 800534e:	4640      	mov	r0, r8
 8005350:	4649      	mov	r1, r9
 8005352:	f7ff ffad 	bl	80052b0 <parse>
}
 8005356:	2000      	movs	r0, #0
 8005358:	b00e      	add	sp, #56	; 0x38
 800535a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800535e:	bf00      	nop
 8005360:	080066bc 	.word	0x080066bc
 8005364:	080066d0 	.word	0x080066d0
 8005368:	40020800 	.word	0x40020800
 800536c:	080066b4 	.word	0x080066b4
 8005370:	080066b8 	.word	0x080066b8

08005374 <crc4>:

// From the Blue Robotics data sheet, cyclic redundancy check
uint8_t crc4(uint16_t n_prom[]) {
	uint16_t n_rem = 0;

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
 8005374:	8803      	ldrh	r3, [r0, #0]
	n_prom[7] = 0;
 8005376:	2100      	movs	r1, #0
	n_prom[0] = ((n_prom[0]) & 0x0FFF);
 8005378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800537c:	8003      	strh	r3, [r0, #0]
	n_prom[7] = 0;
 800537e:	81c1      	strh	r1, [r0, #14]
	uint16_t n_rem = 0;
 8005380:	460b      	mov	r3, r1
 8005382:	b2ca      	uxtb	r2, r1

	for ( uint8_t i = 0 ; i < 16; i++ ) {
		if ( i%2 == 1 ) {
 8005384:	f012 0f01 	tst.w	r2, #1
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
 8005388:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800538c:	bf15      	itete	ne
 800538e:	f810 2012 	ldrbne.w	r2, [r0, r2, lsl #1]
		} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
 8005392:	f830 2012 	ldrheq.w	r2, [r0, r2, lsl #1]
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
 8005396:	4053      	eorne	r3, r2
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
 8005398:	ea83 2312 	eoreq.w	r3, r3, r2, lsr #8
	uint16_t n_rem = 0;
 800539c:	2208      	movs	r2, #8
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
			if ( n_rem & 0x8000 ) {
 800539e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
				n_rem = (n_rem << 1) ^ 0x3000;
 80053a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80053a6:	bf18      	it	ne
 80053a8:	f483 5340 	eorne.w	r3, r3, #12288	; 0x3000
 80053ac:	f102 32ff 	add.w	r2, r2, #4294967295
 80053b0:	bf18      	it	ne
 80053b2:	b21b      	sxthne	r3, r3
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
 80053b4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
			} else {
				n_rem = (n_rem << 1);
 80053b8:	b29b      	uxth	r3, r3
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
 80053ba:	d1f0      	bne.n	800539e <crc4+0x2a>
 80053bc:	3101      	adds	r1, #1
	for ( uint8_t i = 0 ; i < 16; i++ ) {
 80053be:	2910      	cmp	r1, #16
 80053c0:	d1df      	bne.n	8005382 <crc4+0xe>
	}

	n_rem = ((n_rem >> 12) & 0x000F);

	return n_rem ^ 0x00;
}
 80053c2:	0b18      	lsrs	r0, r3, #12
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop

080053c8 <calculate>:

void calculate(uint32_t D1, uint32_t D2, uint16_t C[8], uint32_t * TEMP, uint32_t * P) {
 80053c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t Ti = 0;
	int64_t OFF2 = 0;
	int64_t SENS2 = 0;

	// Terms called
	dT = D2 - (uint32_t) (C[5])*256l;
 80053cc:	8954      	ldrh	r4, [r2, #10]
	SENS = (int64_t) (C[1])*32768l+((int64_t) (C[3])*dT)/256l;
 80053ce:	f8b2 8006 	ldrh.w	r8, [r2, #6]
 80053d2:	8857      	ldrh	r7, [r2, #2]
	dT = D2 - (uint32_t) (C[5])*256l;
 80053d4:	eba1 2104 	sub.w	r1, r1, r4, lsl #8
	SENS = (int64_t) (C[1])*32768l+((int64_t) (C[3])*dT)/256l;
 80053d8:	fb88 8901 	smull	r8, r9, r8, r1
void calculate(uint32_t D1, uint32_t D2, uint16_t C[8], uint32_t * TEMP, uint32_t * P) {
 80053dc:	b085      	sub	sp, #20
 80053de:	469e      	mov	lr, r3
	SENS = (int64_t) (C[1])*32768l+((int64_t) (C[3])*dT)/256l;
 80053e0:	17cc      	asrs	r4, r1, #31
 80053e2:	460b      	mov	r3, r1
 80053e4:	f1b8 0f00 	cmp.w	r8, #0
 80053e8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80053ec:	f179 0300 	sbcs.w	r3, r9, #0
 80053f0:	f2c0 809f 	blt.w	8005532 <calculate+0x16a>
	OFF = (int64_t) (C[2])*65536l+((int64_t) (C[4])*dT)/128l;
 80053f4:	8914      	ldrh	r4, [r2, #8]
	SENS = (int64_t) (C[1])*32768l+((int64_t) (C[3])*dT)/256l;
 80053f6:	ea4f 2a18 	mov.w	sl, r8, lsr #8
	OFF = (int64_t) (C[2])*65536l+((int64_t) (C[4])*dT)/128l;
 80053fa:	fb84 4501 	smull	r4, r5, r4, r1
	SENS = (int64_t) (C[1])*32768l+((int64_t) (C[3])*dT)/256l;
 80053fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005402:	ea4a 6a09 	orr.w	sl, sl, r9, lsl #24
 8005406:	ea4f 2b29 	mov.w	fp, r9, asr #8
	OFF = (int64_t) (C[2])*65536l+((int64_t) (C[4])*dT)/128l;
 800540a:	2c00      	cmp	r4, #0
	SENS = (int64_t) (C[1])*32768l+((int64_t) (C[3])*dT)/256l;
 800540c:	fbe7 ab03 	umlal	sl, fp, r7, r3
	OFF = (int64_t) (C[2])*65536l+((int64_t) (C[4])*dT)/128l;
 8005410:	f175 0300 	sbcs.w	r3, r5, #0
	SENS = (int64_t) (C[1])*32768l+((int64_t) (C[3])*dT)/256l;
 8005414:	e9cd ab00 	strd	sl, fp, [sp]
	OFF = (int64_t) (C[2])*65536l+((int64_t) (C[4])*dT)/128l;
 8005418:	f2c0 8087 	blt.w	800552a <calculate+0x162>
 800541c:	f8b2 a004 	ldrh.w	sl, [r2, #4]
 8005420:	ea4f 18d4 	mov.w	r8, r4, lsr #7
	*P = (D1*SENS/(2097152l)-OFF)/(8192l);

	// Temp conversion
	*TEMP = 2000l + (int64_t) (dT)*C[6]/8388608LL;
 8005424:	8994      	ldrh	r4, [r2, #12]
	OFF = (int64_t) (C[2])*65536l+((int64_t) (C[4])*dT)/128l;
 8005426:	ea48 6845 	orr.w	r8, r8, r5, lsl #25
 800542a:	ea4f 420a 	mov.w	r2, sl, lsl #16
 800542e:	ea4f 431a 	mov.w	r3, sl, lsr #16
 8005432:	ea4f 19e5 	mov.w	r9, r5, asr #7
 8005436:	eb18 0802 	adds.w	r8, r8, r2
	*TEMP = 2000l + (int64_t) (dT)*C[6]/8388608LL;
 800543a:	fb84 4501 	smull	r4, r5, r4, r1
	OFF = (int64_t) (C[2])*65536l+((int64_t) (C[4])*dT)/128l;
 800543e:	eb49 0903 	adc.w	r9, r9, r3
	*TEMP = 2000l + (int64_t) (dT)*C[6]/8388608LL;
 8005442:	2c00      	cmp	r4, #0
 8005444:	f175 0300 	sbcs.w	r3, r5, #0
 8005448:	db6a      	blt.n	8005520 <calculate+0x158>
 800544a:	0de4      	lsrs	r4, r4, #23
 800544c:	ea44 2445 	orr.w	r4, r4, r5, lsl #9

	//Second order compensation
	if((*TEMP/100)<20){         //Low temp
 8005450:	f514 65fa 	adds.w	r5, r4, #2000	; 0x7d0
 8005454:	d230      	bcs.n	80054b8 <calculate+0xf0>
			SENSi = SENSi+4*(*TEMP+1500l)*(*TEMP+1500l);
		}
	}
	else if((*TEMP/100)>=20){    //High temp
		Ti = 2*(dT*dT)/(137438953472LL);
		OFFi = (1*(*TEMP-2000)*(*TEMP-2000))/16;
 8005456:	fb04 f404 	mul.w	r4, r4, r4
 800545a:	0924      	lsrs	r4, r4, #4
 800545c:	2100      	movs	r1, #0
 800545e:	f04f 0a00 	mov.w	sl, #0
 8005462:	f04f 0b00 	mov.w	fp, #0
		SENSi = 0;
	}

	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
	SENS2 = SENS-SENSi;
 8005466:	e9dd 2300 	ldrd	r2, r3, [sp]
 800546a:	ebb2 020a 	subs.w	r2, r2, sl
 800546e:	eb63 030b 	sbc.w	r3, r3, fp
 8005472:	469b      	mov	fp, r3

	*TEMP = (*TEMP-Ti);
	*P = (((D1*SENS2)/2097152l-OFF2)/8192l)/10;
 8005474:	fba2 2300 	umull	r2, r3, r2, r0
 8005478:	fb00 330b 	mla	r3, r0, fp, r3
 800547c:	2a00      	cmp	r2, #0
	*TEMP = (*TEMP-Ti);
 800547e:	eba5 0501 	sub.w	r5, r5, r1
	*P = (((D1*SENS2)/2097152l-OFF2)/8192l)/10;
 8005482:	f173 0100 	sbcs.w	r1, r3, #0
	*TEMP = (*TEMP-Ti);
 8005486:	f8ce 5000 	str.w	r5, [lr]
	*P = (((D1*SENS2)/2097152l-OFF2)/8192l)/10;
 800548a:	db57      	blt.n	800553c <calculate+0x174>
 800548c:	0d50      	lsrs	r0, r2, #21
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
 800548e:	ebb8 0804 	subs.w	r8, r8, r4
	*P = (((D1*SENS2)/2097152l-OFF2)/8192l)/10;
 8005492:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
 8005496:	eb69 79e4 	sbc.w	r9, r9, r4, asr #31
	*P = (((D1*SENS2)/2097152l-OFF2)/8192l)/10;
 800549a:	1559      	asrs	r1, r3, #21
 800549c:	ebb0 0008 	subs.w	r0, r0, r8
 80054a0:	eb61 0109 	sbc.w	r1, r1, r9
 80054a4:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 80054a8:	2300      	movs	r3, #0
 80054aa:	f7fb fab3 	bl	8000a14 <__aeabi_ldivmod>
 80054ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054b0:	6018      	str	r0, [r3, #0]

}
 80054b2:	b005      	add	sp, #20
 80054b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Ti = (3*(int64_t)(dT)*(int64_t)(dT))/(8589934592LL);
 80054b8:	9e03      	ldr	r6, [sp, #12]
 80054ba:	2203      	movs	r2, #3
 80054bc:	fb81 2302 	smull	r2, r3, r1, r2
 80054c0:	fb02 fb06 	mul.w	fp, r2, r6
 80054c4:	fb01 ba03 	mla	sl, r1, r3, fp
		SENSi = (5*(*TEMP-2000)*(*TEMP-2000))/8;
 80054c8:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
		Ti = (3*(int64_t)(dT)*(int64_t)(dT))/(8589934592LL);
 80054cc:	fba2 2301 	umull	r2, r3, r2, r1
		OFFi = (3*(*TEMP-2000)*(*TEMP-2000))/2;
 80054d0:	eb05 0b45 	add.w	fp, r5, r5, lsl #1
			OFFi = OFFi+7*(*TEMP+1500l)*(*TEMP+1500l);
 80054d4:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
		SENSi = (5*(*TEMP-2000)*(*TEMP-2000))/8;
 80054d8:	f5ac 5c1c 	sub.w	ip, ip, #9984	; 0x2700
			OFFi = OFFi+7*(*TEMP+1500l)*(*TEMP+1500l);
 80054dc:	f501 5124 	add.w	r1, r1, #10496	; 0x2900
		OFFi = (3*(*TEMP-2000)*(*TEMP-2000))/2;
 80054e0:	f5ab 5bbb 	sub.w	fp, fp, #5984	; 0x1760
			OFFi = OFFi+7*(*TEMP+1500l)*(*TEMP+1500l);
 80054e4:	f604 56ac 	addw	r6, r4, #3500	; 0xdac
		OFFi = (3*(*TEMP-2000)*(*TEMP-2000))/2;
 80054e8:	f1ab 0b10 	sub.w	fp, fp, #16
		SENSi = (5*(*TEMP-2000)*(*TEMP-2000))/8;
 80054ec:	f1ac 0c10 	sub.w	ip, ip, #16
			OFFi = OFFi+7*(*TEMP+1500l)*(*TEMP+1500l);
 80054f0:	3104      	adds	r1, #4
		Ti = (3*(int64_t)(dT)*(int64_t)(dT))/(8589934592LL);
 80054f2:	4453      	add	r3, sl
		SENSi = (5*(*TEMP-2000)*(*TEMP-2000))/8;
 80054f4:	fb04 fc0c 	mul.w	ip, r4, ip
			OFFi = OFFi+7*(*TEMP+1500l)*(*TEMP+1500l);
 80054f8:	fb06 f101 	mul.w	r1, r6, r1
		OFFi = (3*(*TEMP-2000)*(*TEMP-2000))/2;
 80054fc:	fb04 f40b 	mul.w	r4, r4, fp
			SENSi = SENSi+4*(*TEMP+1500l)*(*TEMP+1500l);
 8005500:	fb06 fa06 	mul.w	sl, r6, r6
		Ti = (3*(int64_t)(dT)*(int64_t)(dT))/(8589934592LL);
 8005504:	2a00      	cmp	r2, #0
			SENSi = SENSi+4*(*TEMP+1500l)*(*TEMP+1500l);
 8005506:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
			OFFi = OFFi+7*(*TEMP+1500l)*(*TEMP+1500l);
 800550a:	eb01 0454 	add.w	r4, r1, r4, lsr #1
		Ti = (3*(int64_t)(dT)*(int64_t)(dT))/(8589934592LL);
 800550e:	f173 0100 	sbcs.w	r1, r3, #0
			SENSi = SENSi+4*(*TEMP+1500l)*(*TEMP+1500l);
 8005512:	eb0a 0adc 	add.w	sl, sl, ip, lsr #3
 8005516:	f04f 0b00 	mov.w	fp, #0
		Ti = (3*(int64_t)(dT)*(int64_t)(dT))/(8589934592LL);
 800551a:	db14      	blt.n	8005546 <calculate+0x17e>
 800551c:	1059      	asrs	r1, r3, #1
 800551e:	e7a2      	b.n	8005466 <calculate+0x9e>
	*TEMP = 2000l + (int64_t) (dT)*C[6]/8388608LL;
 8005520:	4a0b      	ldr	r2, [pc, #44]	; (8005550 <calculate+0x188>)
 8005522:	2300      	movs	r3, #0
 8005524:	18a4      	adds	r4, r4, r2
 8005526:	415d      	adcs	r5, r3
 8005528:	e78f      	b.n	800544a <calculate+0x82>
	OFF = (int64_t) (C[2])*65536l+((int64_t) (C[4])*dT)/128l;
 800552a:	347f      	adds	r4, #127	; 0x7f
 800552c:	f145 0500 	adc.w	r5, r5, #0
 8005530:	e774      	b.n	800541c <calculate+0x54>
	SENS = (int64_t) (C[1])*32768l+((int64_t) (C[3])*dT)/256l;
 8005532:	f118 08ff 	adds.w	r8, r8, #255	; 0xff
 8005536:	f149 0900 	adc.w	r9, r9, #0
 800553a:	e75b      	b.n	80053f4 <calculate+0x2c>
	*P = (((D1*SENS2)/2097152l-OFF2)/8192l)/10;
 800553c:	4805      	ldr	r0, [pc, #20]	; (8005554 <calculate+0x18c>)
 800553e:	2100      	movs	r1, #0
 8005540:	1812      	adds	r2, r2, r0
 8005542:	414b      	adcs	r3, r1
 8005544:	e7a2      	b.n	800548c <calculate+0xc4>
		Ti = (3*(int64_t)(dT)*(int64_t)(dT))/(8589934592LL);
 8005546:	f112 32ff 	adds.w	r2, r2, #4294967295
 800554a:	f143 0301 	adc.w	r3, r3, #1
 800554e:	e7e5      	b.n	800551c <calculate+0x154>
 8005550:	007fffff 	.word	0x007fffff
 8005554:	001fffff 	.word	0x001fffff

08005558 <convert>:

void convert(uint32_t * temp, uint32_t * press, float * temperature, float * pressure, float * depth, uint16_t fluidDensity) {
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*temperature = *temp / 100.0;
 800555a:	6800      	ldr	r0, [r0, #0]
void convert(uint32_t * temp, uint32_t * press, float * temperature, float * pressure, float * depth, uint16_t fluidDensity) {
 800555c:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 8005560:	4617      	mov	r7, r2
 8005562:	461e      	mov	r6, r3
 8005564:	460c      	mov	r4, r1
	*temperature = *temp / 100.0;
 8005566:	f7fa ff7d 	bl	8000464 <__aeabi_ui2d>
 800556a:	2200      	movs	r2, #0
 800556c:	4b1a      	ldr	r3, [pc, #104]	; (80055d8 <convert+0x80>)
 800556e:	f7fb f919 	bl	80007a4 <__aeabi_ddiv>
 8005572:	f7fb f9ff 	bl	8000974 <__aeabi_d2f>
 8005576:	6038      	str	r0, [r7, #0]
	*pressure = *press * 1.0;
 8005578:	6820      	ldr	r0, [r4, #0]
void convert(uint32_t * temp, uint32_t * press, float * temperature, float * pressure, float * depth, uint16_t fluidDensity) {
 800557a:	9c06      	ldr	r4, [sp, #24]
	*pressure = *press * 1.0;
 800557c:	f7fa ff72 	bl	8000464 <__aeabi_ui2d>
 8005580:	f7fb f9f8 	bl	8000974 <__aeabi_d2f>
 8005584:	6030      	str	r0, [r6, #0]
	*depth = ((100.0 * *pressure) - 101300)/(fluidDensity * 9.80665);
 8005586:	f7fa ff8f 	bl	80004a8 <__aeabi_f2d>
 800558a:	2200      	movs	r2, #0
 800558c:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <convert+0x80>)
 800558e:	f7fa ffdf 	bl	8000550 <__aeabi_dmul>
 8005592:	a30d      	add	r3, pc, #52	; (adr r3, 80055c8 <convert+0x70>)
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	f7fa fe26 	bl	80001e8 <__aeabi_dsub>
 800559c:	4606      	mov	r6, r0
 800559e:	4628      	mov	r0, r5
 80055a0:	460f      	mov	r7, r1
 80055a2:	f7fa ff6f 	bl	8000484 <__aeabi_i2d>
 80055a6:	a30a      	add	r3, pc, #40	; (adr r3, 80055d0 <convert+0x78>)
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	f7fa ffd0 	bl	8000550 <__aeabi_dmul>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4630      	mov	r0, r6
 80055b6:	4639      	mov	r1, r7
 80055b8:	f7fb f8f4 	bl	80007a4 <__aeabi_ddiv>
 80055bc:	f7fb f9da 	bl	8000974 <__aeabi_d2f>
 80055c0:	6020      	str	r0, [r4, #0]
 80055c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055c4:	f3af 8000 	nop.w
 80055c8:	00000000 	.word	0x00000000
 80055cc:	40f8bb40 	.word	0x40f8bb40
 80055d0:	3a92a305 	.word	0x3a92a305
 80055d4:	40239d01 	.word	0x40239d01
 80055d8:	40590000 	.word	0x40590000

080055dc <fToString>:
}

void fToString(uint8_t * dest, float toConvert) {
 80055dc:	b510      	push	{r4, lr}
 80055de:	ed2d 8b02 	vpush	{d8}
	uint8_t decimals[7];
	itoa(toConvert, dest, 10);
 80055e2:	eefd 8ac0 	vcvt.s32.f32	s17, s0
void fToString(uint8_t * dest, float toConvert) {
 80055e6:	b084      	sub	sp, #16
 80055e8:	4604      	mov	r4, r0
	itoa(toConvert, dest, 10);
 80055ea:	4601      	mov	r1, r0
 80055ec:	220a      	movs	r2, #10
 80055ee:	ee18 0a90 	vmov	r0, s17
void fToString(uint8_t * dest, float toConvert) {
 80055f2:	eeb0 8a40 	vmov.f32	s16, s0
	itoa(toConvert, dest, 10);
 80055f6:	f000 fe57 	bl	80062a8 <itoa>
	strcat(dest, ".");
	int trunked = (int) toConvert;
	uint16_t i = (toConvert - trunked) * 100000;
 80055fa:	eef8 8ae8 	vcvt.f32.s32	s17, s17
	strcat(dest, ".");
 80055fe:	4620      	mov	r0, r4
 8005600:	f7fa fde6 	bl	80001d0 <strlen>
	uint16_t i = (toConvert - trunked) * 100000;
 8005604:	ee38 8a68 	vsub.f32	s16, s16, s17
 8005608:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8005640 <fToString+0x64>
	strcat(dest, ".");
 800560c:	4b0d      	ldr	r3, [pc, #52]	; (8005644 <fToString+0x68>)
	uint16_t i = (toConvert - trunked) * 100000;
 800560e:	ee28 8a00 	vmul.f32	s16, s16, s0
	strcat(dest, ".");
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	5223      	strh	r3, [r4, r0]
	uint16_t i = (toConvert - trunked) * 100000;
 8005616:	eefc 7ac8 	vcvt.u32.f32	s15, s16
	itoa(i, decimals, 10);
 800561a:	a902      	add	r1, sp, #8
	uint16_t i = (toConvert - trunked) * 100000;
 800561c:	edcd 7a01 	vstr	s15, [sp, #4]
	itoa(i, decimals, 10);
 8005620:	220a      	movs	r2, #10
 8005622:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8005626:	f000 fe3f 	bl	80062a8 <itoa>
	strcat(dest, decimals);
 800562a:	a902      	add	r1, sp, #8
 800562c:	4620      	mov	r0, r4
 800562e:	f000 ff09 	bl	8006444 <strcat>
	dest[7] = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	71e3      	strb	r3, [r4, #7]
}
 8005636:	b004      	add	sp, #16
 8005638:	ecbd 8b02 	vpop	{d8}
 800563c:	bd10      	pop	{r4, pc}
 800563e:	bf00      	nop
 8005640:	47c35000 	.word	0x47c35000
 8005644:	080066e8 	.word	0x080066e8

08005648 <riptideMain>:
xTaskHandle xHeartbeat;
xTaskHandle xSwitchMonitor;
xTaskHandle xKillSwitch;
xTaskHandle xDepthSensor;

void riptideMain(){
 8005648:	b510      	push	{r4, lr}
 800564a:	b082      	sub	sp, #8
    //create tasks here
    xTaskCreate( vHeartbeat, "Heartbeat", configMINIMAL_STACK_SIZE, NULL, 1, &xHeartbeat);
 800564c:	2401      	movs	r4, #1
 800564e:	4b13      	ldr	r3, [pc, #76]	; (800569c <riptideMain+0x54>)
 8005650:	9301      	str	r3, [sp, #4]
 8005652:	9400      	str	r4, [sp, #0]
 8005654:	2300      	movs	r3, #0
 8005656:	2280      	movs	r2, #128	; 0x80
 8005658:	4911      	ldr	r1, [pc, #68]	; (80056a0 <riptideMain+0x58>)
 800565a:	4812      	ldr	r0, [pc, #72]	; (80056a4 <riptideMain+0x5c>)
 800565c:	f7ff f836 	bl	80046cc <xTaskCreate>
    xTaskCreate( vSwitchMonitor, "SwitchMonitor", configMINIMAL_STACK_SIZE, NULL, 1, &xSwitchMonitor);
 8005660:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <riptideMain+0x60>)
 8005662:	9301      	str	r3, [sp, #4]
 8005664:	9400      	str	r4, [sp, #0]
 8005666:	2300      	movs	r3, #0
 8005668:	2280      	movs	r2, #128	; 0x80
 800566a:	4910      	ldr	r1, [pc, #64]	; (80056ac <riptideMain+0x64>)
 800566c:	4810      	ldr	r0, [pc, #64]	; (80056b0 <riptideMain+0x68>)
 800566e:	f7ff f82d 	bl	80046cc <xTaskCreate>
    xTaskCreate( vKillSwitchMonitor, "KillSwitch", configMINIMAL_STACK_SIZE, NULL, 1, &xKillSwitch);
 8005672:	4b10      	ldr	r3, [pc, #64]	; (80056b4 <riptideMain+0x6c>)
 8005674:	9301      	str	r3, [sp, #4]
 8005676:	9400      	str	r4, [sp, #0]
 8005678:	2300      	movs	r3, #0
 800567a:	2280      	movs	r2, #128	; 0x80
 800567c:	490e      	ldr	r1, [pc, #56]	; (80056b8 <riptideMain+0x70>)
 800567e:	480f      	ldr	r0, [pc, #60]	; (80056bc <riptideMain+0x74>)
 8005680:	f7ff f824 	bl	80046cc <xTaskCreate>
    xTaskCreate( vDepthSensor, "DepthSensor", configMINIMAL_STACK_SIZE, NULL, 1, &xDepthSensor);
 8005684:	4b0e      	ldr	r3, [pc, #56]	; (80056c0 <riptideMain+0x78>)
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	9400      	str	r4, [sp, #0]
 800568a:	2300      	movs	r3, #0
 800568c:	2280      	movs	r2, #128	; 0x80
 800568e:	490d      	ldr	r1, [pc, #52]	; (80056c4 <riptideMain+0x7c>)
 8005690:	480d      	ldr	r0, [pc, #52]	; (80056c8 <riptideMain+0x80>)
 8005692:	f7ff f81b 	bl	80046cc <xTaskCreate>
    //create mutexes here
    //create semaphores here
    return;
}
 8005696:	b002      	add	sp, #8
 8005698:	bd10      	pop	{r4, pc}
 800569a:	bf00      	nop
 800569c:	2000427c 	.word	0x2000427c
 80056a0:	080066ec 	.word	0x080066ec
 80056a4:	080056cd 	.word	0x080056cd
 80056a8:	20004288 	.word	0x20004288
 80056ac:	080066f8 	.word	0x080066f8
 80056b0:	08005725 	.word	0x08005725
 80056b4:	20004280 	.word	0x20004280
 80056b8:	08006708 	.word	0x08006708
 80056bc:	080056e9 	.word	0x080056e9
 80056c0:	20004284 	.word	0x20004284
 80056c4:	08006714 	.word	0x08006714
 80056c8:	080057d5 	.word	0x080057d5

080056cc <vHeartbeat>:
#include "riptideFunctions.h"
#include "riptideThreads.h"
//#include "../../Inc/main.h"
//#include "../../Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"

void vHeartbeat(void *pvParameters ){
 80056cc:	b508      	push	{r3, lr}

    /* Infinite loop */
    for(;;) {
        HAL_GPIO_TogglePin(HeartBeat1_GPIO_Port, HeartBeat1_Pin);
 80056ce:	4c05      	ldr	r4, [pc, #20]	; (80056e4 <vHeartbeat+0x18>)
 80056d0:	4620      	mov	r0, r4
 80056d2:	2140      	movs	r1, #64	; 0x40
 80056d4:	f7fb fd4a 	bl	800116c <HAL_GPIO_TogglePin>
        vTaskDelay(1000);
 80056d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056dc:	f7ff fa58 	bl	8004b90 <vTaskDelay>
 80056e0:	e7f6      	b.n	80056d0 <vHeartbeat+0x4>
 80056e2:	bf00      	nop
 80056e4:	40020800 	.word	0x40020800

080056e8 <vKillSwitchMonitor>:
    }

}

void vKillSwitchMonitor(void *pvParameters) {
 80056e8:	b508      	push	{r3, lr}
	for (;;) {
		if (HAL_GPIO_ReadPin(KillSwitch_GPIO_Port, KillSwitch_Pin) == GPIO_PIN_RESET) {
 80056ea:	4d0d      	ldr	r5, [pc, #52]	; (8005720 <vKillSwitchMonitor+0x38>)
 80056ec:	e009      	b.n	8005702 <vKillSwitchMonitor+0x1a>
			resetPWM();
 80056ee:	f7ff fd77 	bl	80051e0 <resetPWM>
			HAL_GPIO_WritePin(PC4_LED_GPIO_Port, PC4_LED_Pin, GPIO_PIN_RESET);
 80056f2:	4622      	mov	r2, r4
 80056f4:	2110      	movs	r1, #16
 80056f6:	4628      	mov	r0, r5
 80056f8:	f7fb fd34 	bl	8001164 <HAL_GPIO_WritePin>
		} else {
			HAL_GPIO_WritePin(PC4_LED_GPIO_Port, PC4_LED_Pin, GPIO_PIN_SET);
		}
		vTaskDelay(50);
 80056fc:	2032      	movs	r0, #50	; 0x32
 80056fe:	f7ff fa47 	bl	8004b90 <vTaskDelay>
		if (HAL_GPIO_ReadPin(KillSwitch_GPIO_Port, KillSwitch_Pin) == GPIO_PIN_RESET) {
 8005702:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005706:	4806      	ldr	r0, [pc, #24]	; (8005720 <vKillSwitchMonitor+0x38>)
 8005708:	f7fb fd26 	bl	8001158 <HAL_GPIO_ReadPin>
			HAL_GPIO_WritePin(PC4_LED_GPIO_Port, PC4_LED_Pin, GPIO_PIN_SET);
 800570c:	2201      	movs	r2, #1
		if (HAL_GPIO_ReadPin(KillSwitch_GPIO_Port, KillSwitch_Pin) == GPIO_PIN_RESET) {
 800570e:	4604      	mov	r4, r0
			HAL_GPIO_WritePin(PC4_LED_GPIO_Port, PC4_LED_Pin, GPIO_PIN_SET);
 8005710:	2110      	movs	r1, #16
		if (HAL_GPIO_ReadPin(KillSwitch_GPIO_Port, KillSwitch_Pin) == GPIO_PIN_RESET) {
 8005712:	2800      	cmp	r0, #0
 8005714:	d0eb      	beq.n	80056ee <vKillSwitchMonitor+0x6>
			HAL_GPIO_WritePin(PC4_LED_GPIO_Port, PC4_LED_Pin, GPIO_PIN_SET);
 8005716:	4628      	mov	r0, r5
 8005718:	f7fb fd24 	bl	8001164 <HAL_GPIO_WritePin>
 800571c:	e7ee      	b.n	80056fc <vKillSwitchMonitor+0x14>
 800571e:	bf00      	nop
 8005720:	40020800 	.word	0x40020800

08005724 <vSwitchMonitor>:
	}
}

void vSwitchMonitor(void *pvParameters){
 8005724:	b500      	push	{lr}
    uint8_t switchMessage[] = "$$$$nnnnnn@@@@\r\n";
 8005726:	4e29      	ldr	r6, [pc, #164]	; (80057cc <vSwitchMonitor+0xa8>)
    //uint8_t switchMessage = "";
    for(;;){
        //You can read directly in to the the message without forcing a 1 or 0 but that returns
        //a weird block character when switch is closed which may be hard to parse later
        switchMessage [4] = HAL_GPIO_ReadPin(KillSwitch_GPIO_Port, KillSwitch_Pin)      ? '1' : '0';
 8005728:	4c29      	ldr	r4, [pc, #164]	; (80057d0 <vSwitchMonitor+0xac>)
    uint8_t switchMessage[] = "$$$$nnnnnn@@@@\r\n";
 800572a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
void vSwitchMonitor(void *pvParameters){
 800572c:	b087      	sub	sp, #28
    uint8_t switchMessage[] = "$$$$nnnnnn@@@@\r\n";
 800572e:	ad01      	add	r5, sp, #4
 8005730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005732:	6833      	ldr	r3, [r6, #0]
 8005734:	702b      	strb	r3, [r5, #0]
        switchMessage [4] = HAL_GPIO_ReadPin(KillSwitch_GPIO_Port, KillSwitch_Pin)      ? '1' : '0';
 8005736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800573a:	4620      	mov	r0, r4
 800573c:	f7fb fd0c 	bl	8001158 <HAL_GPIO_ReadPin>
 8005740:	2800      	cmp	r0, #0
 8005742:	bf14      	ite	ne
 8005744:	2331      	movne	r3, #49	; 0x31
 8005746:	2330      	moveq	r3, #48	; 0x30
        switchMessage [5] = HAL_GPIO_ReadPin(MissionStart_GPIO_Port, MissionStart_Pin)  ? '1' : '0';
 8005748:	2101      	movs	r1, #1
 800574a:	4620      	mov	r0, r4
        switchMessage [4] = HAL_GPIO_ReadPin(KillSwitch_GPIO_Port, KillSwitch_Pin)      ? '1' : '0';
 800574c:	f88d 3008 	strb.w	r3, [sp, #8]
        switchMessage [5] = HAL_GPIO_ReadPin(MissionStart_GPIO_Port, MissionStart_Pin)  ? '1' : '0';
 8005750:	f7fb fd02 	bl	8001158 <HAL_GPIO_ReadPin>
 8005754:	2800      	cmp	r0, #0
 8005756:	bf14      	ite	ne
 8005758:	2331      	movne	r3, #49	; 0x31
 800575a:	2330      	moveq	r3, #48	; 0x30
        switchMessage [6] = HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin)            ? '1' : '0';
 800575c:	2102      	movs	r1, #2
 800575e:	4620      	mov	r0, r4
        switchMessage [5] = HAL_GPIO_ReadPin(MissionStart_GPIO_Port, MissionStart_Pin)  ? '1' : '0';
 8005760:	f88d 3009 	strb.w	r3, [sp, #9]
        switchMessage [6] = HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin)            ? '1' : '0';
 8005764:	f7fb fcf8 	bl	8001158 <HAL_GPIO_ReadPin>
 8005768:	2800      	cmp	r0, #0
 800576a:	bf14      	ite	ne
 800576c:	2331      	movne	r3, #49	; 0x31
 800576e:	2330      	moveq	r3, #48	; 0x30
        switchMessage [7] = HAL_GPIO_ReadPin(Switch4_GPIO_Port, Switch4_Pin)            ? '1' : '0';
 8005770:	2104      	movs	r1, #4
 8005772:	4620      	mov	r0, r4
        switchMessage [6] = HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin)            ? '1' : '0';
 8005774:	f88d 300a 	strb.w	r3, [sp, #10]
        switchMessage [7] = HAL_GPIO_ReadPin(Switch4_GPIO_Port, Switch4_Pin)            ? '1' : '0';
 8005778:	f7fb fcee 	bl	8001158 <HAL_GPIO_ReadPin>
 800577c:	2800      	cmp	r0, #0
 800577e:	bf14      	ite	ne
 8005780:	2331      	movne	r3, #49	; 0x31
 8005782:	2330      	moveq	r3, #48	; 0x30
        switchMessage [8] = HAL_GPIO_ReadPin(Switch5_GPIO_Port, Switch5_Pin)            ? '1' : '0';
 8005784:	2108      	movs	r1, #8
 8005786:	4620      	mov	r0, r4
        switchMessage [7] = HAL_GPIO_ReadPin(Switch4_GPIO_Port, Switch4_Pin)            ? '1' : '0';
 8005788:	f88d 300b 	strb.w	r3, [sp, #11]
        switchMessage [8] = HAL_GPIO_ReadPin(Switch5_GPIO_Port, Switch5_Pin)            ? '1' : '0';
 800578c:	f7fb fce4 	bl	8001158 <HAL_GPIO_ReadPin>
 8005790:	2800      	cmp	r0, #0
 8005792:	bf14      	ite	ne
 8005794:	2331      	movne	r3, #49	; 0x31
 8005796:	2330      	moveq	r3, #48	; 0x30
        switchMessage [9] = HAL_GPIO_ReadPin(Switch6_GPIO_Port, Switch6_Pin)            ? '1' : '0';
 8005798:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800579c:	4620      	mov	r0, r4
        switchMessage [8] = HAL_GPIO_ReadPin(Switch5_GPIO_Port, Switch5_Pin)            ? '1' : '0';
 800579e:	f88d 300c 	strb.w	r3, [sp, #12]
        switchMessage [9] = HAL_GPIO_ReadPin(Switch6_GPIO_Port, Switch6_Pin)            ? '1' : '0';
 80057a2:	f7fb fcd9 	bl	8001158 <HAL_GPIO_ReadPin>
 80057a6:	2800      	cmp	r0, #0
 80057a8:	bf14      	ite	ne
 80057aa:	2331      	movne	r3, #49	; 0x31
 80057ac:	2330      	moveq	r3, #48	; 0x30
        CDC_Transmit_HS(switchMessage, strlen(switchMessage));
 80057ae:	a801      	add	r0, sp, #4
        switchMessage [9] = HAL_GPIO_ReadPin(Switch6_GPIO_Port, Switch6_Pin)            ? '1' : '0';
 80057b0:	f88d 300d 	strb.w	r3, [sp, #13]
        CDC_Transmit_HS(switchMessage, strlen(switchMessage));
 80057b4:	f7fa fd0c 	bl	80001d0 <strlen>
 80057b8:	b281      	uxth	r1, r0
 80057ba:	a801      	add	r0, sp, #4
 80057bc:	f000 fb4c 	bl	8005e58 <CDC_Transmit_HS>
        vTaskDelay(900);
 80057c0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80057c4:	f7ff f9e4 	bl	8004b90 <vTaskDelay>
        switchMessage [4] = HAL_GPIO_ReadPin(KillSwitch_GPIO_Port, KillSwitch_Pin)      ? '1' : '0';
 80057c8:	e7b5      	b.n	8005736 <vSwitchMonitor+0x12>
 80057ca:	bf00      	nop
 80057cc:	0800677c 	.word	0x0800677c
 80057d0:	40020800 	.word	0x40020800

080057d4 <vDepthSensor>:
    }
}

void vDepthSensor(void *pvParameters) {
 80057d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d8:	b0a9      	sub	sp, #164	; 0xa4
 80057da:	af10      	add	r7, sp, #64	; 0x40
	float altitude;
	uint16_t fluidDensity = 1029;

	I2C_HandleTypeDef *i2c = getI2CRef();

	HAL_I2C_Master_Transmit(i2c, address_write, &reset, 1, 20);
 80057dc:	2514      	movs	r5, #20
	uint8_t depthmsg[] = "%%%%99999999!99999999!99999999@@@@\r\n";
 80057de:	4e8b      	ldr	r6, [pc, #556]	; (8005a0c <vDepthSensor+0x238>)
	resetI2C: vTaskDelay(100);
 80057e0:	2064      	movs	r0, #100	; 0x64
 80057e2:	f7ff f9d5 	bl	8004b90 <vTaskDelay>
	uint8_t depthmsg[] = "%%%%99999999!99999999!99999999@@@@\r\n";
 80057e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80057e8:	ac1e      	add	r4, sp, #120	; 0x78
 80057ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80057ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057f0:	e896 0003 	ldmia.w	r6, {r0, r1}
 80057f4:	f844 0b04 	str.w	r0, [r4], #4
	uint8_t reset = 0x1E;
 80057f8:	f04f 0e1e 	mov.w	lr, #30
	uint8_t read_d2 = 0x5A;
 80057fc:	225a      	movs	r2, #90	; 0x5a
	uint8_t read_adc = 0x00;
 80057fe:	2300      	movs	r3, #0
	uint8_t prom_val = prom_read;
 8005800:	26a0      	movs	r6, #160	; 0xa0
	uint8_t read_d1 = 0x4A;
 8005802:	204a      	movs	r0, #74	; 0x4a
	uint8_t depthmsg[] = "%%%%99999999!99999999!99999999@@@@\r\n";
 8005804:	7021      	strb	r1, [r4, #0]
	uint8_t reset = 0x1E;
 8005806:	f88d e00f 	strb.w	lr, [sp, #15]
	uint8_t prom_val = prom_read;
 800580a:	f88d 6010 	strb.w	r6, [sp, #16]
	uint8_t read_d2 = 0x5A;
 800580e:	f88d 2012 	strb.w	r2, [sp, #18]
	uint8_t read_adc = 0x00;
 8005812:	f88d 3013 	strb.w	r3, [sp, #19]
	uint8_t read_d1 = 0x4A;
 8005816:	f88d 0011 	strb.w	r0, [sp, #17]
	I2C_HandleTypeDef *i2c = getI2CRef();
 800581a:	f7ff fd05 	bl	8005228 <getI2CRef>
	HAL_I2C_Master_Transmit(i2c, address_write, &reset, 1, 20);
 800581e:	2301      	movs	r3, #1
 8005820:	f10d 020f 	add.w	r2, sp, #15
 8005824:	21ec      	movs	r1, #236	; 0xec
 8005826:	9500      	str	r5, [sp, #0]
	I2C_HandleTypeDef *i2c = getI2CRef();
 8005828:	4606      	mov	r6, r0
	HAL_I2C_Master_Transmit(i2c, address_write, &reset, 1, 20);
 800582a:	f7fb fe25 	bl	8001478 <HAL_I2C_Master_Transmit>

	vTaskDelay(50);
 800582e:	2032      	movs	r0, #50	; 0x32
 8005830:	f7ff f9ae 	bl	8004b90 <vTaskDelay>
 8005834:	f10d 0432 	add.w	r4, sp, #50	; 0x32

	for (uint8_t i = 0; i < 7; i++) {

		HAL_I2C_Master_Transmit(i2c, address_write, &prom_val, 1, 20);
 8005838:	2301      	movs	r3, #1
 800583a:	aa04      	add	r2, sp, #16
 800583c:	21ec      	movs	r1, #236	; 0xec
 800583e:	9500      	str	r5, [sp, #0]
 8005840:	4630      	mov	r0, r6
 8005842:	f7fb fe19 	bl	8001478 <HAL_I2C_Master_Transmit>
		vTaskDelay(20);
 8005846:	2014      	movs	r0, #20
 8005848:	f7ff f9a2 	bl	8004b90 <vTaskDelay>
		HAL_I2C_Master_Receive(i2c, address_read, buffer, 2, 20);
 800584c:	2302      	movs	r3, #2
 800584e:	aa05      	add	r2, sp, #20
 8005850:	21ed      	movs	r1, #237	; 0xed
 8005852:	9500      	str	r5, [sp, #0]
 8005854:	4630      	mov	r0, r6
 8005856:	f7fb fef9 	bl	800164c <HAL_I2C_Master_Receive>
		calibration[i] = (buffer[0] << 8) | buffer[1];
 800585a:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800585e:	f89d 2015 	ldrb.w	r2, [sp, #21]

		prom_val += 2;
 8005862:	f89d 3010 	ldrb.w	r3, [sp, #16]
		calibration[i] = (buffer[0] << 8) | buffer[1];
 8005866:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800586a:	f824 2f02 	strh.w	r2, [r4, #2]!
		prom_val += 2;
 800586e:	3302      	adds	r3, #2
	for (uint8_t i = 0; i < 7; i++) {
 8005870:	42bc      	cmp	r4, r7
		prom_val += 2;
 8005872:	f88d 3010 	strb.w	r3, [sp, #16]
	for (uint8_t i = 0; i < 7; i++) {
 8005876:	d1df      	bne.n	8005838 <vDepthSensor+0x64>

	}

	uint8_t crcRead = calibration[0] >> 12;
	uint8_t crcCalc = crc4(calibration);
 8005878:	a80d      	add	r0, sp, #52	; 0x34
	uint8_t crcRead = calibration[0] >> 12;
 800587a:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
	uint8_t crcCalc = crc4(calibration);
 800587e:	f7ff fd79 	bl	8005374 <crc4>

	uint8_t success[] = "initialization succeeded\r\n";
 8005882:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8005a10 <vDepthSensor+0x23c>
	uint8_t failure[] = "initialization failed\r\n";
 8005886:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8005a14 <vDepthSensor+0x240>
	uint8_t crcCalc = crc4(calibration);
 800588a:	4681      	mov	r9, r0
	uint8_t success[] = "initialization succeeded\r\n";
 800588c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005890:	ac17      	add	r4, sp, #92	; 0x5c
 8005892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005894:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8005898:	c403      	stmia	r4!, {r0, r1}
 800589a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800589e:	f824 2b02 	strh.w	r2, [r4], #2
	uint8_t failure[] = "initialization failed\r\n";
 80058a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80058a6:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 80058aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80058ae:	e89c 0003 	ldmia.w	ip, {r0, r1}
	uint8_t crcRead = calibration[0] >> 12;
 80058b2:	ea4f 3818 	mov.w	r8, r8, lsr #12

	if (crcRead == crcCalc) {
 80058b6:	fa5f f989 	uxtb.w	r9, r9
 80058ba:	45c8      	cmp	r8, r9
	uint8_t success[] = "initialization succeeded\r\n";
 80058bc:	f884 a000 	strb.w	sl, [r4]
	uint8_t failure[] = "initialization failed\r\n";
 80058c0:	e88e 0003 	stmia.w	lr, {r0, r1}
	if (crcRead == crcCalc) {
 80058c4:	d004      	beq.n	80058d0 <vDepthSensor+0xfc>
		CDC_Transmit_HS(success, strlen(success));
	} else {
		CDC_Transmit_HS(failure, strlen(failure));
 80058c6:	2117      	movs	r1, #23
 80058c8:	a811      	add	r0, sp, #68	; 0x44
 80058ca:	f000 fac5 	bl	8005e58 <CDC_Transmit_HS>
		goto resetI2C;
 80058ce:	e786      	b.n	80057de <vDepthSensor+0xa>
		CDC_Transmit_HS(success, strlen(success));
 80058d0:	a817      	add	r0, sp, #92	; 0x5c
 80058d2:	211a      	movs	r1, #26
 80058d4:	f000 fac0 	bl	8005e58 <CDC_Transmit_HS>
 80058d8:	f10d 081c 	add.w	r8, sp, #28
 80058dc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80058e0:	ac0b      	add	r4, sp, #44	; 0x2c
 80058e2:	af1f      	add	r7, sp, #124	; 0x7c
	uint8_t values[8];
	uint8_t * ptr;
	for(;;) {

		ptr = &depthmsg[4];
		HAL_I2C_Master_Transmit(i2c, address_write, &read_d1, 1, 20);
 80058e4:	2514      	movs	r5, #20
 80058e6:	f10d 0211 	add.w	r2, sp, #17
 80058ea:	9500      	str	r5, [sp, #0]
 80058ec:	2301      	movs	r3, #1
 80058ee:	21ec      	movs	r1, #236	; 0xec
 80058f0:	4630      	mov	r0, r6
 80058f2:	f7fb fdc1 	bl	8001478 <HAL_I2C_Master_Transmit>
		vTaskDelay(20);
 80058f6:	4628      	mov	r0, r5
 80058f8:	f7ff f94a 	bl	8004b90 <vTaskDelay>
		HAL_I2C_Master_Transmit(i2c, address_write, &read_adc, 1, 20);
 80058fc:	f10d 0213 	add.w	r2, sp, #19
 8005900:	9500      	str	r5, [sp, #0]
 8005902:	2301      	movs	r3, #1
 8005904:	21ec      	movs	r1, #236	; 0xec
 8005906:	4630      	mov	r0, r6
 8005908:	f7fb fdb6 	bl	8001478 <HAL_I2C_Master_Transmit>
		vTaskDelay(20);
 800590c:	4628      	mov	r0, r5
 800590e:	f7ff f93f 	bl	8004b90 <vTaskDelay>

		HAL_I2C_Master_Receive(i2c, address_read, buffer, 3, 20);
 8005912:	eb0d 0205 	add.w	r2, sp, r5
 8005916:	9500      	str	r5, [sp, #0]
 8005918:	2303      	movs	r3, #3
 800591a:	21ed      	movs	r1, #237	; 0xed
 800591c:	4630      	mov	r0, r6
 800591e:	f7fb fe95 	bl	800164c <HAL_I2C_Master_Receive>
		d1 = buffer[0];
		d1 = d1 << 8 | buffer[1];
		d1 = d1 << 8 | buffer[2];
 8005922:	f8bd e014 	ldrh.w	lr, [sp, #20]
 8005926:	f89d a016 	ldrb.w	sl, [sp, #22]

		HAL_I2C_Master_Transmit(i2c, address_write, &read_d2, 1, 30);
 800592a:	f04f 0b1e 	mov.w	fp, #30
		d1 = d1 << 8 | buffer[2];
 800592e:	fa9e fe9e 	rev16.w	lr, lr
 8005932:	fa1f fe8e 	uxth.w	lr, lr
		HAL_I2C_Master_Transmit(i2c, address_write, &read_d2, 1, 30);
 8005936:	f10d 0212 	add.w	r2, sp, #18
 800593a:	2301      	movs	r3, #1
 800593c:	21ec      	movs	r1, #236	; 0xec
 800593e:	f8cd b000 	str.w	fp, [sp]
 8005942:	4630      	mov	r0, r6
		d1 = d1 << 8 | buffer[2];
 8005944:	ea4a 2a0e 	orr.w	sl, sl, lr, lsl #8
		HAL_I2C_Master_Transmit(i2c, address_write, &read_d2, 1, 30);
 8005948:	f7fb fd96 	bl	8001478 <HAL_I2C_Master_Transmit>
		vTaskDelay(20);
 800594c:	4628      	mov	r0, r5
 800594e:	f7ff f91f 	bl	8004b90 <vTaskDelay>
		HAL_I2C_Master_Transmit(i2c, address_write, &read_adc, 1, 30);
 8005952:	f10d 0213 	add.w	r2, sp, #19
 8005956:	2301      	movs	r3, #1
 8005958:	21ec      	movs	r1, #236	; 0xec
 800595a:	f8cd b000 	str.w	fp, [sp]
 800595e:	4630      	mov	r0, r6
 8005960:	f7fb fd8a 	bl	8001478 <HAL_I2C_Master_Transmit>
		vTaskDelay(20);
 8005964:	4628      	mov	r0, r5
 8005966:	f7ff f913 	bl	8004b90 <vTaskDelay>

		HAL_I2C_Master_Receive(i2c, address_read, buffer, 3, 30);
 800596a:	eb0d 0205 	add.w	r2, sp, r5
 800596e:	f8cd b000 	str.w	fp, [sp]
 8005972:	2303      	movs	r3, #3
 8005974:	21ed      	movs	r1, #237	; 0xed
 8005976:	4630      	mov	r0, r6
 8005978:	f7fb fe68 	bl	800164c <HAL_I2C_Master_Receive>
		d2 = buffer[0];
		d2 = d2 << 8 | buffer[1];
		d2 = d2 << 8 | buffer[2];
 800597c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8005980:	f89d 1016 	ldrb.w	r1, [sp, #22]

		calculate(d1, d2, calibration, &temp, &press);
 8005984:	f8cd 8000 	str.w	r8, [sp]
		d2 = d2 << 8 | buffer[2];
 8005988:	ba5b      	rev16	r3, r3
 800598a:	b29b      	uxth	r3, r3
		calculate(d1, d2, calibration, &temp, &press);
 800598c:	4650      	mov	r0, sl
 800598e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8005992:	aa0d      	add	r2, sp, #52	; 0x34
 8005994:	ab06      	add	r3, sp, #24
 8005996:	f7ff fd17 	bl	80053c8 <calculate>
		convert(&temp, &press, &temperature, &pressure, &depth, fluidDensity);
 800599a:	f240 4305 	movw	r3, #1029	; 0x405
 800599e:	aa09      	add	r2, sp, #36	; 0x24
 80059a0:	4641      	mov	r1, r8
 80059a2:	9301      	str	r3, [sp, #4]
 80059a4:	a806      	add	r0, sp, #24
 80059a6:	ab08      	add	r3, sp, #32
 80059a8:	f8cd 9000 	str.w	r9, [sp]
 80059ac:	f7ff fdd4 	bl	8005558 <convert>
//		if (temp == 2000) {
//			vTaskDelay(1500);
//			goto resetI2C;
//		}

		memset(values, 0, sizeof(values));
 80059b0:	2500      	movs	r5, #0
		fToString(values, temperature);
 80059b2:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
		memset(values, 0, sizeof(values));
 80059b6:	6025      	str	r5, [r4, #0]
		fToString(values, temperature);
 80059b8:	4620      	mov	r0, r4
		memset(values, 0, sizeof(values));
 80059ba:	6065      	str	r5, [r4, #4]
		fToString(values, temperature);
 80059bc:	f7ff fe0e 	bl	80055dc <fToString>
		memcpy(ptr, values, 8);
 80059c0:	e894 0003 	ldmia.w	r4, {r0, r1}
		ptr += 9;

		memset(values, 0, sizeof(values));
		fToString(values, pressure);
 80059c4:	ed9d 0a08 	vldr	s0, [sp, #32]
		memset(values, 0, sizeof(values));
 80059c8:	6025      	str	r5, [r4, #0]
		memcpy(ptr, values, 8);
 80059ca:	e887 0003 	stmia.w	r7, {r0, r1}
		fToString(values, pressure);
 80059ce:	4620      	mov	r0, r4
		memset(values, 0, sizeof(values));
 80059d0:	6065      	str	r5, [r4, #4]
		fToString(values, pressure);
 80059d2:	f7ff fe03 	bl	80055dc <fToString>
		memcpy(ptr, values, 8);
 80059d6:	4623      	mov	r3, r4
 80059d8:	cb03      	ldmia	r3!, {r0, r1}
		ptr += 9;

		memset(values, 0, sizeof(values));
		fToString(values, depth);
 80059da:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
		memcpy(ptr, values, 8);
 80059de:	f8cd 0085 	str.w	r0, [sp, #133]	; 0x85
		fToString(values, depth);
 80059e2:	4620      	mov	r0, r4
		memcpy(ptr, values, 8);
 80059e4:	f8cd 1089 	str.w	r1, [sp, #137]	; 0x89
		memset(values, 0, sizeof(values));
 80059e8:	6025      	str	r5, [r4, #0]
 80059ea:	6065      	str	r5, [r4, #4]
		fToString(values, depth);
 80059ec:	f7ff fdf6 	bl	80055dc <fToString>
		memcpy(ptr, values, 8);
 80059f0:	4623      	mov	r3, r4
 80059f2:	cb03      	ldmia	r3!, {r0, r1}
 80059f4:	f8cd 008e 	str.w	r0, [sp, #142]	; 0x8e
 80059f8:	f8cd 1092 	str.w	r1, [sp, #146]	; 0x92

		CDC_Transmit_HS(depthmsg, 37);
 80059fc:	a81e      	add	r0, sp, #120	; 0x78
 80059fe:	2125      	movs	r1, #37	; 0x25
 8005a00:	f000 fa2a 	bl	8005e58 <CDC_Transmit_HS>

		vTaskDelay(200);
 8005a04:	20c8      	movs	r0, #200	; 0xc8
 8005a06:	f7ff f8c3 	bl	8004b90 <vTaskDelay>
 8005a0a:	e76b      	b.n	80058e4 <vDepthSensor+0x110>
 8005a0c:	08006720 	.word	0x08006720
 8005a10:	08006748 	.word	0x08006748
 8005a14:	08006764 	.word	0x08006764

08005a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a1a:	2003      	movs	r0, #3
 8005a1c:	f7fb fa0c 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005a20:	2200      	movs	r2, #0
 8005a22:	4611      	mov	r1, r2
 8005a24:	f06f 000b 	mvn.w	r0, #11
 8005a28:	f7fb fa18 	bl	8000e5c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	4611      	mov	r1, r2
 8005a30:	f06f 000a 	mvn.w	r0, #10
 8005a34:	f7fb fa12 	bl	8000e5c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005a38:	2200      	movs	r2, #0
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	f06f 0009 	mvn.w	r0, #9
 8005a40:	f7fb fa0c 	bl	8000e5c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005a44:	2200      	movs	r2, #0
 8005a46:	4611      	mov	r1, r2
 8005a48:	f06f 0004 	mvn.w	r0, #4
 8005a4c:	f7fb fa06 	bl	8000e5c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8005a50:	2200      	movs	r2, #0
 8005a52:	4611      	mov	r1, r2
 8005a54:	f06f 0003 	mvn.w	r0, #3
 8005a58:	f7fb fa00 	bl	8000e5c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	210f      	movs	r1, #15
 8005a60:	f06f 0001 	mvn.w	r0, #1
 8005a64:	f7fb f9fa 	bl	8000e5c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8005a68:	2200      	movs	r2, #0
 8005a6a:	210f      	movs	r1, #15
 8005a6c:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8005a74:	f7fb b9f2 	b.w	8000e5c <HAL_NVIC_SetPriority>

08005a78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005a78:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8005a7a:	6803      	ldr	r3, [r0, #0]
 8005a7c:	4a25      	ldr	r2, [pc, #148]	; (8005b14 <HAL_I2C_MspInit+0x9c>)
 8005a7e:	4293      	cmp	r3, r2
{
 8005a80:	b089      	sub	sp, #36	; 0x24
  if(hi2c->Instance==I2C1)
 8005a82:	d02b      	beq.n	8005adc <HAL_I2C_MspInit+0x64>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 8005a84:	4a24      	ldr	r2, [pc, #144]	; (8005b18 <HAL_I2C_MspInit+0xa0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d001      	beq.n	8005a8e <HAL_I2C_MspInit+0x16>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005a8a:	b009      	add	sp, #36	; 0x24
 8005a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = SDA_Bkpln_Pin;
 8005a8e:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(SDA_Bkpln_GPIO_Port, &GPIO_InitStruct);
 8005a92:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a94:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a96:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a98:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005a9a:	2404      	movs	r4, #4
    HAL_GPIO_Init(SDA_Bkpln_GPIO_Port, &GPIO_InitStruct);
 8005a9c:	481f      	ldr	r0, [pc, #124]	; (8005b1c <HAL_I2C_MspInit+0xa4>)
    GPIO_InitStruct.Pin = SDA_Bkpln_Pin;
 8005a9e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005aa0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005aa2:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aa4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005aa6:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SDA_Bkpln_GPIO_Port, &GPIO_InitStruct);
 8005aa8:	f7fb fa40 	bl	8000f2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCL_Bkpln_Pin;
 8005aac:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(SCL_Bkpln_GPIO_Port, &GPIO_InitStruct);
 8005ab0:	a903      	add	r1, sp, #12
 8005ab2:	481b      	ldr	r0, [pc, #108]	; (8005b20 <HAL_I2C_MspInit+0xa8>)
    GPIO_InitStruct.Pin = SCL_Bkpln_Pin;
 8005ab4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ab6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ab8:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aba:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005abc:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SCL_Bkpln_GPIO_Port, &GPIO_InitStruct);
 8005abe:	f7fb fa35 	bl	8000f2c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005ac2:	4b18      	ldr	r3, [pc, #96]	; (8005b24 <HAL_I2C_MspInit+0xac>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	9202      	str	r2, [sp, #8]
 8005ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aca:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005ace:	641a      	str	r2, [r3, #64]	; 0x40
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ad6:	9302      	str	r3, [sp, #8]
 8005ad8:	9b02      	ldr	r3, [sp, #8]
}
 8005ada:	e7d6      	b.n	8005a8a <HAL_I2C_MspInit+0x12>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005adc:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005ade:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = SCL_Depth_Pin|SDA_Depth_Pin;
 8005ae0:	26c0      	movs	r6, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ae2:	2512      	movs	r5, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ae4:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ae6:	a903      	add	r1, sp, #12
 8005ae8:	480f      	ldr	r0, [pc, #60]	; (8005b28 <HAL_I2C_MspInit+0xb0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aea:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005aec:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = SCL_Depth_Pin|SDA_Depth_Pin;
 8005aee:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005af0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005af2:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005af4:	f7fb fa1a 	bl	8000f2c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005af8:	4b0a      	ldr	r3, [pc, #40]	; (8005b24 <HAL_I2C_MspInit+0xac>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	9201      	str	r2, [sp, #4]
 8005afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b00:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	9b01      	ldr	r3, [sp, #4]
 8005b10:	e7bb      	b.n	8005a8a <HAL_I2C_MspInit+0x12>
 8005b12:	bf00      	nop
 8005b14:	40005400 	.word	0x40005400
 8005b18:	40005c00 	.word	0x40005c00
 8005b1c:	40020800 	.word	0x40020800
 8005b20:	40020000 	.word	0x40020000
 8005b24:	40023800 	.word	0x40023800
 8005b28:	40020400 	.word	0x40020400

08005b2c <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 8005b2c:	6803      	ldr	r3, [r0, #0]
 8005b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8005b32:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM2)
 8005b34:	d015      	beq.n	8005b62 <HAL_TIM_PWM_MspInit+0x36>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 8005b36:	4a19      	ldr	r2, [pc, #100]	; (8005b9c <HAL_TIM_PWM_MspInit+0x70>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d021      	beq.n	8005b80 <HAL_TIM_PWM_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM5)
 8005b3c:	4a18      	ldr	r2, [pc, #96]	; (8005ba0 <HAL_TIM_PWM_MspInit+0x74>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d001      	beq.n	8005b46 <HAL_TIM_PWM_MspInit+0x1a>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005b42:	b004      	add	sp, #16
 8005b44:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005b46:	4b17      	ldr	r3, [pc, #92]	; (8005ba4 <HAL_TIM_PWM_MspInit+0x78>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	9203      	str	r2, [sp, #12]
 8005b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b4e:	f042 0208 	orr.w	r2, r2, #8
 8005b52:	641a      	str	r2, [r3, #64]	; 0x40
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	9303      	str	r3, [sp, #12]
 8005b5c:	9b03      	ldr	r3, [sp, #12]
}
 8005b5e:	b004      	add	sp, #16
 8005b60:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b62:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8005b66:	2200      	movs	r2, #0
 8005b68:	9201      	str	r2, [sp, #4]
 8005b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b6c:	f042 0201 	orr.w	r2, r2, #1
 8005b70:	641a      	str	r2, [r3, #64]	; 0x40
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	9b01      	ldr	r3, [sp, #4]
}
 8005b7c:	b004      	add	sp, #16
 8005b7e:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b80:	4b08      	ldr	r3, [pc, #32]	; (8005ba4 <HAL_TIM_PWM_MspInit+0x78>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	9202      	str	r2, [sp, #8]
 8005b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b88:	f042 0202 	orr.w	r2, r2, #2
 8005b8c:	641a      	str	r2, [r3, #64]	; 0x40
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	9302      	str	r3, [sp, #8]
 8005b96:	9b02      	ldr	r3, [sp, #8]
 8005b98:	e7d3      	b.n	8005b42 <HAL_TIM_PWM_MspInit+0x16>
 8005b9a:	bf00      	nop
 8005b9c:	40000400 	.word	0x40000400
 8005ba0:	40000c00 	.word	0x40000c00
 8005ba4:	40023800 	.word	0x40023800

08005ba8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM13)
 8005ba8:	6803      	ldr	r3, [r0, #0]
 8005baa:	4a12      	ldr	r2, [pc, #72]	; (8005bf4 <HAL_TIM_Base_MspInit+0x4c>)
 8005bac:	4293      	cmp	r3, r2
{
 8005bae:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM13)
 8005bb0:	d012      	beq.n	8005bd8 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8005bb2:	4a11      	ldr	r2, [pc, #68]	; (8005bf8 <HAL_TIM_Base_MspInit+0x50>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d001      	beq.n	8005bbc <HAL_TIM_Base_MspInit+0x14>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8005bb8:	b002      	add	sp, #8
 8005bba:	4770      	bx	lr
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005bbc:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <HAL_TIM_Base_MspInit+0x54>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	9201      	str	r2, [sp, #4]
 8005bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc8:	641a      	str	r2, [r3, #64]	; 0x40
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd0:	9301      	str	r3, [sp, #4]
 8005bd2:	9b01      	ldr	r3, [sp, #4]
}
 8005bd4:	b002      	add	sp, #8
 8005bd6:	4770      	bx	lr
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005bd8:	4b08      	ldr	r3, [pc, #32]	; (8005bfc <HAL_TIM_Base_MspInit+0x54>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	9200      	str	r2, [sp, #0]
 8005bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005be0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	9b00      	ldr	r3, [sp, #0]
}
 8005bf0:	b002      	add	sp, #8
 8005bf2:	4770      	bx	lr
 8005bf4:	40001c00 	.word	0x40001c00
 8005bf8:	40002000 	.word	0x40002000
 8005bfc:	40023800 	.word	0x40023800

08005c00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005c00:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 8005c02:	6803      	ldr	r3, [r0, #0]
 8005c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8005c08:	b086      	sub	sp, #24
  if(htim->Instance==TIM2)
 8005c0a:	d01e      	beq.n	8005c4a <HAL_TIM_MspPostInit+0x4a>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8005c0c:	4a25      	ldr	r2, [pc, #148]	; (8005ca4 <HAL_TIM_MspPostInit+0xa4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d034      	beq.n	8005c7c <HAL_TIM_MspPostInit+0x7c>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM5)
 8005c12:	4a25      	ldr	r2, [pc, #148]	; (8005ca8 <HAL_TIM_MspPostInit+0xa8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d03e      	beq.n	8005c96 <HAL_TIM_MspPostInit+0x96>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(htim->Instance==TIM13)
 8005c18:	4a24      	ldr	r2, [pc, #144]	; (8005cac <HAL_TIM_MspPostInit+0xac>)
 8005c1a:	4293      	cmp	r3, r2
  /* USER CODE END TIM13_MspPostInit 0 */
  
    /**TIM13 GPIO Configuration    
    PA6     ------> TIM13_CH1 
    */
    GPIO_InitStruct.Pin = HeaveStarboardForward_Pin;
 8005c1c:	bf08      	it	eq
 8005c1e:	2540      	moveq	r5, #64	; 0x40
  else if(htim->Instance==TIM13)
 8005c20:	d005      	beq.n	8005c2e <HAL_TIM_MspPostInit+0x2e>

  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }
  else if(htim->Instance==TIM14)
 8005c22:	4a23      	ldr	r2, [pc, #140]	; (8005cb0 <HAL_TIM_MspPostInit+0xb0>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d001      	beq.n	8005c2c <HAL_TIM_MspPostInit+0x2c>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8005c28:	b006      	add	sp, #24
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = HeaveStarboardAft_Pin;
 8005c2c:	2580      	movs	r5, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c2e:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8005c30:	2209      	movs	r2, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c32:	2402      	movs	r4, #2
    HAL_GPIO_Init(HeaveStarboardAft_GPIO_Port, &GPIO_InitStruct);
 8005c34:	a901      	add	r1, sp, #4
 8005c36:	481f      	ldr	r0, [pc, #124]	; (8005cb4 <HAL_TIM_MspPostInit+0xb4>)
    GPIO_InitStruct.Pin = HeaveStarboardAft_Pin;
 8005c38:	9501      	str	r5, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c3a:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c3e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8005c40:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(HeaveStarboardAft_GPIO_Port, &GPIO_InitStruct);
 8005c42:	f7fb f973 	bl	8000f2c <HAL_GPIO_Init>
}
 8005c46:	b006      	add	sp, #24
 8005c48:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c4a:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c4c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = SurgeStarboardHigh_Pin|SurgeStarboardLow_Pin;
 8005c4e:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c50:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005c52:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c54:	4817      	ldr	r0, [pc, #92]	; (8005cb4 <HAL_TIM_MspPostInit+0xb4>)
    GPIO_InitStruct.Pin = SurgeStarboardHigh_Pin|SurgeStarboardLow_Pin;
 8005c56:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c58:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c5a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c5c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005c5e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c60:	f7fb f964 	bl	8000f2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SwayAft_Pin|SwayForward_Pin;
 8005c64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c68:	a901      	add	r1, sp, #4
 8005c6a:	4813      	ldr	r0, [pc, #76]	; (8005cb8 <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c6c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c6e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c70:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005c72:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pin = SwayAft_Pin|SwayForward_Pin;
 8005c74:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c76:	f7fb f959 	bl	8000f2c <HAL_GPIO_Init>
 8005c7a:	e7d5      	b.n	8005c28 <HAL_TIM_MspPostInit+0x28>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c7c:	480e      	ldr	r0, [pc, #56]	; (8005cb8 <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Pin = HeavePortForward_Pin|HeavePortAft_Pin;
 8005c7e:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c80:	2202      	movs	r2, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c82:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c84:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = SurgePortHigh_Pin|SurgePortLow_Pin;
 8005c86:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c88:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005c8a:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c8e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c90:	f7fb f94c 	bl	8000f2c <HAL_GPIO_Init>
 8005c94:	e7c8      	b.n	8005c28 <HAL_TIM_MspPostInit+0x28>
    GPIO_InitStruct.Pin = SurgePortHigh_Pin|SurgePortLow_Pin;
 8005c96:	240c      	movs	r4, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c98:	2202      	movs	r2, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c9a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c9c:	a901      	add	r1, sp, #4
 8005c9e:	4805      	ldr	r0, [pc, #20]	; (8005cb4 <HAL_TIM_MspPostInit+0xb4>)
 8005ca0:	e7f1      	b.n	8005c86 <HAL_TIM_MspPostInit+0x86>
 8005ca2:	bf00      	nop
 8005ca4:	40000400 	.word	0x40000400
 8005ca8:	40000c00 	.word	0x40000c00
 8005cac:	40001c00 	.word	0x40001c00
 8005cb0:	40002000 	.word	0x40002000
 8005cb4:	40020000 	.word	0x40020000
 8005cb8:	40020400 	.word	0x40020400

08005cbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cbc:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005cbe:	4601      	mov	r1, r0
{
 8005cc0:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2019      	movs	r0, #25
 8005cc6:	f7fb f8c9 	bl	8000e5c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8005cca:	2019      	movs	r0, #25
 8005ccc:	f7fb f8fc 	bl	8000ec8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005cd0:	2500      	movs	r5, #0
 8005cd2:	4b15      	ldr	r3, [pc, #84]	; (8005d28 <HAL_InitTick+0x6c>)
 8005cd4:	9502      	str	r5, [sp, #8]
 8005cd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005cd8:	4c14      	ldr	r4, [pc, #80]	; (8005d2c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005cda:	f042 0201 	orr.w	r2, r2, #1
 8005cde:	645a      	str	r2, [r3, #68]	; 0x44
 8005ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce2:	f003 0301 	and.w	r3, r3, #1
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005ce6:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005ce8:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005cea:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005cec:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005cee:	f7fc fd9b 	bl	8002828 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005cf2:	f7fc fd89 	bl	8002808 <HAL_RCC_GetPCLK2Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005cf6:	4b0e      	ldr	r3, [pc, #56]	; (8005d30 <HAL_InitTick+0x74>)
  htim1.Instance = TIM1;
 8005cf8:	490e      	ldr	r1, [pc, #56]	; (8005d34 <HAL_InitTick+0x78>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8005cfa:	6125      	str	r5, [r4, #16]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005cfc:	fba3 2300 	umull	r2, r3, r3, r0
 8005d00:	0c9b      	lsrs	r3, r3, #18
 8005d02:	3b01      	subs	r3, #1
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005d04:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005d08:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 8005d0a:	e884 002a 	stmia.w	r4, {r1, r3, r5}
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005d0e:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005d10:	f7fc ff8a 	bl	8002c28 <HAL_TIM_Base_Init>
 8005d14:	b110      	cbz	r0, 8005d1c <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005d16:	2001      	movs	r0, #1
}
 8005d18:	b009      	add	sp, #36	; 0x24
 8005d1a:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f7fc fe2f 	bl	8002980 <HAL_TIM_Base_Start_IT>
}
 8005d22:	b009      	add	sp, #36	; 0x24
 8005d24:	bd30      	pop	{r4, r5, pc}
 8005d26:	bf00      	nop
 8005d28:	40023800 	.word	0x40023800
 8005d2c:	2000428c 	.word	0x2000428c
 8005d30:	431bde83 	.word	0x431bde83
 8005d34:	40010000 	.word	0x40010000

08005d38 <NMI_Handler>:
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop

08005d3c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8005d3c:	e7fe      	b.n	8005d3c <HardFault_Handler>
 8005d3e:	bf00      	nop

08005d40 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8005d40:	e7fe      	b.n	8005d40 <MemManage_Handler>
 8005d42:	bf00      	nop

08005d44 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8005d44:	e7fe      	b.n	8005d44 <BusFault_Handler>
 8005d46:	bf00      	nop

08005d48 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8005d48:	e7fe      	b.n	8005d48 <UsageFault_Handler>
 8005d4a:	bf00      	nop

08005d4c <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop

08005d50 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8005d50:	f7fe b9b2 	b.w	80040b8 <osSystickHandler>

08005d54 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d54:	4801      	ldr	r0, [pc, #4]	; (8005d5c <TIM1_UP_TIM10_IRQHandler+0x8>)
 8005d56:	f7fc be4b 	b.w	80029f0 <HAL_TIM_IRQHandler>
 8005d5a:	bf00      	nop
 8005d5c:	2000428c 	.word	0x2000428c

08005d60 <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8005d60:	4801      	ldr	r0, [pc, #4]	; (8005d68 <OTG_HS_IRQHandler+0x8>)
 8005d62:	f7fb be79 	b.w	8001a58 <HAL_PCD_IRQHandler>
 8005d66:	bf00      	nop
 8005d68:	200054ec 	.word	0x200054ec

08005d6c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d6c:	4910      	ldr	r1, [pc, #64]	; (8005db0 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005d6e:	4b11      	ldr	r3, [pc, #68]	; (8005db4 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d70:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d74:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8005d78:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d7a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8005d7e:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005d80:	4c0d      	ldr	r4, [pc, #52]	; (8005db8 <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 8005d82:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8005d84:	f042 0201 	orr.w	r2, r2, #1
 8005d88:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005d8a:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005d92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d96:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8005d98:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005d9a:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005d9c:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005da0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005da4:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 8005da6:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005da8:	608c      	str	r4, [r1, #8]
#endif
}
 8005daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	e000ed00 	.word	0xe000ed00
 8005db4:	40023800 	.word	0x40023800
 8005db8:	24003010 	.word	0x24003010

08005dbc <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceHS;

/* init function */                                        
void MX_USB_DEVICE_Init(void)
{
 8005dbc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS);
 8005dbe:	4c09      	ldr	r4, [pc, #36]	; (8005de4 <MX_USB_DEVICE_Init+0x28>)
 8005dc0:	4909      	ldr	r1, [pc, #36]	; (8005de8 <MX_USB_DEVICE_Init+0x2c>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f7fd fdb7 	bl	8003938 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC);
 8005dca:	4620      	mov	r0, r4
 8005dcc:	4907      	ldr	r1, [pc, #28]	; (8005dec <MX_USB_DEVICE_Init+0x30>)
 8005dce:	f7fd fdc9 	bl	8003964 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS);
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	4906      	ldr	r1, [pc, #24]	; (8005df0 <MX_USB_DEVICE_Init+0x34>)
 8005dd6:	f7fd fd69 	bl	80038ac <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceHS);
 8005dda:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceHS);
 8005de0:	f7fd bdc8 	b.w	8003974 <USBD_Start>
 8005de4:	200042c8 	.word	0x200042c8
 8005de8:	20000128 	.word	0x20000128
 8005dec:	20000000 	.word	0x20000000
 8005df0:	20000118 	.word	0x20000118

08005df4 <CDC_DeInit_HS>:
static int8_t CDC_DeInit_HS(void)
{
  /* USER CODE BEGIN 9 */ 
  return (USBD_OK);
  /* USER CODE END 9 */ 
}
 8005df4:	2000      	movs	r0, #0
 8005df6:	4770      	bx	lr

08005df8 <CDC_Control_HS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 10 */
}
 8005df8:	2000      	movs	r0, #0
 8005dfa:	4770      	bx	lr

08005dfc <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS (uint8_t* Buf, uint32_t *Len)
{
 8005dfc:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN 11 */ 
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8005dfe:	4d0b      	ldr	r5, [pc, #44]	; (8005e2c <CDC_Receive_HS+0x30>)
{
 8005e00:	4604      	mov	r4, r0
 8005e02:	b086      	sub	sp, #24
 8005e04:	460e      	mov	r6, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8005e06:	4628      	mov	r0, r5
 8005e08:	4621      	mov	r1, r4
 8005e0a:	f7fd fd5f 	bl	80038cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f7fd fd7a 	bl	8003908 <USBD_CDC_ReceivePacket>
  uint16_t values[10];
  Riptide_CDC_Receive(Buf, Len, values);
 8005e14:	4631      	mov	r1, r6
 8005e16:	aa01      	add	r2, sp, #4
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f7ff fa65 	bl	80052e8 <Riptide_CDC_Receive>
  if (values != NULL) {
	  writePWM(values);
 8005e1e:	a801      	add	r0, sp, #4
 8005e20:	f7ff f9b2 	bl	8005188 <writePWM>
  } else {
	  resetPWM();
  }
  return (USBD_OK);
  /* USER CODE END 11 */ 
}
 8005e24:	2000      	movs	r0, #0
 8005e26:	b006      	add	sp, #24
 8005e28:	bd70      	pop	{r4, r5, r6, pc}
 8005e2a:	bf00      	nop
 8005e2c:	200042c8 	.word	0x200042c8

08005e30 <CDC_Init_HS>:
{ 
 8005e30:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8005e32:	4c06      	ldr	r4, [pc, #24]	; (8005e4c <CDC_Init_HS+0x1c>)
 8005e34:	4906      	ldr	r1, [pc, #24]	; (8005e50 <CDC_Init_HS+0x20>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f7fd fd3f 	bl	80038bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8005e3e:	4620      	mov	r0, r4
 8005e40:	4904      	ldr	r1, [pc, #16]	; (8005e54 <CDC_Init_HS+0x24>)
 8005e42:	f7fd fd43 	bl	80038cc <USBD_CDC_SetRxBuffer>
}
 8005e46:	2000      	movs	r0, #0
 8005e48:	bd10      	pop	{r4, pc}
 8005e4a:	bf00      	nop
 8005e4c:	200042c8 	.word	0x200042c8
 8005e50:	20004cec 	.word	0x20004cec
 8005e54:	200044ec 	.word	0x200044ec

08005e58 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be send
  * @param  Len: Number of data to be send (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8005e58:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 12 */ 
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8005e5a:	4c09      	ldr	r4, [pc, #36]	; (8005e80 <CDC_Transmit_HS+0x28>)
 8005e5c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 8005e60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e64:	b10b      	cbz	r3, 8005e6a <CDC_Transmit_HS+0x12>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
  /* USER CODE END 12 */ 
  return result;
}
 8005e66:	2001      	movs	r0, #1
 8005e68:	bd10      	pop	{r4, pc}
 8005e6a:	460a      	mov	r2, r1
 8005e6c:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f7fd fd24 	bl	80038bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8005e74:	4620      	mov	r0, r4
}
 8005e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8005e7a:	f7fd bd2d 	b.w	80038d8 <USBD_CDC_TransmitPacket>
 8005e7e:	bf00      	nop
 8005e80:	200042c8 	.word	0x200042c8

08005e84 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 8005e84:	6802      	ldr	r2, [r0, #0]
 8005e86:	4b15      	ldr	r3, [pc, #84]	; (8005edc <HAL_PCD_MspInit+0x58>)
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d000      	beq.n	8005e8e <HAL_PCD_MspInit+0xa>
 8005e8c:	4770      	bx	lr
{
 8005e8e:	b570      	push	{r4, r5, r6, lr}
 8005e90:	b086      	sub	sp, #24
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e92:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e94:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8005e96:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e98:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005e9a:	f44f 4640 	mov.w	r6, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e9e:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ea0:	480f      	ldr	r0, [pc, #60]	; (8005ee0 <HAL_PCD_MspInit+0x5c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ea2:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8005ea4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005ea6:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ea8:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eaa:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eac:	f7fb f83e 	bl	8000f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8005eb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ee4 <HAL_PCD_MspInit+0x60>)
 8005eb2:	9400      	str	r4, [sp, #0]
 8005eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eb6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005eba:	631a      	str	r2, [r3, #48]	; 0x30
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8005ec2:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8005ec4:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8005ec6:	2105      	movs	r1, #5
 8005ec8:	204d      	movs	r0, #77	; 0x4d
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8005eca:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8005ecc:	f7fa ffc6 	bl	8000e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8005ed0:	204d      	movs	r0, #77	; 0x4d
 8005ed2:	f7fa fff9 	bl	8000ec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8005ed6:	b006      	add	sp, #24
 8005ed8:	bd70      	pop	{r4, r5, r6, pc}
 8005eda:	bf00      	nop
 8005edc:	40040000 	.word	0x40040000
 8005ee0:	40020400 	.word	0x40020400
 8005ee4:	40023800 	.word	0x40023800

08005ee8 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005ee8:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8005eec:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005ef0:	f7fd bd58 	b.w	80039a4 <USBD_LL_SetupStage>

08005ef4 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005ef4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8005ef8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005efc:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005f00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f04:	f7fd bd7e 	b.w	8003a04 <USBD_LL_DataOutStage>

08005f08 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005f08:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8005f0c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005f10:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f16:	f7fd bdab 	b.w	8003a70 <USBD_LL_DataInStage>
 8005f1a:	bf00      	nop

08005f1c <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005f1c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005f20:	f7fd be2e 	b.w	8003b80 <USBD_LL_SOF>

08005f24 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8005f24:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 8005f26:	68c1      	ldr	r1, [r0, #12]
{ 
 8005f28:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8005f2a:	3100      	adds	r1, #0
 8005f2c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005f30:	bf18      	it	ne
 8005f32:	2101      	movne	r1, #1
 8005f34:	f7fd fe0e 	bl	8003b54 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f38:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 8005f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f40:	f7fd bde8 	b.w	8003b14 <USBD_LL_Reset>

08005f44 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 8005f44:	b510      	push	{r4, lr}
 8005f46:	4604      	mov	r4, r0
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005f48:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005f4c:	f7fd fe06 	bl	8003b5c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005f50:	6822      	ldr	r2, [r4, #0]
 8005f52:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8005f56:	f043 0301 	orr.w	r3, r3, #1
 8005f5a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005f5e:	6a23      	ldr	r3, [r4, #32]
 8005f60:	b123      	cbz	r3, 8005f6c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005f62:	4a03      	ldr	r2, [pc, #12]	; (8005f70 <HAL_PCD_SuspendCallback+0x2c>)
 8005f64:	6913      	ldr	r3, [r2, #16]
 8005f66:	f043 0306 	orr.w	r3, r3, #6
 8005f6a:	6113      	str	r3, [r2, #16]
 8005f6c:	bd10      	pop	{r4, pc}
 8005f6e:	bf00      	nop
 8005f70:	e000ed00 	.word	0xe000ed00

08005f74 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005f74:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005f78:	f7fd bdfa 	b.w	8003b70 <USBD_LL_Resume>

08005f7c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005f7c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005f80:	f7fd be0e 	b.w	8003ba0 <USBD_LL_IsoOUTIncomplete>

08005f84 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005f84:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005f88:	f7fd be08 	b.w	8003b9c <USBD_LL_IsoINIncomplete>

08005f8c <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005f8c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005f90:	f7fd be08 	b.w	8003ba4 <USBD_LL_DevConnected>

08005f94 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005f94:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005f98:	f7fd be06 	b.w	8003ba8 <USBD_LL_DevDisconnected>

08005f9c <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8005f9c:	b538      	push	{r3, r4, r5, lr}
  /* Init USB_IP */
  if (pdev->id == DEVICE_HS) {
 8005f9e:	7803      	ldrb	r3, [r0, #0]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d001      	beq.n	8005fa8 <USBD_LL_Init+0xc>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
  }
  return USBD_OK;
}
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
  hpcd_USB_OTG_HS.pData = pdev;
 8005fa8:	4b18      	ldr	r3, [pc, #96]	; (800600c <USBD_LL_Init+0x70>)
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8005faa:	4d19      	ldr	r5, [pc, #100]	; (8006010 <USBD_LL_Init+0x74>)
  hpcd_USB_OTG_HS.pData = pdev;
 8005fac:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8005fb0:	2200      	movs	r2, #0
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8005fb2:	2102      	movs	r1, #2
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8005fb4:	2406      	movs	r4, #6
  pdev->pData = &hpcd_USB_OTG_HS;
 8005fb6:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8005fba:	4618      	mov	r0, r3
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8005fbc:	601d      	str	r5, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8005fbe:	605c      	str	r4, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8005fc0:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8005fc2:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8005fc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 8005fc6:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8005fc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8005fca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8005fcc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8005fce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8005fd0:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8005fd2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8005fd4:	f7fb fcbc 	bl	8001950 <HAL_PCD_Init>
 8005fd8:	b988      	cbnz	r0, 8005ffe <USBD_LL_Init+0x62>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8005fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fde:	480b      	ldr	r0, [pc, #44]	; (800600c <USBD_LL_Init+0x70>)
 8005fe0:	f7fc f990 	bl	8002304 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8005fe4:	2280      	movs	r2, #128	; 0x80
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	4808      	ldr	r0, [pc, #32]	; (800600c <USBD_LL_Init+0x70>)
 8005fea:	f7fc f965 	bl	80022b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8005fee:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	4805      	ldr	r0, [pc, #20]	; (800600c <USBD_LL_Init+0x70>)
 8005ff6:	f7fc f95f 	bl	80022b8 <HAL_PCDEx_SetTxFiFo>
}
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	bd38      	pop	{r3, r4, r5, pc}
    _Error_Handler(__FILE__, __LINE__);
 8005ffe:	f240 1135 	movw	r1, #309	; 0x135
 8006002:	4804      	ldr	r0, [pc, #16]	; (8006014 <USBD_LL_Init+0x78>)
 8006004:	f7ff f91e 	bl	8005244 <_Error_Handler>
 8006008:	e7e7      	b.n	8005fda <USBD_LL_Init+0x3e>
 800600a:	bf00      	nop
 800600c:	200054ec 	.word	0x200054ec
 8006010:	40040000 	.word	0x40040000
 8006014:	080067ac 	.word	0x080067ac

08006018 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006018:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800601a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800601e:	f7fb fd05 	bl	8001a2c <HAL_PCD_Start>
 8006022:	2803      	cmp	r0, #3
 8006024:	bf9a      	itte	ls
 8006026:	4b02      	ldrls	r3, [pc, #8]	; (8006030 <USBD_LL_Start+0x18>)
 8006028:	5c18      	ldrbls	r0, [r3, r0]
 800602a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 800602c:	bd08      	pop	{r3, pc}
 800602e:	bf00      	nop
 8006030:	080067a8 	.word	0x080067a8

08006034 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8006034:	b510      	push	{r4, lr}
 8006036:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8006038:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800603c:	4613      	mov	r3, r2
 800603e:	4622      	mov	r2, r4
 8006040:	f7fc f828 	bl	8002094 <HAL_PCD_EP_Open>
 8006044:	2803      	cmp	r0, #3
 8006046:	bf9a      	itte	ls
 8006048:	4b01      	ldrls	r3, [pc, #4]	; (8006050 <USBD_LL_OpenEP+0x1c>)
 800604a:	5c18      	ldrbls	r0, [r3, r0]
 800604c:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 800604e:	bd10      	pop	{r4, pc}
 8006050:	080067a8 	.word	0x080067a8

08006054 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8006054:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006056:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800605a:	f7fc f85b 	bl	8002114 <HAL_PCD_EP_Close>
 800605e:	2803      	cmp	r0, #3
 8006060:	bf9a      	itte	ls
 8006062:	4b02      	ldrls	r3, [pc, #8]	; (800606c <USBD_LL_CloseEP+0x18>)
 8006064:	5c18      	ldrbls	r0, [r3, r0]
 8006066:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8006068:	bd08      	pop	{r3, pc}
 800606a:	bf00      	nop
 800606c:	080067a8 	.word	0x080067a8

08006070 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8006070:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006072:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8006076:	f7fc f8c9 	bl	800220c <HAL_PCD_EP_SetStall>
 800607a:	2803      	cmp	r0, #3
 800607c:	bf9a      	itte	ls
 800607e:	4b02      	ldrls	r3, [pc, #8]	; (8006088 <USBD_LL_StallEP+0x18>)
 8006080:	5c18      	ldrbls	r0, [r3, r0]
 8006082:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8006084:	bd08      	pop	{r3, pc}
 8006086:	bf00      	nop
 8006088:	080067a8 	.word	0x080067a8

0800608c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800608c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800608e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8006092:	f7fc f8e9 	bl	8002268 <HAL_PCD_EP_ClrStall>
 8006096:	2803      	cmp	r0, #3
 8006098:	bf9a      	itte	ls
 800609a:	4b02      	ldrls	r3, [pc, #8]	; (80060a4 <USBD_LL_ClearStallEP+0x18>)
 800609c:	5c18      	ldrbls	r0, [r3, r0]
 800609e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80060a0:	bd08      	pop	{r3, pc}
 80060a2:	bf00      	nop
 80060a4:	080067a8 	.word	0x080067a8

080060a8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 80060a8:	060b      	lsls	r3, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80060aa:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  if((ep_addr & 0x80) == 0x80)
 80060ae:	d406      	bmi.n	80060be <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80060b0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80060b4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80060b8:	f891 01fa 	ldrb.w	r0, [r1, #506]	; 0x1fa
  }
}
 80060bc:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80060be:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80060c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80060c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80060ca:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 80060ce:	4770      	bx	lr

080060d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 80060d0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80060d2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80060d6:	f7fb ffcb 	bl	8002070 <HAL_PCD_SetAddress>
 80060da:	2803      	cmp	r0, #3
 80060dc:	bf9a      	itte	ls
 80060de:	4b02      	ldrls	r3, [pc, #8]	; (80060e8 <USBD_LL_SetUSBAddress+0x18>)
 80060e0:	5c18      	ldrbls	r0, [r3, r0]
 80060e2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80060e4:	bd08      	pop	{r3, pc}
 80060e6:	bf00      	nop
 80060e8:	080067a8 	.word	0x080067a8

080060ec <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 80060ec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80060ee:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80060f2:	f7fc f867 	bl	80021c4 <HAL_PCD_EP_Transmit>
 80060f6:	2803      	cmp	r0, #3
 80060f8:	bf9a      	itte	ls
 80060fa:	4b02      	ldrls	r3, [pc, #8]	; (8006104 <USBD_LL_Transmit+0x18>)
 80060fc:	5c18      	ldrbls	r0, [r3, r0]
 80060fe:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8006100:	bd08      	pop	{r3, pc}
 8006102:	bf00      	nop
 8006104:	080067a8 	.word	0x080067a8

08006108 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8006108:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800610a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800610e:	f7fc f827 	bl	8002160 <HAL_PCD_EP_Receive>
 8006112:	2803      	cmp	r0, #3
 8006114:	bf9a      	itte	ls
 8006116:	4b02      	ldrls	r3, [pc, #8]	; (8006120 <USBD_LL_PrepareReceive+0x18>)
 8006118:	5c18      	ldrbls	r0, [r3, r0]
 800611a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 800611c:	bd08      	pop	{r3, pc}
 800611e:	bf00      	nop
 8006120:	080067a8 	.word	0x080067a8

08006124 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8006124:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006126:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800612a:	f7fc f841 	bl	80021b0 <HAL_PCD_EP_GetRxCount>
}
 800612e:	bd08      	pop	{r3, pc}

08006130 <USBD_HS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_HS_DeviceDesc);
 8006130:	2312      	movs	r3, #18
 8006132:	800b      	strh	r3, [r1, #0]
  return USBD_HS_DeviceDesc;
}
 8006134:	4800      	ldr	r0, [pc, #0]	; (8006138 <USBD_HS_DeviceDescriptor+0x8>)
 8006136:	4770      	bx	lr
 8006138:	20000144 	.word	0x20000144

0800613c <USBD_HS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 800613c:	2304      	movs	r3, #4
 800613e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8006140:	4800      	ldr	r0, [pc, #0]	; (8006144 <USBD_HS_LangIDStrDescriptor+0x8>)
 8006142:	4770      	bx	lr
 8006144:	20000158 	.word	0x20000158

08006148 <USBD_HS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8006148:	b510      	push	{r4, lr}
  USBD_GetString ((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800614a:	4c04      	ldr	r4, [pc, #16]	; (800615c <USBD_HS_ManufacturerStrDescriptor+0x14>)
 800614c:	4804      	ldr	r0, [pc, #16]	; (8006160 <USBD_HS_ManufacturerStrDescriptor+0x18>)
 800614e:	460a      	mov	r2, r1
 8006150:	4621      	mov	r1, r4
 8006152:	f7fd ff1f 	bl	8003f94 <USBD_GetString>
  return USBD_StrDesc;
}
 8006156:	4620      	mov	r0, r4
 8006158:	bd10      	pop	{r4, pc}
 800615a:	bf00      	nop
 800615c:	200058dc 	.word	0x200058dc
 8006160:	080067dc 	.word	0x080067dc

08006164 <USBD_HS_ProductStrDescriptor>:
{
 8006164:	b510      	push	{r4, lr}
    USBD_GetString ((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8006166:	4c04      	ldr	r4, [pc, #16]	; (8006178 <USBD_HS_ProductStrDescriptor+0x14>)
 8006168:	4804      	ldr	r0, [pc, #16]	; (800617c <USBD_HS_ProductStrDescriptor+0x18>)
 800616a:	460a      	mov	r2, r1
 800616c:	4621      	mov	r1, r4
 800616e:	f7fd ff11 	bl	8003f94 <USBD_GetString>
}
 8006172:	4620      	mov	r0, r4
 8006174:	bd10      	pop	{r4, pc}
 8006176:	bf00      	nop
 8006178:	200058dc 	.word	0x200058dc
 800617c:	080067f0 	.word	0x080067f0

08006180 <USBD_HS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8006180:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString ((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
 8006182:	4c04      	ldr	r4, [pc, #16]	; (8006194 <USBD_HS_SerialStrDescriptor+0x14>)
 8006184:	4804      	ldr	r0, [pc, #16]	; (8006198 <USBD_HS_SerialStrDescriptor+0x18>)
 8006186:	460a      	mov	r2, r1
 8006188:	4621      	mov	r1, r4
 800618a:	f7fd ff03 	bl	8003f94 <USBD_GetString>
  else
  {
    USBD_GetString ((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 800618e:	4620      	mov	r0, r4
 8006190:	bd10      	pop	{r4, pc}
 8006192:	bf00      	nop
 8006194:	200058dc 	.word	0x200058dc
 8006198:	08006808 	.word	0x08006808

0800619c <USBD_HS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800619c:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString ((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800619e:	4c04      	ldr	r4, [pc, #16]	; (80061b0 <USBD_HS_ConfigStrDescriptor+0x14>)
 80061a0:	4804      	ldr	r0, [pc, #16]	; (80061b4 <USBD_HS_ConfigStrDescriptor+0x18>)
 80061a2:	460a      	mov	r2, r1
 80061a4:	4621      	mov	r1, r4
 80061a6:	f7fd fef5 	bl	8003f94 <USBD_GetString>
  else
  {
    USBD_GetString ((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 80061aa:	4620      	mov	r0, r4
 80061ac:	bd10      	pop	{r4, pc}
 80061ae:	bf00      	nop
 80061b0:	200058dc 	.word	0x200058dc
 80061b4:	080067c0 	.word	0x080067c0

080061b8 <USBD_HS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80061b8:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString ((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80061ba:	4c04      	ldr	r4, [pc, #16]	; (80061cc <USBD_HS_InterfaceStrDescriptor+0x14>)
 80061bc:	4804      	ldr	r0, [pc, #16]	; (80061d0 <USBD_HS_InterfaceStrDescriptor+0x18>)
 80061be:	460a      	mov	r2, r1
 80061c0:	4621      	mov	r1, r4
 80061c2:	f7fd fee7 	bl	8003f94 <USBD_GetString>
  else
  {
    USBD_GetString ((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 80061c6:	4620      	mov	r0, r4
 80061c8:	bd10      	pop	{r4, pc}
 80061ca:	bf00      	nop
 80061cc:	200058dc 	.word	0x200058dc
 80061d0:	080067cc 	.word	0x080067cc

080061d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80061d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800620c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80061d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80061da:	e003      	b.n	80061e4 <LoopCopyDataInit>

080061dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80061dc:	4b0c      	ldr	r3, [pc, #48]	; (8006210 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80061de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80061e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80061e2:	3104      	adds	r1, #4

080061e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80061e4:	480b      	ldr	r0, [pc, #44]	; (8006214 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80061e6:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80061e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80061ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80061ec:	d3f6      	bcc.n	80061dc <CopyDataInit>
  ldr  r2, =_sbss
 80061ee:	4a0b      	ldr	r2, [pc, #44]	; (800621c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80061f0:	e002      	b.n	80061f8 <LoopFillZerobss>

080061f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80061f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80061f4:	f842 3b04 	str.w	r3, [r2], #4

080061f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80061f8:	4b09      	ldr	r3, [pc, #36]	; (8006220 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80061fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80061fc:	d3f9      	bcc.n	80061f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80061fe:	f7ff fdb5 	bl	8005d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006202:	f000 f815 	bl	8006230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006206:	f7fe fddb 	bl	8004dc0 <main>
  bx  lr    
 800620a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800620c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006210:	08006958 	.word	0x08006958
  ldr  r0, =_sdata
 8006214:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006218:	2000032c 	.word	0x2000032c
  ldr  r2, =_sbss
 800621c:	2000032c 	.word	0x2000032c
  ldr  r3, = _ebss
 8006220:	20005ae0 	.word	0x20005ae0

08006224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006224:	e7fe      	b.n	8006224 <ADC_IRQHandler>

08006226 <atoi>:
 8006226:	220a      	movs	r2, #10
 8006228:	2100      	movs	r1, #0
 800622a:	f000 b99b 	b.w	8006564 <strtol>
	...

08006230 <__libc_init_array>:
 8006230:	b570      	push	{r4, r5, r6, lr}
 8006232:	4e0d      	ldr	r6, [pc, #52]	; (8006268 <__libc_init_array+0x38>)
 8006234:	4c0d      	ldr	r4, [pc, #52]	; (800626c <__libc_init_array+0x3c>)
 8006236:	1ba4      	subs	r4, r4, r6
 8006238:	10a4      	asrs	r4, r4, #2
 800623a:	2500      	movs	r5, #0
 800623c:	42a5      	cmp	r5, r4
 800623e:	d109      	bne.n	8006254 <__libc_init_array+0x24>
 8006240:	4e0b      	ldr	r6, [pc, #44]	; (8006270 <__libc_init_array+0x40>)
 8006242:	4c0c      	ldr	r4, [pc, #48]	; (8006274 <__libc_init_array+0x44>)
 8006244:	f000 fa16 	bl	8006674 <_init>
 8006248:	1ba4      	subs	r4, r4, r6
 800624a:	10a4      	asrs	r4, r4, #2
 800624c:	2500      	movs	r5, #0
 800624e:	42a5      	cmp	r5, r4
 8006250:	d105      	bne.n	800625e <__libc_init_array+0x2e>
 8006252:	bd70      	pop	{r4, r5, r6, pc}
 8006254:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006258:	4798      	blx	r3
 800625a:	3501      	adds	r5, #1
 800625c:	e7ee      	b.n	800623c <__libc_init_array+0xc>
 800625e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006262:	4798      	blx	r3
 8006264:	3501      	adds	r5, #1
 8006266:	e7f2      	b.n	800624e <__libc_init_array+0x1e>
 8006268:	08006950 	.word	0x08006950
 800626c:	08006950 	.word	0x08006950
 8006270:	08006950 	.word	0x08006950
 8006274:	08006954 	.word	0x08006954

08006278 <__itoa>:
 8006278:	1e93      	subs	r3, r2, #2
 800627a:	2b22      	cmp	r3, #34	; 0x22
 800627c:	b510      	push	{r4, lr}
 800627e:	460c      	mov	r4, r1
 8006280:	d904      	bls.n	800628c <__itoa+0x14>
 8006282:	2300      	movs	r3, #0
 8006284:	700b      	strb	r3, [r1, #0]
 8006286:	461c      	mov	r4, r3
 8006288:	4620      	mov	r0, r4
 800628a:	bd10      	pop	{r4, pc}
 800628c:	2a0a      	cmp	r2, #10
 800628e:	d109      	bne.n	80062a4 <__itoa+0x2c>
 8006290:	2800      	cmp	r0, #0
 8006292:	da07      	bge.n	80062a4 <__itoa+0x2c>
 8006294:	232d      	movs	r3, #45	; 0x2d
 8006296:	700b      	strb	r3, [r1, #0]
 8006298:	4240      	negs	r0, r0
 800629a:	2101      	movs	r1, #1
 800629c:	4421      	add	r1, r4
 800629e:	f000 f977 	bl	8006590 <__utoa>
 80062a2:	e7f1      	b.n	8006288 <__itoa+0x10>
 80062a4:	2100      	movs	r1, #0
 80062a6:	e7f9      	b.n	800629c <__itoa+0x24>

080062a8 <itoa>:
 80062a8:	f7ff bfe6 	b.w	8006278 <__itoa>

080062ac <malloc>:
 80062ac:	4b02      	ldr	r3, [pc, #8]	; (80062b8 <malloc+0xc>)
 80062ae:	4601      	mov	r1, r0
 80062b0:	6818      	ldr	r0, [r3, #0]
 80062b2:	f000 b859 	b.w	8006368 <_malloc_r>
 80062b6:	bf00      	nop
 80062b8:	2000015c 	.word	0x2000015c

080062bc <free>:
 80062bc:	4b02      	ldr	r3, [pc, #8]	; (80062c8 <free+0xc>)
 80062be:	4601      	mov	r1, r0
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	f000 b803 	b.w	80062cc <_free_r>
 80062c6:	bf00      	nop
 80062c8:	2000015c 	.word	0x2000015c

080062cc <_free_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4605      	mov	r5, r0
 80062d0:	2900      	cmp	r1, #0
 80062d2:	d045      	beq.n	8006360 <_free_r+0x94>
 80062d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062d8:	1f0c      	subs	r4, r1, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	bfb8      	it	lt
 80062de:	18e4      	addlt	r4, r4, r3
 80062e0:	f000 f9ab 	bl	800663a <__malloc_lock>
 80062e4:	4a1f      	ldr	r2, [pc, #124]	; (8006364 <_free_r+0x98>)
 80062e6:	6813      	ldr	r3, [r2, #0]
 80062e8:	4610      	mov	r0, r2
 80062ea:	b933      	cbnz	r3, 80062fa <_free_r+0x2e>
 80062ec:	6063      	str	r3, [r4, #4]
 80062ee:	6014      	str	r4, [r2, #0]
 80062f0:	4628      	mov	r0, r5
 80062f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062f6:	f000 b9a1 	b.w	800663c <__malloc_unlock>
 80062fa:	42a3      	cmp	r3, r4
 80062fc:	d90c      	bls.n	8006318 <_free_r+0x4c>
 80062fe:	6821      	ldr	r1, [r4, #0]
 8006300:	1862      	adds	r2, r4, r1
 8006302:	4293      	cmp	r3, r2
 8006304:	bf04      	itt	eq
 8006306:	681a      	ldreq	r2, [r3, #0]
 8006308:	685b      	ldreq	r3, [r3, #4]
 800630a:	6063      	str	r3, [r4, #4]
 800630c:	bf04      	itt	eq
 800630e:	1852      	addeq	r2, r2, r1
 8006310:	6022      	streq	r2, [r4, #0]
 8006312:	6004      	str	r4, [r0, #0]
 8006314:	e7ec      	b.n	80062f0 <_free_r+0x24>
 8006316:	4613      	mov	r3, r2
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	b10a      	cbz	r2, 8006320 <_free_r+0x54>
 800631c:	42a2      	cmp	r2, r4
 800631e:	d9fa      	bls.n	8006316 <_free_r+0x4a>
 8006320:	6819      	ldr	r1, [r3, #0]
 8006322:	1858      	adds	r0, r3, r1
 8006324:	42a0      	cmp	r0, r4
 8006326:	d10b      	bne.n	8006340 <_free_r+0x74>
 8006328:	6820      	ldr	r0, [r4, #0]
 800632a:	4401      	add	r1, r0
 800632c:	1858      	adds	r0, r3, r1
 800632e:	4282      	cmp	r2, r0
 8006330:	6019      	str	r1, [r3, #0]
 8006332:	d1dd      	bne.n	80062f0 <_free_r+0x24>
 8006334:	6810      	ldr	r0, [r2, #0]
 8006336:	6852      	ldr	r2, [r2, #4]
 8006338:	605a      	str	r2, [r3, #4]
 800633a:	4401      	add	r1, r0
 800633c:	6019      	str	r1, [r3, #0]
 800633e:	e7d7      	b.n	80062f0 <_free_r+0x24>
 8006340:	d902      	bls.n	8006348 <_free_r+0x7c>
 8006342:	230c      	movs	r3, #12
 8006344:	602b      	str	r3, [r5, #0]
 8006346:	e7d3      	b.n	80062f0 <_free_r+0x24>
 8006348:	6820      	ldr	r0, [r4, #0]
 800634a:	1821      	adds	r1, r4, r0
 800634c:	428a      	cmp	r2, r1
 800634e:	bf04      	itt	eq
 8006350:	6811      	ldreq	r1, [r2, #0]
 8006352:	6852      	ldreq	r2, [r2, #4]
 8006354:	6062      	str	r2, [r4, #4]
 8006356:	bf04      	itt	eq
 8006358:	1809      	addeq	r1, r1, r0
 800635a:	6021      	streq	r1, [r4, #0]
 800635c:	605c      	str	r4, [r3, #4]
 800635e:	e7c7      	b.n	80062f0 <_free_r+0x24>
 8006360:	bd38      	pop	{r3, r4, r5, pc}
 8006362:	bf00      	nop
 8006364:	20004094 	.word	0x20004094

08006368 <_malloc_r>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	1ccd      	adds	r5, r1, #3
 800636c:	f025 0503 	bic.w	r5, r5, #3
 8006370:	3508      	adds	r5, #8
 8006372:	2d0c      	cmp	r5, #12
 8006374:	bf38      	it	cc
 8006376:	250c      	movcc	r5, #12
 8006378:	2d00      	cmp	r5, #0
 800637a:	4606      	mov	r6, r0
 800637c:	db01      	blt.n	8006382 <_malloc_r+0x1a>
 800637e:	42a9      	cmp	r1, r5
 8006380:	d903      	bls.n	800638a <_malloc_r+0x22>
 8006382:	230c      	movs	r3, #12
 8006384:	6033      	str	r3, [r6, #0]
 8006386:	2000      	movs	r0, #0
 8006388:	bd70      	pop	{r4, r5, r6, pc}
 800638a:	f000 f956 	bl	800663a <__malloc_lock>
 800638e:	4a23      	ldr	r2, [pc, #140]	; (800641c <_malloc_r+0xb4>)
 8006390:	6814      	ldr	r4, [r2, #0]
 8006392:	4621      	mov	r1, r4
 8006394:	b991      	cbnz	r1, 80063bc <_malloc_r+0x54>
 8006396:	4c22      	ldr	r4, [pc, #136]	; (8006420 <_malloc_r+0xb8>)
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	b91b      	cbnz	r3, 80063a4 <_malloc_r+0x3c>
 800639c:	4630      	mov	r0, r6
 800639e:	f000 f841 	bl	8006424 <_sbrk_r>
 80063a2:	6020      	str	r0, [r4, #0]
 80063a4:	4629      	mov	r1, r5
 80063a6:	4630      	mov	r0, r6
 80063a8:	f000 f83c 	bl	8006424 <_sbrk_r>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d126      	bne.n	80063fe <_malloc_r+0x96>
 80063b0:	230c      	movs	r3, #12
 80063b2:	6033      	str	r3, [r6, #0]
 80063b4:	4630      	mov	r0, r6
 80063b6:	f000 f941 	bl	800663c <__malloc_unlock>
 80063ba:	e7e4      	b.n	8006386 <_malloc_r+0x1e>
 80063bc:	680b      	ldr	r3, [r1, #0]
 80063be:	1b5b      	subs	r3, r3, r5
 80063c0:	d41a      	bmi.n	80063f8 <_malloc_r+0x90>
 80063c2:	2b0b      	cmp	r3, #11
 80063c4:	d90f      	bls.n	80063e6 <_malloc_r+0x7e>
 80063c6:	600b      	str	r3, [r1, #0]
 80063c8:	50cd      	str	r5, [r1, r3]
 80063ca:	18cc      	adds	r4, r1, r3
 80063cc:	4630      	mov	r0, r6
 80063ce:	f000 f935 	bl	800663c <__malloc_unlock>
 80063d2:	f104 000b 	add.w	r0, r4, #11
 80063d6:	1d23      	adds	r3, r4, #4
 80063d8:	f020 0007 	bic.w	r0, r0, #7
 80063dc:	1ac3      	subs	r3, r0, r3
 80063de:	d01b      	beq.n	8006418 <_malloc_r+0xb0>
 80063e0:	425a      	negs	r2, r3
 80063e2:	50e2      	str	r2, [r4, r3]
 80063e4:	bd70      	pop	{r4, r5, r6, pc}
 80063e6:	428c      	cmp	r4, r1
 80063e8:	bf0d      	iteet	eq
 80063ea:	6863      	ldreq	r3, [r4, #4]
 80063ec:	684b      	ldrne	r3, [r1, #4]
 80063ee:	6063      	strne	r3, [r4, #4]
 80063f0:	6013      	streq	r3, [r2, #0]
 80063f2:	bf18      	it	ne
 80063f4:	460c      	movne	r4, r1
 80063f6:	e7e9      	b.n	80063cc <_malloc_r+0x64>
 80063f8:	460c      	mov	r4, r1
 80063fa:	6849      	ldr	r1, [r1, #4]
 80063fc:	e7ca      	b.n	8006394 <_malloc_r+0x2c>
 80063fe:	1cc4      	adds	r4, r0, #3
 8006400:	f024 0403 	bic.w	r4, r4, #3
 8006404:	42a0      	cmp	r0, r4
 8006406:	d005      	beq.n	8006414 <_malloc_r+0xac>
 8006408:	1a21      	subs	r1, r4, r0
 800640a:	4630      	mov	r0, r6
 800640c:	f000 f80a 	bl	8006424 <_sbrk_r>
 8006410:	3001      	adds	r0, #1
 8006412:	d0cd      	beq.n	80063b0 <_malloc_r+0x48>
 8006414:	6025      	str	r5, [r4, #0]
 8006416:	e7d9      	b.n	80063cc <_malloc_r+0x64>
 8006418:	bd70      	pop	{r4, r5, r6, pc}
 800641a:	bf00      	nop
 800641c:	20004094 	.word	0x20004094
 8006420:	20004098 	.word	0x20004098

08006424 <_sbrk_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	4c06      	ldr	r4, [pc, #24]	; (8006440 <_sbrk_r+0x1c>)
 8006428:	2300      	movs	r3, #0
 800642a:	4605      	mov	r5, r0
 800642c:	4608      	mov	r0, r1
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	f000 f912 	bl	8006658 <_sbrk>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_sbrk_r+0x1a>
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	b103      	cbz	r3, 800643e <_sbrk_r+0x1a>
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	20005adc 	.word	0x20005adc

08006444 <strcat>:
 8006444:	b510      	push	{r4, lr}
 8006446:	4602      	mov	r2, r0
 8006448:	4613      	mov	r3, r2
 800644a:	3201      	adds	r2, #1
 800644c:	781c      	ldrb	r4, [r3, #0]
 800644e:	2c00      	cmp	r4, #0
 8006450:	d1fa      	bne.n	8006448 <strcat+0x4>
 8006452:	3b01      	subs	r3, #1
 8006454:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006458:	f803 2f01 	strb.w	r2, [r3, #1]!
 800645c:	2a00      	cmp	r2, #0
 800645e:	d1f9      	bne.n	8006454 <strcat+0x10>
 8006460:	bd10      	pop	{r4, pc}

08006462 <_strtol_l.isra.0>:
 8006462:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006466:	4680      	mov	r8, r0
 8006468:	4689      	mov	r9, r1
 800646a:	4692      	mov	sl, r2
 800646c:	461f      	mov	r7, r3
 800646e:	468b      	mov	fp, r1
 8006470:	465d      	mov	r5, fp
 8006472:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006474:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006478:	f000 f8ca 	bl	8006610 <__locale_ctype_ptr_l>
 800647c:	4420      	add	r0, r4
 800647e:	7846      	ldrb	r6, [r0, #1]
 8006480:	f016 0608 	ands.w	r6, r6, #8
 8006484:	d10b      	bne.n	800649e <_strtol_l.isra.0+0x3c>
 8006486:	2c2d      	cmp	r4, #45	; 0x2d
 8006488:	d10b      	bne.n	80064a2 <_strtol_l.isra.0+0x40>
 800648a:	782c      	ldrb	r4, [r5, #0]
 800648c:	2601      	movs	r6, #1
 800648e:	f10b 0502 	add.w	r5, fp, #2
 8006492:	b167      	cbz	r7, 80064ae <_strtol_l.isra.0+0x4c>
 8006494:	2f10      	cmp	r7, #16
 8006496:	d114      	bne.n	80064c2 <_strtol_l.isra.0+0x60>
 8006498:	2c30      	cmp	r4, #48	; 0x30
 800649a:	d00a      	beq.n	80064b2 <_strtol_l.isra.0+0x50>
 800649c:	e011      	b.n	80064c2 <_strtol_l.isra.0+0x60>
 800649e:	46ab      	mov	fp, r5
 80064a0:	e7e6      	b.n	8006470 <_strtol_l.isra.0+0xe>
 80064a2:	2c2b      	cmp	r4, #43	; 0x2b
 80064a4:	bf04      	itt	eq
 80064a6:	782c      	ldrbeq	r4, [r5, #0]
 80064a8:	f10b 0502 	addeq.w	r5, fp, #2
 80064ac:	e7f1      	b.n	8006492 <_strtol_l.isra.0+0x30>
 80064ae:	2c30      	cmp	r4, #48	; 0x30
 80064b0:	d127      	bne.n	8006502 <_strtol_l.isra.0+0xa0>
 80064b2:	782b      	ldrb	r3, [r5, #0]
 80064b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80064b8:	2b58      	cmp	r3, #88	; 0x58
 80064ba:	d14b      	bne.n	8006554 <_strtol_l.isra.0+0xf2>
 80064bc:	786c      	ldrb	r4, [r5, #1]
 80064be:	2710      	movs	r7, #16
 80064c0:	3502      	adds	r5, #2
 80064c2:	2e00      	cmp	r6, #0
 80064c4:	bf0c      	ite	eq
 80064c6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80064ca:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80064ce:	2200      	movs	r2, #0
 80064d0:	fbb1 fef7 	udiv	lr, r1, r7
 80064d4:	4610      	mov	r0, r2
 80064d6:	fb07 1c1e 	mls	ip, r7, lr, r1
 80064da:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80064de:	2b09      	cmp	r3, #9
 80064e0:	d811      	bhi.n	8006506 <_strtol_l.isra.0+0xa4>
 80064e2:	461c      	mov	r4, r3
 80064e4:	42a7      	cmp	r7, r4
 80064e6:	dd1d      	ble.n	8006524 <_strtol_l.isra.0+0xc2>
 80064e8:	1c53      	adds	r3, r2, #1
 80064ea:	d007      	beq.n	80064fc <_strtol_l.isra.0+0x9a>
 80064ec:	4586      	cmp	lr, r0
 80064ee:	d316      	bcc.n	800651e <_strtol_l.isra.0+0xbc>
 80064f0:	d101      	bne.n	80064f6 <_strtol_l.isra.0+0x94>
 80064f2:	45a4      	cmp	ip, r4
 80064f4:	db13      	blt.n	800651e <_strtol_l.isra.0+0xbc>
 80064f6:	fb00 4007 	mla	r0, r0, r7, r4
 80064fa:	2201      	movs	r2, #1
 80064fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006500:	e7eb      	b.n	80064da <_strtol_l.isra.0+0x78>
 8006502:	270a      	movs	r7, #10
 8006504:	e7dd      	b.n	80064c2 <_strtol_l.isra.0+0x60>
 8006506:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800650a:	2b19      	cmp	r3, #25
 800650c:	d801      	bhi.n	8006512 <_strtol_l.isra.0+0xb0>
 800650e:	3c37      	subs	r4, #55	; 0x37
 8006510:	e7e8      	b.n	80064e4 <_strtol_l.isra.0+0x82>
 8006512:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006516:	2b19      	cmp	r3, #25
 8006518:	d804      	bhi.n	8006524 <_strtol_l.isra.0+0xc2>
 800651a:	3c57      	subs	r4, #87	; 0x57
 800651c:	e7e2      	b.n	80064e4 <_strtol_l.isra.0+0x82>
 800651e:	f04f 32ff 	mov.w	r2, #4294967295
 8006522:	e7eb      	b.n	80064fc <_strtol_l.isra.0+0x9a>
 8006524:	1c53      	adds	r3, r2, #1
 8006526:	d108      	bne.n	800653a <_strtol_l.isra.0+0xd8>
 8006528:	2322      	movs	r3, #34	; 0x22
 800652a:	f8c8 3000 	str.w	r3, [r8]
 800652e:	4608      	mov	r0, r1
 8006530:	f1ba 0f00 	cmp.w	sl, #0
 8006534:	d107      	bne.n	8006546 <_strtol_l.isra.0+0xe4>
 8006536:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800653a:	b106      	cbz	r6, 800653e <_strtol_l.isra.0+0xdc>
 800653c:	4240      	negs	r0, r0
 800653e:	f1ba 0f00 	cmp.w	sl, #0
 8006542:	d00c      	beq.n	800655e <_strtol_l.isra.0+0xfc>
 8006544:	b122      	cbz	r2, 8006550 <_strtol_l.isra.0+0xee>
 8006546:	3d01      	subs	r5, #1
 8006548:	f8ca 5000 	str.w	r5, [sl]
 800654c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006550:	464d      	mov	r5, r9
 8006552:	e7f9      	b.n	8006548 <_strtol_l.isra.0+0xe6>
 8006554:	2430      	movs	r4, #48	; 0x30
 8006556:	2f00      	cmp	r7, #0
 8006558:	d1b3      	bne.n	80064c2 <_strtol_l.isra.0+0x60>
 800655a:	2708      	movs	r7, #8
 800655c:	e7b1      	b.n	80064c2 <_strtol_l.isra.0+0x60>
 800655e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006564 <strtol>:
 8006564:	4b08      	ldr	r3, [pc, #32]	; (8006588 <strtol+0x24>)
 8006566:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006568:	681c      	ldr	r4, [r3, #0]
 800656a:	4d08      	ldr	r5, [pc, #32]	; (800658c <strtol+0x28>)
 800656c:	6a23      	ldr	r3, [r4, #32]
 800656e:	2b00      	cmp	r3, #0
 8006570:	bf08      	it	eq
 8006572:	462b      	moveq	r3, r5
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	4613      	mov	r3, r2
 8006578:	460a      	mov	r2, r1
 800657a:	4601      	mov	r1, r0
 800657c:	4620      	mov	r0, r4
 800657e:	f7ff ff70 	bl	8006462 <_strtol_l.isra.0>
 8006582:	b003      	add	sp, #12
 8006584:	bd30      	pop	{r4, r5, pc}
 8006586:	bf00      	nop
 8006588:	2000015c 	.word	0x2000015c
 800658c:	200001c0 	.word	0x200001c0

08006590 <__utoa>:
 8006590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006592:	4c1e      	ldr	r4, [pc, #120]	; (800660c <__utoa+0x7c>)
 8006594:	b08b      	sub	sp, #44	; 0x2c
 8006596:	4603      	mov	r3, r0
 8006598:	460f      	mov	r7, r1
 800659a:	466d      	mov	r5, sp
 800659c:	f104 0e20 	add.w	lr, r4, #32
 80065a0:	6820      	ldr	r0, [r4, #0]
 80065a2:	6861      	ldr	r1, [r4, #4]
 80065a4:	462e      	mov	r6, r5
 80065a6:	c603      	stmia	r6!, {r0, r1}
 80065a8:	3408      	adds	r4, #8
 80065aa:	4574      	cmp	r4, lr
 80065ac:	4635      	mov	r5, r6
 80065ae:	d1f7      	bne.n	80065a0 <__utoa+0x10>
 80065b0:	7921      	ldrb	r1, [r4, #4]
 80065b2:	7131      	strb	r1, [r6, #4]
 80065b4:	1e91      	subs	r1, r2, #2
 80065b6:	6820      	ldr	r0, [r4, #0]
 80065b8:	6030      	str	r0, [r6, #0]
 80065ba:	2922      	cmp	r1, #34	; 0x22
 80065bc:	f04f 0100 	mov.w	r1, #0
 80065c0:	d904      	bls.n	80065cc <__utoa+0x3c>
 80065c2:	7039      	strb	r1, [r7, #0]
 80065c4:	460f      	mov	r7, r1
 80065c6:	4638      	mov	r0, r7
 80065c8:	b00b      	add	sp, #44	; 0x2c
 80065ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065cc:	1e78      	subs	r0, r7, #1
 80065ce:	4606      	mov	r6, r0
 80065d0:	fbb3 f5f2 	udiv	r5, r3, r2
 80065d4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80065d8:	fb02 3315 	mls	r3, r2, r5, r3
 80065dc:	4473      	add	r3, lr
 80065de:	1c4c      	adds	r4, r1, #1
 80065e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80065e4:	f806 3f01 	strb.w	r3, [r6, #1]!
 80065e8:	462b      	mov	r3, r5
 80065ea:	b965      	cbnz	r5, 8006606 <__utoa+0x76>
 80065ec:	553d      	strb	r5, [r7, r4]
 80065ee:	187a      	adds	r2, r7, r1
 80065f0:	1acc      	subs	r4, r1, r3
 80065f2:	42a3      	cmp	r3, r4
 80065f4:	dae7      	bge.n	80065c6 <__utoa+0x36>
 80065f6:	7844      	ldrb	r4, [r0, #1]
 80065f8:	7815      	ldrb	r5, [r2, #0]
 80065fa:	f800 5f01 	strb.w	r5, [r0, #1]!
 80065fe:	3301      	adds	r3, #1
 8006600:	f802 4901 	strb.w	r4, [r2], #-1
 8006604:	e7f4      	b.n	80065f0 <__utoa+0x60>
 8006606:	4621      	mov	r1, r4
 8006608:	e7e2      	b.n	80065d0 <__utoa+0x40>
 800660a:	bf00      	nop
 800660c:	08006818 	.word	0x08006818

08006610 <__locale_ctype_ptr_l>:
 8006610:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006614:	4770      	bx	lr

08006616 <__ascii_mbtowc>:
 8006616:	b082      	sub	sp, #8
 8006618:	b901      	cbnz	r1, 800661c <__ascii_mbtowc+0x6>
 800661a:	a901      	add	r1, sp, #4
 800661c:	b142      	cbz	r2, 8006630 <__ascii_mbtowc+0x1a>
 800661e:	b14b      	cbz	r3, 8006634 <__ascii_mbtowc+0x1e>
 8006620:	7813      	ldrb	r3, [r2, #0]
 8006622:	600b      	str	r3, [r1, #0]
 8006624:	7812      	ldrb	r2, [r2, #0]
 8006626:	1c10      	adds	r0, r2, #0
 8006628:	bf18      	it	ne
 800662a:	2001      	movne	r0, #1
 800662c:	b002      	add	sp, #8
 800662e:	4770      	bx	lr
 8006630:	4610      	mov	r0, r2
 8006632:	e7fb      	b.n	800662c <__ascii_mbtowc+0x16>
 8006634:	f06f 0001 	mvn.w	r0, #1
 8006638:	e7f8      	b.n	800662c <__ascii_mbtowc+0x16>

0800663a <__malloc_lock>:
 800663a:	4770      	bx	lr

0800663c <__malloc_unlock>:
 800663c:	4770      	bx	lr

0800663e <__ascii_wctomb>:
 800663e:	b149      	cbz	r1, 8006654 <__ascii_wctomb+0x16>
 8006640:	2aff      	cmp	r2, #255	; 0xff
 8006642:	bf85      	ittet	hi
 8006644:	238a      	movhi	r3, #138	; 0x8a
 8006646:	6003      	strhi	r3, [r0, #0]
 8006648:	700a      	strbls	r2, [r1, #0]
 800664a:	f04f 30ff 	movhi.w	r0, #4294967295
 800664e:	bf98      	it	ls
 8006650:	2001      	movls	r0, #1
 8006652:	4770      	bx	lr
 8006654:	4608      	mov	r0, r1
 8006656:	4770      	bx	lr

08006658 <_sbrk>:
 8006658:	4b04      	ldr	r3, [pc, #16]	; (800666c <_sbrk+0x14>)
 800665a:	6819      	ldr	r1, [r3, #0]
 800665c:	4602      	mov	r2, r0
 800665e:	b909      	cbnz	r1, 8006664 <_sbrk+0xc>
 8006660:	4903      	ldr	r1, [pc, #12]	; (8006670 <_sbrk+0x18>)
 8006662:	6019      	str	r1, [r3, #0]
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	4402      	add	r2, r0
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	4770      	bx	lr
 800666c:	2000409c 	.word	0x2000409c
 8006670:	20005ae0 	.word	0x20005ae0

08006674 <_init>:
 8006674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006676:	bf00      	nop
 8006678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667a:	bc08      	pop	{r3}
 800667c:	469e      	mov	lr, r3
 800667e:	4770      	bx	lr

08006680 <_fini>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	bf00      	nop
 8006684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006686:	bc08      	pop	{r3}
 8006688:	469e      	mov	lr, r3
 800668a:	4770      	bx	lr
