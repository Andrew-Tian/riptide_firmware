library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_misc.all;
use IEEE.std_logic_unsigned.all;
use work.FRONTPANEL.all;

entity led_blink is
	port(
	
		okUH      : in     STD_LOGIC_VECTOR(4 downto 0);
		okHU      : out    STD_LOGIC_VECTOR(2 downto 0);
		okUHU     : inout  STD_LOGIC_VECTOR(31 downto 0);
		okAA      : inout  STD_LOGIC;
		
		sys_clk_n : in 	 STD_LOGIC;
		sys_clk_p : in		 STD_LOGIC;
		
		drdy_out	 : out	 STD_LOGIC;
		drdy_in	 : in		 STD_LOGIC;
		
		led       : out    STD_LOGIC_VECTOR(3 downto 0)
	);
end led_blink;

architecture blink of led_blink is


	signal okClk      : STD_LOGIC;
	signal okHE       : STD_LOGIC_VECTOR(112 downto 0);
	signal okEH       : STD_LOGIC_VECTOR(64 downto 0);
	signal okEHx      : STD_LOGIC_VECTOR(65-1 downto 0);
	
	signal in_wire   : STD_LOGIC_VECTOR(31 downto 0);
	signal out_wire   : STD_LOGIC_VECTOR(31 downto 0);
	
	signal sys_clk    : STD_LOGIC;
	
	signal counter		: natural := 0;
	signal timer_div	: natural range 0 to 10000000; 
	
	signal led_state 	: STD_LOGIC := '0';
	
	component alt_inbuf_diff
	PORT
	(
		i    : IN STD_LOGIC;
		ibar : IN STD_LOGIC;
		o    : OUT STD_LOGIC
	);
	end component;

begin
		
		led(0) <= '0';
		led(1) <= 'Z';
		led(2) <= 'Z' when (led_state='0') else '0';
		led(3) <= '0';
		
		
		
		alt_inbuf_diff_inst: alt_inbuf_diff PORT MAP (
			i    => sys_clk_p,
			ibar => sys_clk_n,
			o    => sys_clk
		);
		
		
		
		timer: process (sys_clk) is
		begin
			if rising_edge(sys_clk) then
				if (timer_div = 10000000-1) then
					timer_div <= 0;
					drdy_out <= '1';
				else
					drdy_out <= '0';
					timer_div <= timer_div + 1;
				end if;
			end if;
		end process timer;
		
		
		
		drdy_trigger: process (drdy_in) in
		begin
			if rising_edge(drdy_in) then
				led_state <= not led_state;
				counter <= counter + 1;
			end if
		end process drdy_trigger;

		out_wire <= std_logic_vector(to_unsigned(counter,ep21wire'length));
		
		

		-- Instantiate the okHost and connect endpoints
		okHI : okHost port map (
			okUH=>okUH, 
			okHU=>okHU, 
			okUHU=>okUHU, 
			okAA=>okAA,
			okClk=>okClk, 
			okHE=>okHE, 
			okEH=>okEH
		);
		
		okWO : okWireOR     generic map (N=>1) port map (okEH=>okEH, okEHx=>okEHx);

		usb_in : okWireIn     port map (okHE=>okHE,                                    ep_addr=>x"00", ep_dataout=>ep00wire);
		usb_out : okWireOut    port map (okHE=>okHE, okEH=>okEHx( 1*65-1 downto 0*65 ), ep_addr=>x"20", ep_datain=>out_wire);
		

